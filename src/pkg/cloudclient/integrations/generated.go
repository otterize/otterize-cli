// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package integrations

import (
	"context"
	"encoding/json"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// CreateDevIntegrationCreateDevIntegration includes the requested fields of the GraphQL type Integration.
type CreateDevIntegrationCreateDevIntegration struct {
	IntegrationWithCredentials `json:"-"`
}

// GetCredentials returns CreateDevIntegrationCreateDevIntegration.Credentials, and is useful for accessing the field via an interface.
func (v *CreateDevIntegrationCreateDevIntegration) GetCredentials() IntegrationCredentialsFields {
	return v.IntegrationWithCredentials.Credentials
}

// GetId returns CreateDevIntegrationCreateDevIntegration.Id, and is useful for accessing the field via an interface.
func (v *CreateDevIntegrationCreateDevIntegration) GetId() string {
	return v.IntegrationWithCredentials.IntegrationFields.Id
}

// GetOrganization returns CreateDevIntegrationCreateDevIntegration.Organization, and is useful for accessing the field via an interface.
func (v *CreateDevIntegrationCreateDevIntegration) GetOrganization() IntegrationFieldsOrganization {
	return v.IntegrationWithCredentials.IntegrationFields.Organization
}

// GetName returns CreateDevIntegrationCreateDevIntegration.Name, and is useful for accessing the field via an interface.
func (v *CreateDevIntegrationCreateDevIntegration) GetName() string {
	return v.IntegrationWithCredentials.IntegrationFields.Name
}

// GetIntegrationType returns CreateDevIntegrationCreateDevIntegration.IntegrationType, and is useful for accessing the field via an interface.
func (v *CreateDevIntegrationCreateDevIntegration) GetIntegrationType() IntegrationType {
	return v.IntegrationWithCredentials.IntegrationFields.IntegrationType
}

// GetAllEnvsAllowed returns CreateDevIntegrationCreateDevIntegration.AllEnvsAllowed, and is useful for accessing the field via an interface.
func (v *CreateDevIntegrationCreateDevIntegration) GetAllEnvsAllowed() bool {
	return v.IntegrationWithCredentials.IntegrationFields.AllEnvsAllowed
}

// GetIdentity returns CreateDevIntegrationCreateDevIntegration.Identity, and is useful for accessing the field via an interface.
func (v *CreateDevIntegrationCreateDevIntegration) GetIdentity() IntegrationFieldsIdentityIntegrationIdentity {
	return v.IntegrationWithCredentials.IntegrationFields.Identity
}

// GetEnvironments returns CreateDevIntegrationCreateDevIntegration.Environments, and is useful for accessing the field via an interface.
func (v *CreateDevIntegrationCreateDevIntegration) GetEnvironments() []IntegrationFieldsEnvironmentsEnvironment {
	return v.IntegrationWithCredentials.IntegrationFields.Environments
}

func (v *CreateDevIntegrationCreateDevIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDevIntegrationCreateDevIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDevIntegrationCreateDevIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationWithCredentials)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateDevIntegrationCreateDevIntegration struct {
	Credentials IntegrationCredentialsFields `json:"credentials"`

	Id string `json:"id"`

	Organization IntegrationFieldsOrganization `json:"organization"`

	Name string `json:"name"`

	IntegrationType IntegrationType `json:"integrationType"`

	AllEnvsAllowed bool `json:"allEnvsAllowed"`

	Identity IntegrationFieldsIdentityIntegrationIdentity `json:"identity"`

	Environments []IntegrationFieldsEnvironmentsEnvironment `json:"environments"`
}

func (v *CreateDevIntegrationCreateDevIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDevIntegrationCreateDevIntegration) __premarshalJSON() (*__premarshalCreateDevIntegrationCreateDevIntegration, error) {
	var retval __premarshalCreateDevIntegrationCreateDevIntegration

	retval.Credentials = v.IntegrationWithCredentials.Credentials
	retval.Id = v.IntegrationWithCredentials.IntegrationFields.Id
	retval.Organization = v.IntegrationWithCredentials.IntegrationFields.Organization
	retval.Name = v.IntegrationWithCredentials.IntegrationFields.Name
	retval.IntegrationType = v.IntegrationWithCredentials.IntegrationFields.IntegrationType
	retval.AllEnvsAllowed = v.IntegrationWithCredentials.IntegrationFields.AllEnvsAllowed
	retval.Identity = v.IntegrationWithCredentials.IntegrationFields.Identity
	retval.Environments = v.IntegrationWithCredentials.IntegrationFields.Environments
	return &retval, nil
}

// CreateDevIntegrationResponse is returned by CreateDevIntegration on success.
type CreateDevIntegrationResponse struct {
	CreateDevIntegration CreateDevIntegrationCreateDevIntegration `json:"createDevIntegration"`
}

// GetCreateDevIntegration returns CreateDevIntegrationResponse.CreateDevIntegration, and is useful for accessing the field via an interface.
func (v *CreateDevIntegrationResponse) GetCreateDevIntegration() CreateDevIntegrationCreateDevIntegration {
	return v.CreateDevIntegration
}

// CreateIntegrationCreateIntegration includes the requested fields of the GraphQL type Integration.
type CreateIntegrationCreateIntegration struct {
	IntegrationWithCredentials `json:"-"`
}

// GetCredentials returns CreateIntegrationCreateIntegration.Credentials, and is useful for accessing the field via an interface.
func (v *CreateIntegrationCreateIntegration) GetCredentials() IntegrationCredentialsFields {
	return v.IntegrationWithCredentials.Credentials
}

// GetId returns CreateIntegrationCreateIntegration.Id, and is useful for accessing the field via an interface.
func (v *CreateIntegrationCreateIntegration) GetId() string {
	return v.IntegrationWithCredentials.IntegrationFields.Id
}

// GetOrganization returns CreateIntegrationCreateIntegration.Organization, and is useful for accessing the field via an interface.
func (v *CreateIntegrationCreateIntegration) GetOrganization() IntegrationFieldsOrganization {
	return v.IntegrationWithCredentials.IntegrationFields.Organization
}

// GetName returns CreateIntegrationCreateIntegration.Name, and is useful for accessing the field via an interface.
func (v *CreateIntegrationCreateIntegration) GetName() string {
	return v.IntegrationWithCredentials.IntegrationFields.Name
}

// GetIntegrationType returns CreateIntegrationCreateIntegration.IntegrationType, and is useful for accessing the field via an interface.
func (v *CreateIntegrationCreateIntegration) GetIntegrationType() IntegrationType {
	return v.IntegrationWithCredentials.IntegrationFields.IntegrationType
}

// GetAllEnvsAllowed returns CreateIntegrationCreateIntegration.AllEnvsAllowed, and is useful for accessing the field via an interface.
func (v *CreateIntegrationCreateIntegration) GetAllEnvsAllowed() bool {
	return v.IntegrationWithCredentials.IntegrationFields.AllEnvsAllowed
}

// GetIdentity returns CreateIntegrationCreateIntegration.Identity, and is useful for accessing the field via an interface.
func (v *CreateIntegrationCreateIntegration) GetIdentity() IntegrationFieldsIdentityIntegrationIdentity {
	return v.IntegrationWithCredentials.IntegrationFields.Identity
}

// GetEnvironments returns CreateIntegrationCreateIntegration.Environments, and is useful for accessing the field via an interface.
func (v *CreateIntegrationCreateIntegration) GetEnvironments() []IntegrationFieldsEnvironmentsEnvironment {
	return v.IntegrationWithCredentials.IntegrationFields.Environments
}

func (v *CreateIntegrationCreateIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateIntegrationCreateIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateIntegrationCreateIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationWithCredentials)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateIntegrationCreateIntegration struct {
	Credentials IntegrationCredentialsFields `json:"credentials"`

	Id string `json:"id"`

	Organization IntegrationFieldsOrganization `json:"organization"`

	Name string `json:"name"`

	IntegrationType IntegrationType `json:"integrationType"`

	AllEnvsAllowed bool `json:"allEnvsAllowed"`

	Identity IntegrationFieldsIdentityIntegrationIdentity `json:"identity"`

	Environments []IntegrationFieldsEnvironmentsEnvironment `json:"environments"`
}

func (v *CreateIntegrationCreateIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateIntegrationCreateIntegration) __premarshalJSON() (*__premarshalCreateIntegrationCreateIntegration, error) {
	var retval __premarshalCreateIntegrationCreateIntegration

	retval.Credentials = v.IntegrationWithCredentials.Credentials
	retval.Id = v.IntegrationWithCredentials.IntegrationFields.Id
	retval.Organization = v.IntegrationWithCredentials.IntegrationFields.Organization
	retval.Name = v.IntegrationWithCredentials.IntegrationFields.Name
	retval.IntegrationType = v.IntegrationWithCredentials.IntegrationFields.IntegrationType
	retval.AllEnvsAllowed = v.IntegrationWithCredentials.IntegrationFields.AllEnvsAllowed
	retval.Identity = v.IntegrationWithCredentials.IntegrationFields.Identity
	retval.Environments = v.IntegrationWithCredentials.IntegrationFields.Environments
	return &retval, nil
}

// CreateIntegrationResponse is returned by CreateIntegration on success.
type CreateIntegrationResponse struct {
	// Create a new integration
	CreateIntegration CreateIntegrationCreateIntegration `json:"createIntegration"`
}

// GetCreateIntegration returns CreateIntegrationResponse.CreateIntegration, and is useful for accessing the field via an interface.
func (v *CreateIntegrationResponse) GetCreateIntegration() CreateIntegrationCreateIntegration {
	return v.CreateIntegration
}

// DeleteIntegrationResponse is returned by DeleteIntegration on success.
type DeleteIntegrationResponse struct {
	// Delete integration
	DeleteIntegration string `json:"deleteIntegration"`
}

// GetDeleteIntegration returns DeleteIntegrationResponse.DeleteIntegration, and is useful for accessing the field via an interface.
func (v *DeleteIntegrationResponse) GetDeleteIntegration() string { return v.DeleteIntegration }

// GetIntegrationByNameOneIntegration includes the requested fields of the GraphQL type Integration.
type GetIntegrationByNameOneIntegration struct {
	IntegrationWithStatus `json:"-"`
}

// GetStatus returns GetIntegrationByNameOneIntegration.Status, and is useful for accessing the field via an interface.
func (v *GetIntegrationByNameOneIntegration) GetStatus() IntegrationStatusFields {
	return v.IntegrationWithStatus.Status
}

// GetId returns GetIntegrationByNameOneIntegration.Id, and is useful for accessing the field via an interface.
func (v *GetIntegrationByNameOneIntegration) GetId() string {
	return v.IntegrationWithStatus.IntegrationFields.Id
}

// GetOrganization returns GetIntegrationByNameOneIntegration.Organization, and is useful for accessing the field via an interface.
func (v *GetIntegrationByNameOneIntegration) GetOrganization() IntegrationFieldsOrganization {
	return v.IntegrationWithStatus.IntegrationFields.Organization
}

// GetName returns GetIntegrationByNameOneIntegration.Name, and is useful for accessing the field via an interface.
func (v *GetIntegrationByNameOneIntegration) GetName() string {
	return v.IntegrationWithStatus.IntegrationFields.Name
}

// GetIntegrationType returns GetIntegrationByNameOneIntegration.IntegrationType, and is useful for accessing the field via an interface.
func (v *GetIntegrationByNameOneIntegration) GetIntegrationType() IntegrationType {
	return v.IntegrationWithStatus.IntegrationFields.IntegrationType
}

// GetAllEnvsAllowed returns GetIntegrationByNameOneIntegration.AllEnvsAllowed, and is useful for accessing the field via an interface.
func (v *GetIntegrationByNameOneIntegration) GetAllEnvsAllowed() bool {
	return v.IntegrationWithStatus.IntegrationFields.AllEnvsAllowed
}

// GetIdentity returns GetIntegrationByNameOneIntegration.Identity, and is useful for accessing the field via an interface.
func (v *GetIntegrationByNameOneIntegration) GetIdentity() IntegrationFieldsIdentityIntegrationIdentity {
	return v.IntegrationWithStatus.IntegrationFields.Identity
}

// GetEnvironments returns GetIntegrationByNameOneIntegration.Environments, and is useful for accessing the field via an interface.
func (v *GetIntegrationByNameOneIntegration) GetEnvironments() []IntegrationFieldsEnvironmentsEnvironment {
	return v.IntegrationWithStatus.IntegrationFields.Environments
}

// GetCredentials returns GetIntegrationByNameOneIntegration.Credentials, and is useful for accessing the field via an interface.
func (v *GetIntegrationByNameOneIntegration) GetCredentials() IntegrationFieldsCredentialsIntegrationCredentials {
	return v.IntegrationWithStatus.IntegrationFields.Credentials
}

func (v *GetIntegrationByNameOneIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetIntegrationByNameOneIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.GetIntegrationByNameOneIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationWithStatus)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetIntegrationByNameOneIntegration struct {
	Status IntegrationStatusFields `json:"status"`

	Id string `json:"id"`

	Organization IntegrationFieldsOrganization `json:"organization"`

	Name string `json:"name"`

	IntegrationType IntegrationType `json:"integrationType"`

	AllEnvsAllowed bool `json:"allEnvsAllowed"`

	Identity IntegrationFieldsIdentityIntegrationIdentity `json:"identity"`

	Environments []IntegrationFieldsEnvironmentsEnvironment `json:"environments"`

	Credentials IntegrationFieldsCredentialsIntegrationCredentials `json:"credentials"`
}

func (v *GetIntegrationByNameOneIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetIntegrationByNameOneIntegration) __premarshalJSON() (*__premarshalGetIntegrationByNameOneIntegration, error) {
	var retval __premarshalGetIntegrationByNameOneIntegration

	retval.Status = v.IntegrationWithStatus.Status
	retval.Id = v.IntegrationWithStatus.IntegrationFields.Id
	retval.Organization = v.IntegrationWithStatus.IntegrationFields.Organization
	retval.Name = v.IntegrationWithStatus.IntegrationFields.Name
	retval.IntegrationType = v.IntegrationWithStatus.IntegrationFields.IntegrationType
	retval.AllEnvsAllowed = v.IntegrationWithStatus.IntegrationFields.AllEnvsAllowed
	retval.Identity = v.IntegrationWithStatus.IntegrationFields.Identity
	retval.Environments = v.IntegrationWithStatus.IntegrationFields.Environments
	retval.Credentials = v.IntegrationWithStatus.IntegrationFields.Credentials
	return &retval, nil
}

// GetIntegrationByNameResponse is returned by GetIntegrationByName on success.
type GetIntegrationByNameResponse struct {
	// Get integration by filters
	OneIntegration GetIntegrationByNameOneIntegration `json:"oneIntegration"`
}

// GetOneIntegration returns GetIntegrationByNameResponse.OneIntegration, and is useful for accessing the field via an interface.
func (v *GetIntegrationByNameResponse) GetOneIntegration() GetIntegrationByNameOneIntegration {
	return v.OneIntegration
}

// GetIntegrationCredentialsIntegration includes the requested fields of the GraphQL type Integration.
type GetIntegrationCredentialsIntegration struct {
	Credentials *GetIntegrationCredentialsIntegrationCredentials `json:"credentials"`
}

// GetCredentials returns GetIntegrationCredentialsIntegration.Credentials, and is useful for accessing the field via an interface.
func (v *GetIntegrationCredentialsIntegration) GetCredentials() *GetIntegrationCredentialsIntegrationCredentials {
	return v.Credentials
}

// GetIntegrationCredentialsIntegrationCredentials includes the requested fields of the GraphQL type IntegrationCredentials.
type GetIntegrationCredentialsIntegrationCredentials struct {
	IntegrationCredentialsFields `json:"-"`
}

// GetClientId returns GetIntegrationCredentialsIntegrationCredentials.ClientId, and is useful for accessing the field via an interface.
func (v *GetIntegrationCredentialsIntegrationCredentials) GetClientId() string {
	return v.IntegrationCredentialsFields.ClientId
}

// GetSecret returns GetIntegrationCredentialsIntegrationCredentials.Secret, and is useful for accessing the field via an interface.
func (v *GetIntegrationCredentialsIntegrationCredentials) GetSecret() string {
	return v.IntegrationCredentialsFields.Secret
}

func (v *GetIntegrationCredentialsIntegrationCredentials) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetIntegrationCredentialsIntegrationCredentials
		graphql.NoUnmarshalJSON
	}
	firstPass.GetIntegrationCredentialsIntegrationCredentials = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationCredentialsFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetIntegrationCredentialsIntegrationCredentials struct {
	ClientId string `json:"clientId"`

	Secret string `json:"secret"`
}

func (v *GetIntegrationCredentialsIntegrationCredentials) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetIntegrationCredentialsIntegrationCredentials) __premarshalJSON() (*__premarshalGetIntegrationCredentialsIntegrationCredentials, error) {
	var retval __premarshalGetIntegrationCredentialsIntegrationCredentials

	retval.ClientId = v.IntegrationCredentialsFields.ClientId
	retval.Secret = v.IntegrationCredentialsFields.Secret
	return &retval, nil
}

// GetIntegrationCredentialsResponse is returned by GetIntegrationCredentials on success.
type GetIntegrationCredentialsResponse struct {
	// Get integration
	Integration *GetIntegrationCredentialsIntegration `json:"integration"`
}

// GetIntegration returns GetIntegrationCredentialsResponse.Integration, and is useful for accessing the field via an interface.
func (v *GetIntegrationCredentialsResponse) GetIntegration() *GetIntegrationCredentialsIntegration {
	return v.Integration
}

// GetIntegrationsIntegrationsIntegration includes the requested fields of the GraphQL type Integration.
type GetIntegrationsIntegrationsIntegration struct {
	IntegrationWithStatus `json:"-"`
}

// GetStatus returns GetIntegrationsIntegrationsIntegration.Status, and is useful for accessing the field via an interface.
func (v *GetIntegrationsIntegrationsIntegration) GetStatus() IntegrationStatusFields {
	return v.IntegrationWithStatus.Status
}

// GetId returns GetIntegrationsIntegrationsIntegration.Id, and is useful for accessing the field via an interface.
func (v *GetIntegrationsIntegrationsIntegration) GetId() string {
	return v.IntegrationWithStatus.IntegrationFields.Id
}

// GetOrganization returns GetIntegrationsIntegrationsIntegration.Organization, and is useful for accessing the field via an interface.
func (v *GetIntegrationsIntegrationsIntegration) GetOrganization() IntegrationFieldsOrganization {
	return v.IntegrationWithStatus.IntegrationFields.Organization
}

// GetName returns GetIntegrationsIntegrationsIntegration.Name, and is useful for accessing the field via an interface.
func (v *GetIntegrationsIntegrationsIntegration) GetName() string {
	return v.IntegrationWithStatus.IntegrationFields.Name
}

// GetIntegrationType returns GetIntegrationsIntegrationsIntegration.IntegrationType, and is useful for accessing the field via an interface.
func (v *GetIntegrationsIntegrationsIntegration) GetIntegrationType() IntegrationType {
	return v.IntegrationWithStatus.IntegrationFields.IntegrationType
}

// GetAllEnvsAllowed returns GetIntegrationsIntegrationsIntegration.AllEnvsAllowed, and is useful for accessing the field via an interface.
func (v *GetIntegrationsIntegrationsIntegration) GetAllEnvsAllowed() bool {
	return v.IntegrationWithStatus.IntegrationFields.AllEnvsAllowed
}

// GetIdentity returns GetIntegrationsIntegrationsIntegration.Identity, and is useful for accessing the field via an interface.
func (v *GetIntegrationsIntegrationsIntegration) GetIdentity() IntegrationFieldsIdentityIntegrationIdentity {
	return v.IntegrationWithStatus.IntegrationFields.Identity
}

// GetEnvironments returns GetIntegrationsIntegrationsIntegration.Environments, and is useful for accessing the field via an interface.
func (v *GetIntegrationsIntegrationsIntegration) GetEnvironments() []IntegrationFieldsEnvironmentsEnvironment {
	return v.IntegrationWithStatus.IntegrationFields.Environments
}

// GetCredentials returns GetIntegrationsIntegrationsIntegration.Credentials, and is useful for accessing the field via an interface.
func (v *GetIntegrationsIntegrationsIntegration) GetCredentials() IntegrationFieldsCredentialsIntegrationCredentials {
	return v.IntegrationWithStatus.IntegrationFields.Credentials
}

func (v *GetIntegrationsIntegrationsIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetIntegrationsIntegrationsIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.GetIntegrationsIntegrationsIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationWithStatus)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetIntegrationsIntegrationsIntegration struct {
	Status IntegrationStatusFields `json:"status"`

	Id string `json:"id"`

	Organization IntegrationFieldsOrganization `json:"organization"`

	Name string `json:"name"`

	IntegrationType IntegrationType `json:"integrationType"`

	AllEnvsAllowed bool `json:"allEnvsAllowed"`

	Identity IntegrationFieldsIdentityIntegrationIdentity `json:"identity"`

	Environments []IntegrationFieldsEnvironmentsEnvironment `json:"environments"`

	Credentials IntegrationFieldsCredentialsIntegrationCredentials `json:"credentials"`
}

func (v *GetIntegrationsIntegrationsIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetIntegrationsIntegrationsIntegration) __premarshalJSON() (*__premarshalGetIntegrationsIntegrationsIntegration, error) {
	var retval __premarshalGetIntegrationsIntegrationsIntegration

	retval.Status = v.IntegrationWithStatus.Status
	retval.Id = v.IntegrationWithStatus.IntegrationFields.Id
	retval.Organization = v.IntegrationWithStatus.IntegrationFields.Organization
	retval.Name = v.IntegrationWithStatus.IntegrationFields.Name
	retval.IntegrationType = v.IntegrationWithStatus.IntegrationFields.IntegrationType
	retval.AllEnvsAllowed = v.IntegrationWithStatus.IntegrationFields.AllEnvsAllowed
	retval.Identity = v.IntegrationWithStatus.IntegrationFields.Identity
	retval.Environments = v.IntegrationWithStatus.IntegrationFields.Environments
	retval.Credentials = v.IntegrationWithStatus.IntegrationFields.Credentials
	return &retval, nil
}

// GetIntegrationsResponse is returned by GetIntegrations on success.
type GetIntegrationsResponse struct {
	// List integrations
	Integrations []*GetIntegrationsIntegrationsIntegration `json:"integrations"`
}

// GetIntegrations returns GetIntegrationsResponse.Integrations, and is useful for accessing the field via an interface.
func (v *GetIntegrationsResponse) GetIntegrations() []*GetIntegrationsIntegrationsIntegration {
	return v.Integrations
}

// GetIntegrationsWithCredentialsIntegrationsIntegration includes the requested fields of the GraphQL type Integration.
type GetIntegrationsWithCredentialsIntegrationsIntegration struct {
	IntegrationWithCredentials `json:"-"`
}

// GetCredentials returns GetIntegrationsWithCredentialsIntegrationsIntegration.Credentials, and is useful for accessing the field via an interface.
func (v *GetIntegrationsWithCredentialsIntegrationsIntegration) GetCredentials() IntegrationCredentialsFields {
	return v.IntegrationWithCredentials.Credentials
}

// GetId returns GetIntegrationsWithCredentialsIntegrationsIntegration.Id, and is useful for accessing the field via an interface.
func (v *GetIntegrationsWithCredentialsIntegrationsIntegration) GetId() string {
	return v.IntegrationWithCredentials.IntegrationFields.Id
}

// GetOrganization returns GetIntegrationsWithCredentialsIntegrationsIntegration.Organization, and is useful for accessing the field via an interface.
func (v *GetIntegrationsWithCredentialsIntegrationsIntegration) GetOrganization() IntegrationFieldsOrganization {
	return v.IntegrationWithCredentials.IntegrationFields.Organization
}

// GetName returns GetIntegrationsWithCredentialsIntegrationsIntegration.Name, and is useful for accessing the field via an interface.
func (v *GetIntegrationsWithCredentialsIntegrationsIntegration) GetName() string {
	return v.IntegrationWithCredentials.IntegrationFields.Name
}

// GetIntegrationType returns GetIntegrationsWithCredentialsIntegrationsIntegration.IntegrationType, and is useful for accessing the field via an interface.
func (v *GetIntegrationsWithCredentialsIntegrationsIntegration) GetIntegrationType() IntegrationType {
	return v.IntegrationWithCredentials.IntegrationFields.IntegrationType
}

// GetAllEnvsAllowed returns GetIntegrationsWithCredentialsIntegrationsIntegration.AllEnvsAllowed, and is useful for accessing the field via an interface.
func (v *GetIntegrationsWithCredentialsIntegrationsIntegration) GetAllEnvsAllowed() bool {
	return v.IntegrationWithCredentials.IntegrationFields.AllEnvsAllowed
}

// GetIdentity returns GetIntegrationsWithCredentialsIntegrationsIntegration.Identity, and is useful for accessing the field via an interface.
func (v *GetIntegrationsWithCredentialsIntegrationsIntegration) GetIdentity() IntegrationFieldsIdentityIntegrationIdentity {
	return v.IntegrationWithCredentials.IntegrationFields.Identity
}

// GetEnvironments returns GetIntegrationsWithCredentialsIntegrationsIntegration.Environments, and is useful for accessing the field via an interface.
func (v *GetIntegrationsWithCredentialsIntegrationsIntegration) GetEnvironments() []IntegrationFieldsEnvironmentsEnvironment {
	return v.IntegrationWithCredentials.IntegrationFields.Environments
}

func (v *GetIntegrationsWithCredentialsIntegrationsIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetIntegrationsWithCredentialsIntegrationsIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.GetIntegrationsWithCredentialsIntegrationsIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationWithCredentials)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetIntegrationsWithCredentialsIntegrationsIntegration struct {
	Credentials IntegrationCredentialsFields `json:"credentials"`

	Id string `json:"id"`

	Organization IntegrationFieldsOrganization `json:"organization"`

	Name string `json:"name"`

	IntegrationType IntegrationType `json:"integrationType"`

	AllEnvsAllowed bool `json:"allEnvsAllowed"`

	Identity IntegrationFieldsIdentityIntegrationIdentity `json:"identity"`

	Environments []IntegrationFieldsEnvironmentsEnvironment `json:"environments"`
}

func (v *GetIntegrationsWithCredentialsIntegrationsIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetIntegrationsWithCredentialsIntegrationsIntegration) __premarshalJSON() (*__premarshalGetIntegrationsWithCredentialsIntegrationsIntegration, error) {
	var retval __premarshalGetIntegrationsWithCredentialsIntegrationsIntegration

	retval.Credentials = v.IntegrationWithCredentials.Credentials
	retval.Id = v.IntegrationWithCredentials.IntegrationFields.Id
	retval.Organization = v.IntegrationWithCredentials.IntegrationFields.Organization
	retval.Name = v.IntegrationWithCredentials.IntegrationFields.Name
	retval.IntegrationType = v.IntegrationWithCredentials.IntegrationFields.IntegrationType
	retval.AllEnvsAllowed = v.IntegrationWithCredentials.IntegrationFields.AllEnvsAllowed
	retval.Identity = v.IntegrationWithCredentials.IntegrationFields.Identity
	retval.Environments = v.IntegrationWithCredentials.IntegrationFields.Environments
	return &retval, nil
}

// GetIntegrationsWithCredentialsResponse is returned by GetIntegrationsWithCredentials on success.
type GetIntegrationsWithCredentialsResponse struct {
	// List integrations
	Integrations []*GetIntegrationsWithCredentialsIntegrationsIntegration `json:"integrations"`
}

// GetIntegrations returns GetIntegrationsWithCredentialsResponse.Integrations, and is useful for accessing the field via an interface.
func (v *GetIntegrationsWithCredentialsResponse) GetIntegrations() []*GetIntegrationsWithCredentialsIntegrationsIntegration {
	return v.Integrations
}

// IntegrationCredentialsFields includes the GraphQL fields of IntegrationCredentials requested by the fragment IntegrationCredentialsFields.
type IntegrationCredentialsFields struct {
	ClientId string `json:"clientId"`
	Secret   string `json:"secret"`
}

// GetClientId returns IntegrationCredentialsFields.ClientId, and is useful for accessing the field via an interface.
func (v *IntegrationCredentialsFields) GetClientId() string { return v.ClientId }

// GetSecret returns IntegrationCredentialsFields.Secret, and is useful for accessing the field via an interface.
func (v *IntegrationCredentialsFields) GetSecret() string { return v.Secret }

type IntegrationEnvironments struct {
	EnvironmentIds []string `json:"environmentIds"`
	AllEnvsAllowed bool     `json:"allEnvsAllowed"`
}

// GetEnvironmentIds returns IntegrationEnvironments.EnvironmentIds, and is useful for accessing the field via an interface.
func (v *IntegrationEnvironments) GetEnvironmentIds() []string { return v.EnvironmentIds }

// GetAllEnvsAllowed returns IntegrationEnvironments.AllEnvsAllowed, and is useful for accessing the field via an interface.
func (v *IntegrationEnvironments) GetAllEnvsAllowed() bool { return v.AllEnvsAllowed }

// IntegrationFields includes the GraphQL fields of Integration requested by the fragment IntegrationFields.
type IntegrationFields struct {
	Id              string                                             `json:"id"`
	Organization    IntegrationFieldsOrganization                      `json:"organization"`
	Name            string                                             `json:"name"`
	IntegrationType IntegrationType                                    `json:"integrationType"`
	AllEnvsAllowed  bool                                               `json:"allEnvsAllowed"`
	Identity        IntegrationFieldsIdentityIntegrationIdentity       `json:"identity"`
	Environments    []IntegrationFieldsEnvironmentsEnvironment         `json:"environments"`
	Credentials     IntegrationFieldsCredentialsIntegrationCredentials `json:"credentials"`
}

// GetId returns IntegrationFields.Id, and is useful for accessing the field via an interface.
func (v *IntegrationFields) GetId() string { return v.Id }

// GetOrganization returns IntegrationFields.Organization, and is useful for accessing the field via an interface.
func (v *IntegrationFields) GetOrganization() IntegrationFieldsOrganization { return v.Organization }

// GetName returns IntegrationFields.Name, and is useful for accessing the field via an interface.
func (v *IntegrationFields) GetName() string { return v.Name }

// GetIntegrationType returns IntegrationFields.IntegrationType, and is useful for accessing the field via an interface.
func (v *IntegrationFields) GetIntegrationType() IntegrationType { return v.IntegrationType }

// GetAllEnvsAllowed returns IntegrationFields.AllEnvsAllowed, and is useful for accessing the field via an interface.
func (v *IntegrationFields) GetAllEnvsAllowed() bool { return v.AllEnvsAllowed }

// GetIdentity returns IntegrationFields.Identity, and is useful for accessing the field via an interface.
func (v *IntegrationFields) GetIdentity() IntegrationFieldsIdentityIntegrationIdentity {
	return v.Identity
}

// GetEnvironments returns IntegrationFields.Environments, and is useful for accessing the field via an interface.
func (v *IntegrationFields) GetEnvironments() []IntegrationFieldsEnvironmentsEnvironment {
	return v.Environments
}

// GetCredentials returns IntegrationFields.Credentials, and is useful for accessing the field via an interface.
func (v *IntegrationFields) GetCredentials() IntegrationFieldsCredentialsIntegrationCredentials {
	return v.Credentials
}

// IntegrationFieldsCredentialsIntegrationCredentials includes the requested fields of the GraphQL type IntegrationCredentials.
type IntegrationFieldsCredentialsIntegrationCredentials struct {
	ClientId string `json:"clientId"`
}

// GetClientId returns IntegrationFieldsCredentialsIntegrationCredentials.ClientId, and is useful for accessing the field via an interface.
func (v *IntegrationFieldsCredentialsIntegrationCredentials) GetClientId() string { return v.ClientId }

// IntegrationFieldsEnvironmentsEnvironment includes the requested fields of the GraphQL type Environment.
type IntegrationFieldsEnvironmentsEnvironment struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns IntegrationFieldsEnvironmentsEnvironment.Id, and is useful for accessing the field via an interface.
func (v *IntegrationFieldsEnvironmentsEnvironment) GetId() string { return v.Id }

// GetName returns IntegrationFieldsEnvironmentsEnvironment.Name, and is useful for accessing the field via an interface.
func (v *IntegrationFieldsEnvironmentsEnvironment) GetName() string { return v.Name }

// IntegrationFieldsIdentityIntegrationIdentity includes the requested fields of the GraphQL type IntegrationIdentity.
type IntegrationFieldsIdentityIntegrationIdentity struct {
	Other []IntegrationFieldsIdentityIntegrationIdentityOtherIntegrationIdentityOtherFields `json:"other"`
}

// GetOther returns IntegrationFieldsIdentityIntegrationIdentity.Other, and is useful for accessing the field via an interface.
func (v *IntegrationFieldsIdentityIntegrationIdentity) GetOther() []IntegrationFieldsIdentityIntegrationIdentityOtherIntegrationIdentityOtherFields {
	return v.Other
}

// IntegrationFieldsIdentityIntegrationIdentityOtherIntegrationIdentityOtherFields includes the requested fields of the GraphQL type IntegrationIdentityOtherFields.
type IntegrationFieldsIdentityIntegrationIdentityOtherIntegrationIdentityOtherFields struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns IntegrationFieldsIdentityIntegrationIdentityOtherIntegrationIdentityOtherFields.Key, and is useful for accessing the field via an interface.
func (v *IntegrationFieldsIdentityIntegrationIdentityOtherIntegrationIdentityOtherFields) GetKey() string {
	return v.Key
}

// GetValue returns IntegrationFieldsIdentityIntegrationIdentityOtherIntegrationIdentityOtherFields.Value, and is useful for accessing the field via an interface.
func (v *IntegrationFieldsIdentityIntegrationIdentityOtherIntegrationIdentityOtherFields) GetValue() string {
	return v.Value
}

// IntegrationFieldsOrganization includes the requested fields of the GraphQL type Organization.
type IntegrationFieldsOrganization struct {
	Id string `json:"id"`
}

// GetId returns IntegrationFieldsOrganization.Id, and is useful for accessing the field via an interface.
func (v *IntegrationFieldsOrganization) GetId() string { return v.Id }

// IntegrationIntegration includes the requested fields of the GraphQL type Integration.
type IntegrationIntegration struct {
	IntegrationWithStatus `json:"-"`
}

// GetStatus returns IntegrationIntegration.Status, and is useful for accessing the field via an interface.
func (v *IntegrationIntegration) GetStatus() IntegrationStatusFields {
	return v.IntegrationWithStatus.Status
}

// GetId returns IntegrationIntegration.Id, and is useful for accessing the field via an interface.
func (v *IntegrationIntegration) GetId() string { return v.IntegrationWithStatus.IntegrationFields.Id }

// GetOrganization returns IntegrationIntegration.Organization, and is useful for accessing the field via an interface.
func (v *IntegrationIntegration) GetOrganization() IntegrationFieldsOrganization {
	return v.IntegrationWithStatus.IntegrationFields.Organization
}

// GetName returns IntegrationIntegration.Name, and is useful for accessing the field via an interface.
func (v *IntegrationIntegration) GetName() string {
	return v.IntegrationWithStatus.IntegrationFields.Name
}

// GetIntegrationType returns IntegrationIntegration.IntegrationType, and is useful for accessing the field via an interface.
func (v *IntegrationIntegration) GetIntegrationType() IntegrationType {
	return v.IntegrationWithStatus.IntegrationFields.IntegrationType
}

// GetAllEnvsAllowed returns IntegrationIntegration.AllEnvsAllowed, and is useful for accessing the field via an interface.
func (v *IntegrationIntegration) GetAllEnvsAllowed() bool {
	return v.IntegrationWithStatus.IntegrationFields.AllEnvsAllowed
}

// GetIdentity returns IntegrationIntegration.Identity, and is useful for accessing the field via an interface.
func (v *IntegrationIntegration) GetIdentity() IntegrationFieldsIdentityIntegrationIdentity {
	return v.IntegrationWithStatus.IntegrationFields.Identity
}

// GetEnvironments returns IntegrationIntegration.Environments, and is useful for accessing the field via an interface.
func (v *IntegrationIntegration) GetEnvironments() []IntegrationFieldsEnvironmentsEnvironment {
	return v.IntegrationWithStatus.IntegrationFields.Environments
}

// GetCredentials returns IntegrationIntegration.Credentials, and is useful for accessing the field via an interface.
func (v *IntegrationIntegration) GetCredentials() IntegrationFieldsCredentialsIntegrationCredentials {
	return v.IntegrationWithStatus.IntegrationFields.Credentials
}

func (v *IntegrationIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IntegrationIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.IntegrationIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationWithStatus)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIntegrationIntegration struct {
	Status IntegrationStatusFields `json:"status"`

	Id string `json:"id"`

	Organization IntegrationFieldsOrganization `json:"organization"`

	Name string `json:"name"`

	IntegrationType IntegrationType `json:"integrationType"`

	AllEnvsAllowed bool `json:"allEnvsAllowed"`

	Identity IntegrationFieldsIdentityIntegrationIdentity `json:"identity"`

	Environments []IntegrationFieldsEnvironmentsEnvironment `json:"environments"`

	Credentials IntegrationFieldsCredentialsIntegrationCredentials `json:"credentials"`
}

func (v *IntegrationIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IntegrationIntegration) __premarshalJSON() (*__premarshalIntegrationIntegration, error) {
	var retval __premarshalIntegrationIntegration

	retval.Status = v.IntegrationWithStatus.Status
	retval.Id = v.IntegrationWithStatus.IntegrationFields.Id
	retval.Organization = v.IntegrationWithStatus.IntegrationFields.Organization
	retval.Name = v.IntegrationWithStatus.IntegrationFields.Name
	retval.IntegrationType = v.IntegrationWithStatus.IntegrationFields.IntegrationType
	retval.AllEnvsAllowed = v.IntegrationWithStatus.IntegrationFields.AllEnvsAllowed
	retval.Identity = v.IntegrationWithStatus.IntegrationFields.Identity
	retval.Environments = v.IntegrationWithStatus.IntegrationFields.Environments
	retval.Credentials = v.IntegrationWithStatus.IntegrationFields.Credentials
	return &retval, nil
}

// IntegrationResponse is returned by Integration on success.
type IntegrationResponse struct {
	// Get integration
	Integration *IntegrationIntegration `json:"integration"`
}

// GetIntegration returns IntegrationResponse.Integration, and is useful for accessing the field via an interface.
func (v *IntegrationResponse) GetIntegration() *IntegrationIntegration { return v.Integration }

// IntegrationStatusFields includes the GraphQL fields of IntegrationStatus requested by the fragment IntegrationStatusFields.
type IntegrationStatusFields struct {
	Id            string                               `json:"id"`
	LastSeen      time.Time                            `json:"lastSeen"`
	IntentsStatus IntegrationStatusFieldsIntentsStatus `json:"intentsStatus"`
}

// GetId returns IntegrationStatusFields.Id, and is useful for accessing the field via an interface.
func (v *IntegrationStatusFields) GetId() string { return v.Id }

// GetLastSeen returns IntegrationStatusFields.LastSeen, and is useful for accessing the field via an interface.
func (v *IntegrationStatusFields) GetLastSeen() time.Time { return v.LastSeen }

// GetIntentsStatus returns IntegrationStatusFields.IntentsStatus, and is useful for accessing the field via an interface.
func (v *IntegrationStatusFields) GetIntentsStatus() IntegrationStatusFieldsIntentsStatus {
	return v.IntentsStatus
}

// IntegrationStatusFieldsIntentsStatus includes the requested fields of the GraphQL type IntentsStatus.
type IntegrationStatusFieldsIntentsStatus struct {
	AppliedAt      time.Time `json:"appliedAt"`
	ApplyError     string    `json:"applyError"`
	RevisionNumber int       `json:"revisionNumber"`
}

// GetAppliedAt returns IntegrationStatusFieldsIntentsStatus.AppliedAt, and is useful for accessing the field via an interface.
func (v *IntegrationStatusFieldsIntentsStatus) GetAppliedAt() time.Time { return v.AppliedAt }

// GetApplyError returns IntegrationStatusFieldsIntentsStatus.ApplyError, and is useful for accessing the field via an interface.
func (v *IntegrationStatusFieldsIntentsStatus) GetApplyError() string { return v.ApplyError }

// GetRevisionNumber returns IntegrationStatusFieldsIntentsStatus.RevisionNumber, and is useful for accessing the field via an interface.
func (v *IntegrationStatusFieldsIntentsStatus) GetRevisionNumber() int { return v.RevisionNumber }

type IntegrationType string

const (
	IntegrationTypeCicd       IntegrationType = "CICD"
	IntegrationTypeService    IntegrationType = "Service"
	IntegrationTypeKafka      IntegrationType = "Kafka"
	IntegrationTypeKubernetes IntegrationType = "Kubernetes"
)

// IntegrationWithCredentials includes the GraphQL fields of Integration requested by the fragment IntegrationWithCredentials.
type IntegrationWithCredentials struct {
	IntegrationFields `json:"-"`
	Credentials       IntegrationCredentialsFields `json:"credentials"`
}

// GetCredentials returns IntegrationWithCredentials.Credentials, and is useful for accessing the field via an interface.
func (v *IntegrationWithCredentials) GetCredentials() IntegrationCredentialsFields {
	return v.Credentials
}

// GetId returns IntegrationWithCredentials.Id, and is useful for accessing the field via an interface.
func (v *IntegrationWithCredentials) GetId() string { return v.IntegrationFields.Id }

// GetOrganization returns IntegrationWithCredentials.Organization, and is useful for accessing the field via an interface.
func (v *IntegrationWithCredentials) GetOrganization() IntegrationFieldsOrganization {
	return v.IntegrationFields.Organization
}

// GetName returns IntegrationWithCredentials.Name, and is useful for accessing the field via an interface.
func (v *IntegrationWithCredentials) GetName() string { return v.IntegrationFields.Name }

// GetIntegrationType returns IntegrationWithCredentials.IntegrationType, and is useful for accessing the field via an interface.
func (v *IntegrationWithCredentials) GetIntegrationType() IntegrationType {
	return v.IntegrationFields.IntegrationType
}

// GetAllEnvsAllowed returns IntegrationWithCredentials.AllEnvsAllowed, and is useful for accessing the field via an interface.
func (v *IntegrationWithCredentials) GetAllEnvsAllowed() bool {
	return v.IntegrationFields.AllEnvsAllowed
}

// GetIdentity returns IntegrationWithCredentials.Identity, and is useful for accessing the field via an interface.
func (v *IntegrationWithCredentials) GetIdentity() IntegrationFieldsIdentityIntegrationIdentity {
	return v.IntegrationFields.Identity
}

// GetEnvironments returns IntegrationWithCredentials.Environments, and is useful for accessing the field via an interface.
func (v *IntegrationWithCredentials) GetEnvironments() []IntegrationFieldsEnvironmentsEnvironment {
	return v.IntegrationFields.Environments
}

func (v *IntegrationWithCredentials) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IntegrationWithCredentials
		graphql.NoUnmarshalJSON
	}
	firstPass.IntegrationWithCredentials = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIntegrationWithCredentials struct {
	Credentials IntegrationCredentialsFields `json:"credentials"`

	Id string `json:"id"`

	Organization IntegrationFieldsOrganization `json:"organization"`

	Name string `json:"name"`

	IntegrationType IntegrationType `json:"integrationType"`

	AllEnvsAllowed bool `json:"allEnvsAllowed"`

	Identity IntegrationFieldsIdentityIntegrationIdentity `json:"identity"`

	Environments []IntegrationFieldsEnvironmentsEnvironment `json:"environments"`
}

func (v *IntegrationWithCredentials) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IntegrationWithCredentials) __premarshalJSON() (*__premarshalIntegrationWithCredentials, error) {
	var retval __premarshalIntegrationWithCredentials

	retval.Credentials = v.Credentials
	retval.Id = v.IntegrationFields.Id
	retval.Organization = v.IntegrationFields.Organization
	retval.Name = v.IntegrationFields.Name
	retval.IntegrationType = v.IntegrationFields.IntegrationType
	retval.AllEnvsAllowed = v.IntegrationFields.AllEnvsAllowed
	retval.Identity = v.IntegrationFields.Identity
	retval.Environments = v.IntegrationFields.Environments
	return &retval, nil
}

// IntegrationWithStatus includes the GraphQL fields of Integration requested by the fragment IntegrationWithStatus.
type IntegrationWithStatus struct {
	IntegrationFields `json:"-"`
	Status            IntegrationStatusFields `json:"status"`
}

// GetStatus returns IntegrationWithStatus.Status, and is useful for accessing the field via an interface.
func (v *IntegrationWithStatus) GetStatus() IntegrationStatusFields { return v.Status }

// GetId returns IntegrationWithStatus.Id, and is useful for accessing the field via an interface.
func (v *IntegrationWithStatus) GetId() string { return v.IntegrationFields.Id }

// GetOrganization returns IntegrationWithStatus.Organization, and is useful for accessing the field via an interface.
func (v *IntegrationWithStatus) GetOrganization() IntegrationFieldsOrganization {
	return v.IntegrationFields.Organization
}

// GetName returns IntegrationWithStatus.Name, and is useful for accessing the field via an interface.
func (v *IntegrationWithStatus) GetName() string { return v.IntegrationFields.Name }

// GetIntegrationType returns IntegrationWithStatus.IntegrationType, and is useful for accessing the field via an interface.
func (v *IntegrationWithStatus) GetIntegrationType() IntegrationType {
	return v.IntegrationFields.IntegrationType
}

// GetAllEnvsAllowed returns IntegrationWithStatus.AllEnvsAllowed, and is useful for accessing the field via an interface.
func (v *IntegrationWithStatus) GetAllEnvsAllowed() bool { return v.IntegrationFields.AllEnvsAllowed }

// GetIdentity returns IntegrationWithStatus.Identity, and is useful for accessing the field via an interface.
func (v *IntegrationWithStatus) GetIdentity() IntegrationFieldsIdentityIntegrationIdentity {
	return v.IntegrationFields.Identity
}

// GetEnvironments returns IntegrationWithStatus.Environments, and is useful for accessing the field via an interface.
func (v *IntegrationWithStatus) GetEnvironments() []IntegrationFieldsEnvironmentsEnvironment {
	return v.IntegrationFields.Environments
}

// GetCredentials returns IntegrationWithStatus.Credentials, and is useful for accessing the field via an interface.
func (v *IntegrationWithStatus) GetCredentials() IntegrationFieldsCredentialsIntegrationCredentials {
	return v.IntegrationFields.Credentials
}

func (v *IntegrationWithStatus) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IntegrationWithStatus
		graphql.NoUnmarshalJSON
	}
	firstPass.IntegrationWithStatus = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIntegrationWithStatus struct {
	Status IntegrationStatusFields `json:"status"`

	Id string `json:"id"`

	Organization IntegrationFieldsOrganization `json:"organization"`

	Name string `json:"name"`

	IntegrationType IntegrationType `json:"integrationType"`

	AllEnvsAllowed bool `json:"allEnvsAllowed"`

	Identity IntegrationFieldsIdentityIntegrationIdentity `json:"identity"`

	Environments []IntegrationFieldsEnvironmentsEnvironment `json:"environments"`

	Credentials IntegrationFieldsCredentialsIntegrationCredentials `json:"credentials"`
}

func (v *IntegrationWithStatus) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IntegrationWithStatus) __premarshalJSON() (*__premarshalIntegrationWithStatus, error) {
	var retval __premarshalIntegrationWithStatus

	retval.Status = v.Status
	retval.Id = v.IntegrationFields.Id
	retval.Organization = v.IntegrationFields.Organization
	retval.Name = v.IntegrationFields.Name
	retval.IntegrationType = v.IntegrationFields.IntegrationType
	retval.AllEnvsAllowed = v.IntegrationFields.AllEnvsAllowed
	retval.Identity = v.IntegrationFields.Identity
	retval.Environments = v.IntegrationFields.Environments
	retval.Credentials = v.IntegrationFields.Credentials
	return &retval, nil
}

// UpdateIntegrationResponse is returned by UpdateIntegration on success.
type UpdateIntegrationResponse struct {
	// Update integration
	UpdateIntegration *UpdateIntegrationUpdateIntegration `json:"updateIntegration"`
}

// GetUpdateIntegration returns UpdateIntegrationResponse.UpdateIntegration, and is useful for accessing the field via an interface.
func (v *UpdateIntegrationResponse) GetUpdateIntegration() *UpdateIntegrationUpdateIntegration {
	return v.UpdateIntegration
}

// UpdateIntegrationUpdateIntegration includes the requested fields of the GraphQL type Integration.
type UpdateIntegrationUpdateIntegration struct {
	IntegrationFields `json:"-"`
}

// GetId returns UpdateIntegrationUpdateIntegration.Id, and is useful for accessing the field via an interface.
func (v *UpdateIntegrationUpdateIntegration) GetId() string { return v.IntegrationFields.Id }

// GetOrganization returns UpdateIntegrationUpdateIntegration.Organization, and is useful for accessing the field via an interface.
func (v *UpdateIntegrationUpdateIntegration) GetOrganization() IntegrationFieldsOrganization {
	return v.IntegrationFields.Organization
}

// GetName returns UpdateIntegrationUpdateIntegration.Name, and is useful for accessing the field via an interface.
func (v *UpdateIntegrationUpdateIntegration) GetName() string { return v.IntegrationFields.Name }

// GetIntegrationType returns UpdateIntegrationUpdateIntegration.IntegrationType, and is useful for accessing the field via an interface.
func (v *UpdateIntegrationUpdateIntegration) GetIntegrationType() IntegrationType {
	return v.IntegrationFields.IntegrationType
}

// GetAllEnvsAllowed returns UpdateIntegrationUpdateIntegration.AllEnvsAllowed, and is useful for accessing the field via an interface.
func (v *UpdateIntegrationUpdateIntegration) GetAllEnvsAllowed() bool {
	return v.IntegrationFields.AllEnvsAllowed
}

// GetIdentity returns UpdateIntegrationUpdateIntegration.Identity, and is useful for accessing the field via an interface.
func (v *UpdateIntegrationUpdateIntegration) GetIdentity() IntegrationFieldsIdentityIntegrationIdentity {
	return v.IntegrationFields.Identity
}

// GetEnvironments returns UpdateIntegrationUpdateIntegration.Environments, and is useful for accessing the field via an interface.
func (v *UpdateIntegrationUpdateIntegration) GetEnvironments() []IntegrationFieldsEnvironmentsEnvironment {
	return v.IntegrationFields.Environments
}

// GetCredentials returns UpdateIntegrationUpdateIntegration.Credentials, and is useful for accessing the field via an interface.
func (v *UpdateIntegrationUpdateIntegration) GetCredentials() IntegrationFieldsCredentialsIntegrationCredentials {
	return v.IntegrationFields.Credentials
}

func (v *UpdateIntegrationUpdateIntegration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateIntegrationUpdateIntegration
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateIntegrationUpdateIntegration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.IntegrationFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateIntegrationUpdateIntegration struct {
	Id string `json:"id"`

	Organization IntegrationFieldsOrganization `json:"organization"`

	Name string `json:"name"`

	IntegrationType IntegrationType `json:"integrationType"`

	AllEnvsAllowed bool `json:"allEnvsAllowed"`

	Identity IntegrationFieldsIdentityIntegrationIdentity `json:"identity"`

	Environments []IntegrationFieldsEnvironmentsEnvironment `json:"environments"`

	Credentials IntegrationFieldsCredentialsIntegrationCredentials `json:"credentials"`
}

func (v *UpdateIntegrationUpdateIntegration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateIntegrationUpdateIntegration) __premarshalJSON() (*__premarshalUpdateIntegrationUpdateIntegration, error) {
	var retval __premarshalUpdateIntegrationUpdateIntegration

	retval.Id = v.IntegrationFields.Id
	retval.Organization = v.IntegrationFields.Organization
	retval.Name = v.IntegrationFields.Name
	retval.IntegrationType = v.IntegrationFields.IntegrationType
	retval.AllEnvsAllowed = v.IntegrationFields.AllEnvsAllowed
	retval.Identity = v.IntegrationFields.Identity
	retval.Environments = v.IntegrationFields.Environments
	retval.Credentials = v.IntegrationFields.Credentials
	return &retval, nil
}

// __CreateDevIntegrationInput is used internally by genqlient
type __CreateDevIntegrationInput struct {
	Name            string                  `json:"name"`
	IntegrationType IntegrationType         `json:"integrationType"`
	Environments    IntegrationEnvironments `json:"environments"`
}

// GetName returns __CreateDevIntegrationInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateDevIntegrationInput) GetName() string { return v.Name }

// GetIntegrationType returns __CreateDevIntegrationInput.IntegrationType, and is useful for accessing the field via an interface.
func (v *__CreateDevIntegrationInput) GetIntegrationType() IntegrationType { return v.IntegrationType }

// GetEnvironments returns __CreateDevIntegrationInput.Environments, and is useful for accessing the field via an interface.
func (v *__CreateDevIntegrationInput) GetEnvironments() IntegrationEnvironments {
	return v.Environments
}

// __CreateIntegrationInput is used internally by genqlient
type __CreateIntegrationInput struct {
	Name            string                  `json:"name"`
	IntegrationType IntegrationType         `json:"integrationType"`
	Environments    IntegrationEnvironments `json:"environments"`
}

// GetName returns __CreateIntegrationInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateIntegrationInput) GetName() string { return v.Name }

// GetIntegrationType returns __CreateIntegrationInput.IntegrationType, and is useful for accessing the field via an interface.
func (v *__CreateIntegrationInput) GetIntegrationType() IntegrationType { return v.IntegrationType }

// GetEnvironments returns __CreateIntegrationInput.Environments, and is useful for accessing the field via an interface.
func (v *__CreateIntegrationInput) GetEnvironments() IntegrationEnvironments { return v.Environments }

// __DeleteIntegrationInput is used internally by genqlient
type __DeleteIntegrationInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteIntegrationInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteIntegrationInput) GetId() string { return v.Id }

// __GetIntegrationByNameInput is used internally by genqlient
type __GetIntegrationByNameInput struct {
	Name string `json:"name"`
}

// GetName returns __GetIntegrationByNameInput.Name, and is useful for accessing the field via an interface.
func (v *__GetIntegrationByNameInput) GetName() string { return v.Name }

// __GetIntegrationCredentialsInput is used internally by genqlient
type __GetIntegrationCredentialsInput struct {
	Id *string `json:"id"`
}

// GetId returns __GetIntegrationCredentialsInput.Id, and is useful for accessing the field via an interface.
func (v *__GetIntegrationCredentialsInput) GetId() *string { return v.Id }

// __GetIntegrationsInput is used internally by genqlient
type __GetIntegrationsInput struct {
	Name            *string          `json:"name"`
	IntegrationType *IntegrationType `json:"integrationType"`
	EnvironmentId   *string          `json:"environmentId"`
}

// GetName returns __GetIntegrationsInput.Name, and is useful for accessing the field via an interface.
func (v *__GetIntegrationsInput) GetName() *string { return v.Name }

// GetIntegrationType returns __GetIntegrationsInput.IntegrationType, and is useful for accessing the field via an interface.
func (v *__GetIntegrationsInput) GetIntegrationType() *IntegrationType { return v.IntegrationType }

// GetEnvironmentId returns __GetIntegrationsInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *__GetIntegrationsInput) GetEnvironmentId() *string { return v.EnvironmentId }

// __GetIntegrationsWithCredentialsInput is used internally by genqlient
type __GetIntegrationsWithCredentialsInput struct {
	Name            *string          `json:"name"`
	IntegrationType *IntegrationType `json:"integrationType"`
	EnvironmentId   *string          `json:"environmentId"`
}

// GetName returns __GetIntegrationsWithCredentialsInput.Name, and is useful for accessing the field via an interface.
func (v *__GetIntegrationsWithCredentialsInput) GetName() *string { return v.Name }

// GetIntegrationType returns __GetIntegrationsWithCredentialsInput.IntegrationType, and is useful for accessing the field via an interface.
func (v *__GetIntegrationsWithCredentialsInput) GetIntegrationType() *IntegrationType {
	return v.IntegrationType
}

// GetEnvironmentId returns __GetIntegrationsWithCredentialsInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *__GetIntegrationsWithCredentialsInput) GetEnvironmentId() *string { return v.EnvironmentId }

// __IntegrationInput is used internally by genqlient
type __IntegrationInput struct {
	Id *string `json:"id"`
}

// GetId returns __IntegrationInput.Id, and is useful for accessing the field via an interface.
func (v *__IntegrationInput) GetId() *string { return v.Id }

// __UpdateIntegrationInput is used internally by genqlient
type __UpdateIntegrationInput struct {
	Id   *string `json:"id"`
	Name *string `json:"name"`
}

// GetId returns __UpdateIntegrationInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateIntegrationInput) GetId() *string { return v.Id }

// GetName returns __UpdateIntegrationInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateIntegrationInput) GetName() *string { return v.Name }

func CreateDevIntegration(
	ctx context.Context,
	client graphql.Client,
	name string,
	integrationType IntegrationType,
	environments IntegrationEnvironments,
) (*CreateDevIntegrationResponse, error) {
	req := &graphql.Request{
		OpName: "CreateDevIntegration",
		Query: `
mutation CreateDevIntegration ($name: String!, $integrationType: IntegrationType!, $environments: IntegrationEnvironments!) {
	createDevIntegration(name: $name, integrationType: $integrationType, environments: $environments) {
		... IntegrationWithCredentials
	}
}
fragment IntegrationWithCredentials on Integration {
	... IntegrationFields
	credentials {
		... IntegrationCredentialsFields
	}
}
fragment IntegrationFields on Integration {
	id
	organization {
		id
	}
	name
	integrationType
	allEnvsAllowed
	identity {
		other {
			key
			value
		}
	}
	environments {
		id
		name
	}
	credentials {
		clientId
	}
}
fragment IntegrationCredentialsFields on IntegrationCredentials {
	clientId
	secret
}
`,
		Variables: &__CreateDevIntegrationInput{
			Name:            name,
			IntegrationType: integrationType,
			Environments:    environments,
		},
	}
	var err error

	var data CreateDevIntegrationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateIntegration(
	ctx context.Context,
	client graphql.Client,
	name string,
	integrationType IntegrationType,
	environments IntegrationEnvironments,
) (*CreateIntegrationResponse, error) {
	req := &graphql.Request{
		OpName: "CreateIntegration",
		Query: `
mutation CreateIntegration ($name: String!, $integrationType: IntegrationType!, $environments: IntegrationEnvironments!) {
	createIntegration(name: $name, integrationType: $integrationType, environments: $environments) {
		... IntegrationWithCredentials
	}
}
fragment IntegrationWithCredentials on Integration {
	... IntegrationFields
	credentials {
		... IntegrationCredentialsFields
	}
}
fragment IntegrationFields on Integration {
	id
	organization {
		id
	}
	name
	integrationType
	allEnvsAllowed
	identity {
		other {
			key
			value
		}
	}
	environments {
		id
		name
	}
	credentials {
		clientId
	}
}
fragment IntegrationCredentialsFields on IntegrationCredentials {
	clientId
	secret
}
`,
		Variables: &__CreateIntegrationInput{
			Name:            name,
			IntegrationType: integrationType,
			Environments:    environments,
		},
	}
	var err error

	var data CreateIntegrationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteIntegration(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteIntegrationResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteIntegration",
		Query: `
mutation DeleteIntegration ($id: ID!) {
	deleteIntegration(id: $id)
}
`,
		Variables: &__DeleteIntegrationInput{
			Id: id,
		},
	}
	var err error

	var data DeleteIntegrationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetIntegrationByName(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*GetIntegrationByNameResponse, error) {
	req := &graphql.Request{
		OpName: "GetIntegrationByName",
		Query: `
query GetIntegrationByName ($name: String!) {
	oneIntegration(name: $name) {
		... IntegrationWithStatus
	}
}
fragment IntegrationWithStatus on Integration {
	... IntegrationFields
	status {
		... IntegrationStatusFields
	}
}
fragment IntegrationFields on Integration {
	id
	organization {
		id
	}
	name
	integrationType
	allEnvsAllowed
	identity {
		other {
			key
			value
		}
	}
	environments {
		id
		name
	}
	credentials {
		clientId
	}
}
fragment IntegrationStatusFields on IntegrationStatus {
	id
	lastSeen
	intentsStatus {
		appliedAt
		applyError
		revisionNumber
	}
}
`,
		Variables: &__GetIntegrationByNameInput{
			Name: name,
		},
	}
	var err error

	var data GetIntegrationByNameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetIntegrationCredentials(
	ctx context.Context,
	client graphql.Client,
	id *string,
) (*GetIntegrationCredentialsResponse, error) {
	req := &graphql.Request{
		OpName: "GetIntegrationCredentials",
		Query: `
query GetIntegrationCredentials ($id: ID!) {
	integration(id: $id) {
		credentials {
			... IntegrationCredentialsFields
		}
	}
}
fragment IntegrationCredentialsFields on IntegrationCredentials {
	clientId
	secret
}
`,
		Variables: &__GetIntegrationCredentialsInput{
			Id: id,
		},
	}
	var err error

	var data GetIntegrationCredentialsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetIntegrations(
	ctx context.Context,
	client graphql.Client,
	name *string,
	integrationType *IntegrationType,
	environmentId *string,
) (*GetIntegrationsResponse, error) {
	req := &graphql.Request{
		OpName: "GetIntegrations",
		Query: `
query GetIntegrations ($name: String, $integrationType: IntegrationType, $environmentId: ID) {
	integrations(name: $name, integrationType: $integrationType, environmentId: $environmentId) {
		... IntegrationWithStatus
	}
}
fragment IntegrationWithStatus on Integration {
	... IntegrationFields
	status {
		... IntegrationStatusFields
	}
}
fragment IntegrationFields on Integration {
	id
	organization {
		id
	}
	name
	integrationType
	allEnvsAllowed
	identity {
		other {
			key
			value
		}
	}
	environments {
		id
		name
	}
	credentials {
		clientId
	}
}
fragment IntegrationStatusFields on IntegrationStatus {
	id
	lastSeen
	intentsStatus {
		appliedAt
		applyError
		revisionNumber
	}
}
`,
		Variables: &__GetIntegrationsInput{
			Name:            name,
			IntegrationType: integrationType,
			EnvironmentId:   environmentId,
		},
	}
	var err error

	var data GetIntegrationsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetIntegrationsWithCredentials(
	ctx context.Context,
	client graphql.Client,
	name *string,
	integrationType *IntegrationType,
	environmentId *string,
) (*GetIntegrationsWithCredentialsResponse, error) {
	req := &graphql.Request{
		OpName: "GetIntegrationsWithCredentials",
		Query: `
query GetIntegrationsWithCredentials ($name: String, $integrationType: IntegrationType, $environmentId: ID) {
	integrations(name: $name, integrationType: $integrationType, environmentId: $environmentId) {
		... IntegrationWithCredentials
	}
}
fragment IntegrationWithCredentials on Integration {
	... IntegrationFields
	credentials {
		... IntegrationCredentialsFields
	}
}
fragment IntegrationFields on Integration {
	id
	organization {
		id
	}
	name
	integrationType
	allEnvsAllowed
	identity {
		other {
			key
			value
		}
	}
	environments {
		id
		name
	}
	credentials {
		clientId
	}
}
fragment IntegrationCredentialsFields on IntegrationCredentials {
	clientId
	secret
}
`,
		Variables: &__GetIntegrationsWithCredentialsInput{
			Name:            name,
			IntegrationType: integrationType,
			EnvironmentId:   environmentId,
		},
	}
	var err error

	var data GetIntegrationsWithCredentialsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Integration(
	ctx context.Context,
	client graphql.Client,
	id *string,
) (*IntegrationResponse, error) {
	req := &graphql.Request{
		OpName: "Integration",
		Query: `
query Integration ($id: ID!) {
	integration(id: $id) {
		... IntegrationWithStatus
	}
}
fragment IntegrationWithStatus on Integration {
	... IntegrationFields
	status {
		... IntegrationStatusFields
	}
}
fragment IntegrationFields on Integration {
	id
	organization {
		id
	}
	name
	integrationType
	allEnvsAllowed
	identity {
		other {
			key
			value
		}
	}
	environments {
		id
		name
	}
	credentials {
		clientId
	}
}
fragment IntegrationStatusFields on IntegrationStatus {
	id
	lastSeen
	intentsStatus {
		appliedAt
		applyError
		revisionNumber
	}
}
`,
		Variables: &__IntegrationInput{
			Id: id,
		},
	}
	var err error

	var data IntegrationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateIntegration(
	ctx context.Context,
	client graphql.Client,
	id *string,
	name *string,
) (*UpdateIntegrationResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateIntegration",
		Query: `
mutation UpdateIntegration ($id: ID!, $name: String) {
	updateIntegration(id: $id, name: $name) {
		... IntegrationFields
	}
}
fragment IntegrationFields on Integration {
	id
	organization {
		id
	}
	name
	integrationType
	allEnvsAllowed
	identity {
		other {
			key
			value
		}
	}
	environments {
		id
		name
	}
	credentials {
		clientId
	}
}
`,
		Variables: &__UpdateIntegrationInput{
			Id:   id,
			Name: name,
		},
	}
	var err error

	var data UpdateIntegrationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
