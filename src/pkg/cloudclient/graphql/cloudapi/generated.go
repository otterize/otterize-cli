// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package cloudapi

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

type CLICommand struct {
	Noun      string   `json:"noun"`
	Verb      string   `json:"verb"`
	Modifiers []string `json:"modifiers"`
}

// GetNoun returns CLICommand.Noun, and is useful for accessing the field via an interface.
func (v *CLICommand) GetNoun() string { return v.Noun }

// GetVerb returns CLICommand.Verb, and is useful for accessing the field via an interface.
func (v *CLICommand) GetVerb() string { return v.Verb }

// GetModifiers returns CLICommand.Modifiers, and is useful for accessing the field via an interface.
func (v *CLICommand) GetModifiers() []string { return v.Modifiers }

type CLIIdentifier struct {
	Version       string `json:"version"`
	ContextId     string `json:"contextId"`
	CloudClientId string `json:"cloudClientId"`
}

// GetVersion returns CLIIdentifier.Version, and is useful for accessing the field via an interface.
func (v *CLIIdentifier) GetVersion() string { return v.Version }

// GetContextId returns CLIIdentifier.ContextId, and is useful for accessing the field via an interface.
func (v *CLIIdentifier) GetContextId() string { return v.ContextId }

// GetCloudClientId returns CLIIdentifier.CloudClientId, and is useful for accessing the field via an interface.
func (v *CLIIdentifier) GetCloudClientId() string { return v.CloudClientId }

type CLITelemetry struct {
	Identifier CLIIdentifier `json:"identifier"`
	Command    CLICommand    `json:"command"`
}

// GetIdentifier returns CLITelemetry.Identifier, and is useful for accessing the field via an interface.
func (v *CLITelemetry) GetIdentifier() CLIIdentifier { return v.Identifier }

// GetCommand returns CLITelemetry.Command, and is useful for accessing the field via an interface.
func (v *CLITelemetry) GetCommand() CLICommand { return v.Command }

// CreateUserFromAuth0UserMeMeMutation includes the requested fields of the GraphQL type MeMutation.
type CreateUserFromAuth0UserMeMeMutation struct {
	// Register the user defined by the active session token into the otterize users store.
	RegisterUser CreateUserFromAuth0UserMeMeMutationRegisterUserMe `json:"registerUser"`
}

// GetRegisterUser returns CreateUserFromAuth0UserMeMeMutation.RegisterUser, and is useful for accessing the field via an interface.
func (v *CreateUserFromAuth0UserMeMeMutation) GetRegisterUser() CreateUserFromAuth0UserMeMeMutationRegisterUserMe {
	return v.RegisterUser
}

// CreateUserFromAuth0UserMeMeMutationRegisterUserMe includes the requested fields of the GraphQL type Me.
type CreateUserFromAuth0UserMeMeMutationRegisterUserMe struct {
	MeFields `json:"-"`
}

// GetUser returns CreateUserFromAuth0UserMeMeMutationRegisterUserMe.User, and is useful for accessing the field via an interface.
func (v *CreateUserFromAuth0UserMeMeMutationRegisterUserMe) GetUser() MeFieldsUser {
	return v.MeFields.User
}

// GetOrganizations returns CreateUserFromAuth0UserMeMeMutationRegisterUserMe.Organizations, and is useful for accessing the field via an interface.
func (v *CreateUserFromAuth0UserMeMeMutationRegisterUserMe) GetOrganizations() []MeFieldsOrganizationsOrganization {
	return v.MeFields.Organizations
}

func (v *CreateUserFromAuth0UserMeMeMutationRegisterUserMe) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateUserFromAuth0UserMeMeMutationRegisterUserMe
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateUserFromAuth0UserMeMeMutationRegisterUserMe = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateUserFromAuth0UserMeMeMutationRegisterUserMe struct {
	User MeFieldsUser `json:"user"`

	Organizations []MeFieldsOrganizationsOrganization `json:"organizations"`
}

func (v *CreateUserFromAuth0UserMeMeMutationRegisterUserMe) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateUserFromAuth0UserMeMeMutationRegisterUserMe) __premarshalJSON() (*__premarshalCreateUserFromAuth0UserMeMeMutationRegisterUserMe, error) {
	var retval __premarshalCreateUserFromAuth0UserMeMeMutationRegisterUserMe

	retval.User = v.MeFields.User
	retval.Organizations = v.MeFields.Organizations
	return &retval, nil
}

// CreateUserFromAuth0UserResponse is returned by CreateUserFromAuth0User on success.
type CreateUserFromAuth0UserResponse struct {
	// Operate on the current logged-in user
	Me CreateUserFromAuth0UserMeMeMutation `json:"me"`
}

// GetMe returns CreateUserFromAuth0UserResponse.Me, and is useful for accessing the field via an interface.
func (v *CreateUserFromAuth0UserResponse) GetMe() CreateUserFromAuth0UserMeMeMutation { return v.Me }

// ListClusterClustersCluster includes the requested fields of the GraphQL type Cluster.
type ListClusterClustersCluster struct {
	MinimalClusterFields `json:"-"`
}

// GetId returns ListClusterClustersCluster.Id, and is useful for accessing the field via an interface.
func (v *ListClusterClustersCluster) GetId() string { return v.MinimalClusterFields.Id }

// GetName returns ListClusterClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *ListClusterClustersCluster) GetName() string { return v.MinimalClusterFields.Name }

func (v *ListClusterClustersCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListClusterClustersCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.ListClusterClustersCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MinimalClusterFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListClusterClustersCluster struct {
	Id string `json:"id"`

	Name string `json:"name"`
}

func (v *ListClusterClustersCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListClusterClustersCluster) __premarshalJSON() (*__premarshalListClusterClustersCluster, error) {
	var retval __premarshalListClusterClustersCluster

	retval.Id = v.MinimalClusterFields.Id
	retval.Name = v.MinimalClusterFields.Name
	return &retval, nil
}

// ListClusterResponse is returned by ListCluster on success.
type ListClusterResponse struct {
	// List clusters
	Clusters []ListClusterClustersCluster `json:"clusters"`
}

// GetClusters returns ListClusterResponse.Clusters, and is useful for accessing the field via an interface.
func (v *ListClusterResponse) GetClusters() []ListClusterClustersCluster { return v.Clusters }

// ListEnvironmentsEnvironmentsEnvironment includes the requested fields of the GraphQL type Environment.
type ListEnvironmentsEnvironmentsEnvironment struct {
	MinimalEnvironmentFields `json:"-"`
}

// GetId returns ListEnvironmentsEnvironmentsEnvironment.Id, and is useful for accessing the field via an interface.
func (v *ListEnvironmentsEnvironmentsEnvironment) GetId() string {
	return v.MinimalEnvironmentFields.Id
}

// GetName returns ListEnvironmentsEnvironmentsEnvironment.Name, and is useful for accessing the field via an interface.
func (v *ListEnvironmentsEnvironmentsEnvironment) GetName() string {
	return v.MinimalEnvironmentFields.Name
}

func (v *ListEnvironmentsEnvironmentsEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListEnvironmentsEnvironmentsEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.ListEnvironmentsEnvironmentsEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MinimalEnvironmentFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListEnvironmentsEnvironmentsEnvironment struct {
	Id string `json:"id"`

	Name string `json:"name"`
}

func (v *ListEnvironmentsEnvironmentsEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListEnvironmentsEnvironmentsEnvironment) __premarshalJSON() (*__premarshalListEnvironmentsEnvironmentsEnvironment, error) {
	var retval __premarshalListEnvironmentsEnvironmentsEnvironment

	retval.Id = v.MinimalEnvironmentFields.Id
	retval.Name = v.MinimalEnvironmentFields.Name
	return &retval, nil
}

// ListEnvironmentsResponse is returned by ListEnvironments on success.
type ListEnvironmentsResponse struct {
	// List environments
	Environments []ListEnvironmentsEnvironmentsEnvironment `json:"environments"`
}

// GetEnvironments returns ListEnvironmentsResponse.Environments, and is useful for accessing the field via an interface.
func (v *ListEnvironmentsResponse) GetEnvironments() []ListEnvironmentsEnvironmentsEnvironment {
	return v.Environments
}

// ListNamespacesNamespacesNamespace includes the requested fields of the GraphQL type Namespace.
type ListNamespacesNamespacesNamespace struct {
	MinimalNamespaceFields `json:"-"`
}

// GetId returns ListNamespacesNamespacesNamespace.Id, and is useful for accessing the field via an interface.
func (v *ListNamespacesNamespacesNamespace) GetId() string { return v.MinimalNamespaceFields.Id }

// GetName returns ListNamespacesNamespacesNamespace.Name, and is useful for accessing the field via an interface.
func (v *ListNamespacesNamespacesNamespace) GetName() string { return v.MinimalNamespaceFields.Name }

// GetCluster returns ListNamespacesNamespacesNamespace.Cluster, and is useful for accessing the field via an interface.
func (v *ListNamespacesNamespacesNamespace) GetCluster() MinimalNamespaceFieldsCluster {
	return v.MinimalNamespaceFields.Cluster
}

func (v *ListNamespacesNamespacesNamespace) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListNamespacesNamespacesNamespace
		graphql.NoUnmarshalJSON
	}
	firstPass.ListNamespacesNamespacesNamespace = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MinimalNamespaceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListNamespacesNamespacesNamespace struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Cluster MinimalNamespaceFieldsCluster `json:"cluster"`
}

func (v *ListNamespacesNamespacesNamespace) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListNamespacesNamespacesNamespace) __premarshalJSON() (*__premarshalListNamespacesNamespacesNamespace, error) {
	var retval __premarshalListNamespacesNamespacesNamespace

	retval.Id = v.MinimalNamespaceFields.Id
	retval.Name = v.MinimalNamespaceFields.Name
	retval.Cluster = v.MinimalNamespaceFields.Cluster
	return &retval, nil
}

// ListNamespacesResponse is returned by ListNamespaces on success.
type ListNamespacesResponse struct {
	// List namespaces
	Namespaces []ListNamespacesNamespacesNamespace `json:"namespaces"`
}

// GetNamespaces returns ListNamespacesResponse.Namespaces, and is useful for accessing the field via an interface.
func (v *ListNamespacesResponse) GetNamespaces() []ListNamespacesNamespacesNamespace {
	return v.Namespaces
}

// ListServicesResponse is returned by ListServices on success.
type ListServicesResponse struct {
	// List services
	Services []ListServicesServicesService `json:"services"`
}

// GetServices returns ListServicesResponse.Services, and is useful for accessing the field via an interface.
func (v *ListServicesResponse) GetServices() []ListServicesServicesService { return v.Services }

// ListServicesServicesService includes the requested fields of the GraphQL type Service.
type ListServicesServicesService struct {
	MinimalServiceFields `json:"-"`
}

// GetId returns ListServicesServicesService.Id, and is useful for accessing the field via an interface.
func (v *ListServicesServicesService) GetId() string { return v.MinimalServiceFields.Id }

// GetName returns ListServicesServicesService.Name, and is useful for accessing the field via an interface.
func (v *ListServicesServicesService) GetName() string { return v.MinimalServiceFields.Name }

// GetNamespace returns ListServicesServicesService.Namespace, and is useful for accessing the field via an interface.
func (v *ListServicesServicesService) GetNamespace() *MinimalServiceFieldsNamespace {
	return v.MinimalServiceFields.Namespace
}

func (v *ListServicesServicesService) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListServicesServicesService
		graphql.NoUnmarshalJSON
	}
	firstPass.ListServicesServicesService = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MinimalServiceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListServicesServicesService struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Namespace *MinimalServiceFieldsNamespace `json:"namespace"`
}

func (v *ListServicesServicesService) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListServicesServicesService) __premarshalJSON() (*__premarshalListServicesServicesService, error) {
	var retval __premarshalListServicesServicesService

	retval.Id = v.MinimalServiceFields.Id
	retval.Name = v.MinimalServiceFields.Name
	retval.Namespace = v.MinimalServiceFields.Namespace
	return &retval, nil
}

// LoadOrgResourcesClustersCluster includes the requested fields of the GraphQL type Cluster.
type LoadOrgResourcesClustersCluster struct {
	MinimalClusterFields `json:"-"`
}

// GetId returns LoadOrgResourcesClustersCluster.Id, and is useful for accessing the field via an interface.
func (v *LoadOrgResourcesClustersCluster) GetId() string { return v.MinimalClusterFields.Id }

// GetName returns LoadOrgResourcesClustersCluster.Name, and is useful for accessing the field via an interface.
func (v *LoadOrgResourcesClustersCluster) GetName() string { return v.MinimalClusterFields.Name }

func (v *LoadOrgResourcesClustersCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LoadOrgResourcesClustersCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.LoadOrgResourcesClustersCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MinimalClusterFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalLoadOrgResourcesClustersCluster struct {
	Id string `json:"id"`

	Name string `json:"name"`
}

func (v *LoadOrgResourcesClustersCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LoadOrgResourcesClustersCluster) __premarshalJSON() (*__premarshalLoadOrgResourcesClustersCluster, error) {
	var retval __premarshalLoadOrgResourcesClustersCluster

	retval.Id = v.MinimalClusterFields.Id
	retval.Name = v.MinimalClusterFields.Name
	return &retval, nil
}

// LoadOrgResourcesEnvironmentsEnvironment includes the requested fields of the GraphQL type Environment.
type LoadOrgResourcesEnvironmentsEnvironment struct {
	MinimalEnvironmentFields `json:"-"`
}

// GetId returns LoadOrgResourcesEnvironmentsEnvironment.Id, and is useful for accessing the field via an interface.
func (v *LoadOrgResourcesEnvironmentsEnvironment) GetId() string {
	return v.MinimalEnvironmentFields.Id
}

// GetName returns LoadOrgResourcesEnvironmentsEnvironment.Name, and is useful for accessing the field via an interface.
func (v *LoadOrgResourcesEnvironmentsEnvironment) GetName() string {
	return v.MinimalEnvironmentFields.Name
}

func (v *LoadOrgResourcesEnvironmentsEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LoadOrgResourcesEnvironmentsEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.LoadOrgResourcesEnvironmentsEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MinimalEnvironmentFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalLoadOrgResourcesEnvironmentsEnvironment struct {
	Id string `json:"id"`

	Name string `json:"name"`
}

func (v *LoadOrgResourcesEnvironmentsEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LoadOrgResourcesEnvironmentsEnvironment) __premarshalJSON() (*__premarshalLoadOrgResourcesEnvironmentsEnvironment, error) {
	var retval __premarshalLoadOrgResourcesEnvironmentsEnvironment

	retval.Id = v.MinimalEnvironmentFields.Id
	retval.Name = v.MinimalEnvironmentFields.Name
	return &retval, nil
}

// LoadOrgResourcesNamespacesNamespace includes the requested fields of the GraphQL type Namespace.
type LoadOrgResourcesNamespacesNamespace struct {
	MinimalNamespaceFields `json:"-"`
}

// GetId returns LoadOrgResourcesNamespacesNamespace.Id, and is useful for accessing the field via an interface.
func (v *LoadOrgResourcesNamespacesNamespace) GetId() string { return v.MinimalNamespaceFields.Id }

// GetName returns LoadOrgResourcesNamespacesNamespace.Name, and is useful for accessing the field via an interface.
func (v *LoadOrgResourcesNamespacesNamespace) GetName() string { return v.MinimalNamespaceFields.Name }

// GetCluster returns LoadOrgResourcesNamespacesNamespace.Cluster, and is useful for accessing the field via an interface.
func (v *LoadOrgResourcesNamespacesNamespace) GetCluster() MinimalNamespaceFieldsCluster {
	return v.MinimalNamespaceFields.Cluster
}

func (v *LoadOrgResourcesNamespacesNamespace) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*LoadOrgResourcesNamespacesNamespace
		graphql.NoUnmarshalJSON
	}
	firstPass.LoadOrgResourcesNamespacesNamespace = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MinimalNamespaceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalLoadOrgResourcesNamespacesNamespace struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Cluster MinimalNamespaceFieldsCluster `json:"cluster"`
}

func (v *LoadOrgResourcesNamespacesNamespace) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *LoadOrgResourcesNamespacesNamespace) __premarshalJSON() (*__premarshalLoadOrgResourcesNamespacesNamespace, error) {
	var retval __premarshalLoadOrgResourcesNamespacesNamespace

	retval.Id = v.MinimalNamespaceFields.Id
	retval.Name = v.MinimalNamespaceFields.Name
	retval.Cluster = v.MinimalNamespaceFields.Cluster
	return &retval, nil
}

// LoadOrgResourcesResponse is returned by LoadOrgResources on success.
type LoadOrgResourcesResponse struct {
	// List clusters
	Clusters []LoadOrgResourcesClustersCluster `json:"clusters"`
	// List namespaces
	Namespaces []LoadOrgResourcesNamespacesNamespace `json:"namespaces"`
	// List environments
	Environments []LoadOrgResourcesEnvironmentsEnvironment `json:"environments"`
}

// GetClusters returns LoadOrgResourcesResponse.Clusters, and is useful for accessing the field via an interface.
func (v *LoadOrgResourcesResponse) GetClusters() []LoadOrgResourcesClustersCluster { return v.Clusters }

// GetNamespaces returns LoadOrgResourcesResponse.Namespaces, and is useful for accessing the field via an interface.
func (v *LoadOrgResourcesResponse) GetNamespaces() []LoadOrgResourcesNamespacesNamespace {
	return v.Namespaces
}

// GetEnvironments returns LoadOrgResourcesResponse.Environments, and is useful for accessing the field via an interface.
func (v *LoadOrgResourcesResponse) GetEnvironments() []LoadOrgResourcesEnvironmentsEnvironment {
	return v.Environments
}

// MeFields includes the GraphQL fields of Me requested by the fragment MeFields.
type MeFields struct {
	// The logged-in user details.
	User MeFieldsUser `json:"user"`
	// The organizations to which the current logged-in user belongs.
	Organizations []MeFieldsOrganizationsOrganization `json:"organizations"`
}

// GetUser returns MeFields.User, and is useful for accessing the field via an interface.
func (v *MeFields) GetUser() MeFieldsUser { return v.User }

// GetOrganizations returns MeFields.Organizations, and is useful for accessing the field via an interface.
func (v *MeFields) GetOrganizations() []MeFieldsOrganizationsOrganization { return v.Organizations }

// MeFieldsOrganizationsOrganization includes the requested fields of the GraphQL type Organization.
type MeFieldsOrganizationsOrganization struct {
	Id string `json:"id"`
}

// GetId returns MeFieldsOrganizationsOrganization.Id, and is useful for accessing the field via an interface.
func (v *MeFieldsOrganizationsOrganization) GetId() string { return v.Id }

// MeFieldsUser includes the requested fields of the GraphQL type User.
type MeFieldsUser struct {
	Id    string `json:"id"`
	Email string `json:"email"`
	Name  string `json:"name"`
}

// GetId returns MeFieldsUser.Id, and is useful for accessing the field via an interface.
func (v *MeFieldsUser) GetId() string { return v.Id }

// GetEmail returns MeFieldsUser.Email, and is useful for accessing the field via an interface.
func (v *MeFieldsUser) GetEmail() string { return v.Email }

// GetName returns MeFieldsUser.Name, and is useful for accessing the field via an interface.
func (v *MeFieldsUser) GetName() string { return v.Name }

// MinimalClusterFields includes the GraphQL fields of Cluster requested by the fragment MinimalClusterFields.
type MinimalClusterFields struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns MinimalClusterFields.Id, and is useful for accessing the field via an interface.
func (v *MinimalClusterFields) GetId() string { return v.Id }

// GetName returns MinimalClusterFields.Name, and is useful for accessing the field via an interface.
func (v *MinimalClusterFields) GetName() string { return v.Name }

// MinimalEnvironmentFields includes the GraphQL fields of Environment requested by the fragment MinimalEnvironmentFields.
type MinimalEnvironmentFields struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns MinimalEnvironmentFields.Id, and is useful for accessing the field via an interface.
func (v *MinimalEnvironmentFields) GetId() string { return v.Id }

// GetName returns MinimalEnvironmentFields.Name, and is useful for accessing the field via an interface.
func (v *MinimalEnvironmentFields) GetName() string { return v.Name }

// MinimalNamespaceFields includes the GraphQL fields of Namespace requested by the fragment MinimalNamespaceFields.
type MinimalNamespaceFields struct {
	Id      string                        `json:"id"`
	Name    string                        `json:"name"`
	Cluster MinimalNamespaceFieldsCluster `json:"cluster"`
}

// GetId returns MinimalNamespaceFields.Id, and is useful for accessing the field via an interface.
func (v *MinimalNamespaceFields) GetId() string { return v.Id }

// GetName returns MinimalNamespaceFields.Name, and is useful for accessing the field via an interface.
func (v *MinimalNamespaceFields) GetName() string { return v.Name }

// GetCluster returns MinimalNamespaceFields.Cluster, and is useful for accessing the field via an interface.
func (v *MinimalNamespaceFields) GetCluster() MinimalNamespaceFieldsCluster { return v.Cluster }

// MinimalNamespaceFieldsCluster includes the requested fields of the GraphQL type Cluster.
type MinimalNamespaceFieldsCluster struct {
	MinimalClusterFields `json:"-"`
}

// GetId returns MinimalNamespaceFieldsCluster.Id, and is useful for accessing the field via an interface.
func (v *MinimalNamespaceFieldsCluster) GetId() string { return v.MinimalClusterFields.Id }

// GetName returns MinimalNamespaceFieldsCluster.Name, and is useful for accessing the field via an interface.
func (v *MinimalNamespaceFieldsCluster) GetName() string { return v.MinimalClusterFields.Name }

func (v *MinimalNamespaceFieldsCluster) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MinimalNamespaceFieldsCluster
		graphql.NoUnmarshalJSON
	}
	firstPass.MinimalNamespaceFieldsCluster = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MinimalClusterFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMinimalNamespaceFieldsCluster struct {
	Id string `json:"id"`

	Name string `json:"name"`
}

func (v *MinimalNamespaceFieldsCluster) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MinimalNamespaceFieldsCluster) __premarshalJSON() (*__premarshalMinimalNamespaceFieldsCluster, error) {
	var retval __premarshalMinimalNamespaceFieldsCluster

	retval.Id = v.MinimalClusterFields.Id
	retval.Name = v.MinimalClusterFields.Name
	return &retval, nil
}

// MinimalServiceFields includes the GraphQL fields of Service requested by the fragment MinimalServiceFields.
type MinimalServiceFields struct {
	Id        string                         `json:"id"`
	Name      string                         `json:"name"`
	Namespace *MinimalServiceFieldsNamespace `json:"namespace"`
}

// GetId returns MinimalServiceFields.Id, and is useful for accessing the field via an interface.
func (v *MinimalServiceFields) GetId() string { return v.Id }

// GetName returns MinimalServiceFields.Name, and is useful for accessing the field via an interface.
func (v *MinimalServiceFields) GetName() string { return v.Name }

// GetNamespace returns MinimalServiceFields.Namespace, and is useful for accessing the field via an interface.
func (v *MinimalServiceFields) GetNamespace() *MinimalServiceFieldsNamespace { return v.Namespace }

// MinimalServiceFieldsNamespace includes the requested fields of the GraphQL type Namespace.
type MinimalServiceFieldsNamespace struct {
	MinimalNamespaceFields `json:"-"`
}

// GetId returns MinimalServiceFieldsNamespace.Id, and is useful for accessing the field via an interface.
func (v *MinimalServiceFieldsNamespace) GetId() string { return v.MinimalNamespaceFields.Id }

// GetName returns MinimalServiceFieldsNamespace.Name, and is useful for accessing the field via an interface.
func (v *MinimalServiceFieldsNamespace) GetName() string { return v.MinimalNamespaceFields.Name }

// GetCluster returns MinimalServiceFieldsNamespace.Cluster, and is useful for accessing the field via an interface.
func (v *MinimalServiceFieldsNamespace) GetCluster() MinimalNamespaceFieldsCluster {
	return v.MinimalNamespaceFields.Cluster
}

func (v *MinimalServiceFieldsNamespace) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MinimalServiceFieldsNamespace
		graphql.NoUnmarshalJSON
	}
	firstPass.MinimalServiceFieldsNamespace = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MinimalNamespaceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMinimalServiceFieldsNamespace struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Cluster MinimalNamespaceFieldsCluster `json:"cluster"`
}

func (v *MinimalServiceFieldsNamespace) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MinimalServiceFieldsNamespace) __premarshalJSON() (*__premarshalMinimalServiceFieldsNamespace, error) {
	var retval __premarshalMinimalServiceFieldsNamespace

	retval.Id = v.MinimalNamespaceFields.Id
	retval.Name = v.MinimalNamespaceFields.Name
	retval.Cluster = v.MinimalNamespaceFields.Cluster
	return &retval, nil
}

// SendCLITelemetryResponse is returned by SendCLITelemetry on success.
type SendCLITelemetryResponse struct {
	SendCLITelemetries bool `json:"sendCLITelemetries"`
}

// GetSendCLITelemetries returns SendCLITelemetryResponse.SendCLITelemetries, and is useful for accessing the field via an interface.
func (v *SendCLITelemetryResponse) GetSendCLITelemetries() bool { return v.SendCLITelemetries }

// __SendCLITelemetryInput is used internally by genqlient
type __SendCLITelemetryInput struct {
	Telemetry CLITelemetry `json:"telemetry"`
}

// GetTelemetry returns __SendCLITelemetryInput.Telemetry, and is useful for accessing the field via an interface.
func (v *__SendCLITelemetryInput) GetTelemetry() CLITelemetry { return v.Telemetry }

// The mutation executed by CreateUserFromAuth0User.
const CreateUserFromAuth0User_Operation = `
mutation CreateUserFromAuth0User {
	me {
		registerUser {
			... MeFields
		}
	}
}
fragment MeFields on Me {
	user {
		id
		email
		name
	}
	organizations {
		id
	}
}
`

func CreateUserFromAuth0User(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *CreateUserFromAuth0UserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateUserFromAuth0User",
		Query:  CreateUserFromAuth0User_Operation,
	}

	data_ = &CreateUserFromAuth0UserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListCluster.
const ListCluster_Operation = `
query ListCluster {
	clusters {
		... MinimalClusterFields
	}
}
fragment MinimalClusterFields on Cluster {
	id
	name
}
`

func ListCluster(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *ListClusterResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListCluster",
		Query:  ListCluster_Operation,
	}

	data_ = &ListClusterResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListEnvironments.
const ListEnvironments_Operation = `
query ListEnvironments {
	environments {
		... MinimalEnvironmentFields
	}
}
fragment MinimalEnvironmentFields on Environment {
	id
	name
}
`

func ListEnvironments(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *ListEnvironmentsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListEnvironments",
		Query:  ListEnvironments_Operation,
	}

	data_ = &ListEnvironmentsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListNamespaces.
const ListNamespaces_Operation = `
query ListNamespaces {
	namespaces {
		... MinimalNamespaceFields
	}
}
fragment MinimalNamespaceFields on Namespace {
	id
	name
	cluster {
		... MinimalClusterFields
	}
}
fragment MinimalClusterFields on Cluster {
	id
	name
}
`

func ListNamespaces(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *ListNamespacesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListNamespaces",
		Query:  ListNamespaces_Operation,
	}

	data_ = &ListNamespacesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ListServices.
const ListServices_Operation = `
query ListServices {
	services {
		... MinimalServiceFields
	}
}
fragment MinimalServiceFields on Service {
	id
	name
	namespace {
		... MinimalNamespaceFields
	}
}
fragment MinimalNamespaceFields on Namespace {
	id
	name
	cluster {
		... MinimalClusterFields
	}
}
fragment MinimalClusterFields on Cluster {
	id
	name
}
`

func ListServices(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *ListServicesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ListServices",
		Query:  ListServices_Operation,
	}

	data_ = &ListServicesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by LoadOrgResources.
const LoadOrgResources_Operation = `
query LoadOrgResources {
	clusters {
		... MinimalClusterFields
	}
	namespaces {
		... MinimalNamespaceFields
	}
	environments {
		... MinimalEnvironmentFields
	}
}
fragment MinimalClusterFields on Cluster {
	id
	name
}
fragment MinimalNamespaceFields on Namespace {
	id
	name
	cluster {
		... MinimalClusterFields
	}
}
fragment MinimalEnvironmentFields on Environment {
	id
	name
}
`

func LoadOrgResources(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *LoadOrgResourcesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "LoadOrgResources",
		Query:  LoadOrgResources_Operation,
	}

	data_ = &LoadOrgResourcesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by SendCLITelemetry.
const SendCLITelemetry_Operation = `
mutation SendCLITelemetry ($telemetry: CLITelemetry!) {
	sendCLITelemetries(telemetries: [$telemetry])
}
`

func SendCLITelemetry(
	ctx_ context.Context,
	client_ graphql.Client,
	telemetry CLITelemetry,
) (data_ *SendCLITelemetryResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SendCLITelemetry",
		Query:  SendCLITelemetry_Operation,
		Variables: &__SendCLITelemetryInput{
			Telemetry: telemetry,
		},
	}

	data_ = &SendCLITelemetryResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
