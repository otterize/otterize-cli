// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package environments

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

// AddEnvLabelsAddEnvironmentLabelsEnvironment includes the requested fields of the GraphQL type Environment.
type AddEnvLabelsAddEnvironmentLabelsEnvironment struct {
	EnvFields `json:"-"`
}

// GetOrganization returns AddEnvLabelsAddEnvironmentLabelsEnvironment.Organization, and is useful for accessing the field via an interface.
func (v *AddEnvLabelsAddEnvironmentLabelsEnvironment) GetOrganization() EnvFieldsOrganization {
	return v.EnvFields.Organization
}

// GetId returns AddEnvLabelsAddEnvironmentLabelsEnvironment.Id, and is useful for accessing the field via an interface.
func (v *AddEnvLabelsAddEnvironmentLabelsEnvironment) GetId() string { return v.EnvFields.Id }

// GetName returns AddEnvLabelsAddEnvironmentLabelsEnvironment.Name, and is useful for accessing the field via an interface.
func (v *AddEnvLabelsAddEnvironmentLabelsEnvironment) GetName() string { return v.EnvFields.Name }

// GetLabels returns AddEnvLabelsAddEnvironmentLabelsEnvironment.Labels, and is useful for accessing the field via an interface.
func (v *AddEnvLabelsAddEnvironmentLabelsEnvironment) GetLabels() []EnvFieldsLabelsLabel {
	return v.EnvFields.Labels
}

// GetIntentsCount returns AddEnvLabelsAddEnvironmentLabelsEnvironment.IntentsCount, and is useful for accessing the field via an interface.
func (v *AddEnvLabelsAddEnvironmentLabelsEnvironment) GetIntentsCount() int {
	return v.EnvFields.IntentsCount
}

// GetIntegrationCount returns AddEnvLabelsAddEnvironmentLabelsEnvironment.IntegrationCount, and is useful for accessing the field via an interface.
func (v *AddEnvLabelsAddEnvironmentLabelsEnvironment) GetIntegrationCount() int {
	return v.EnvFields.IntegrationCount
}

func (v *AddEnvLabelsAddEnvironmentLabelsEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddEnvLabelsAddEnvironmentLabelsEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.AddEnvLabelsAddEnvironmentLabelsEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddEnvLabelsAddEnvironmentLabelsEnvironment struct {
	Organization EnvFieldsOrganization `json:"organization"`

	Id string `json:"id"`

	Name string `json:"name"`

	Labels []EnvFieldsLabelsLabel `json:"labels"`

	IntentsCount int `json:"intentsCount"`

	IntegrationCount int `json:"integrationCount"`
}

func (v *AddEnvLabelsAddEnvironmentLabelsEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddEnvLabelsAddEnvironmentLabelsEnvironment) __premarshalJSON() (*__premarshalAddEnvLabelsAddEnvironmentLabelsEnvironment, error) {
	var retval __premarshalAddEnvLabelsAddEnvironmentLabelsEnvironment

	retval.Organization = v.EnvFields.Organization
	retval.Id = v.EnvFields.Id
	retval.Name = v.EnvFields.Name
	retval.Labels = v.EnvFields.Labels
	retval.IntentsCount = v.EnvFields.IntentsCount
	retval.IntegrationCount = v.EnvFields.IntegrationCount
	return &retval, nil
}

// AddEnvLabelsResponse is returned by AddEnvLabels on success.
type AddEnvLabelsResponse struct {
	// Add labels to environment
	AddEnvironmentLabels *AddEnvLabelsAddEnvironmentLabelsEnvironment `json:"addEnvironmentLabels"`
}

// GetAddEnvironmentLabels returns AddEnvLabelsResponse.AddEnvironmentLabels, and is useful for accessing the field via an interface.
func (v *AddEnvLabelsResponse) GetAddEnvironmentLabels() *AddEnvLabelsAddEnvironmentLabelsEnvironment {
	return v.AddEnvironmentLabels
}

// CreateEnvCreateEnvironment includes the requested fields of the GraphQL type Environment.
type CreateEnvCreateEnvironment struct {
	EnvFields `json:"-"`
}

// GetOrganization returns CreateEnvCreateEnvironment.Organization, and is useful for accessing the field via an interface.
func (v *CreateEnvCreateEnvironment) GetOrganization() EnvFieldsOrganization {
	return v.EnvFields.Organization
}

// GetId returns CreateEnvCreateEnvironment.Id, and is useful for accessing the field via an interface.
func (v *CreateEnvCreateEnvironment) GetId() string { return v.EnvFields.Id }

// GetName returns CreateEnvCreateEnvironment.Name, and is useful for accessing the field via an interface.
func (v *CreateEnvCreateEnvironment) GetName() string { return v.EnvFields.Name }

// GetLabels returns CreateEnvCreateEnvironment.Labels, and is useful for accessing the field via an interface.
func (v *CreateEnvCreateEnvironment) GetLabels() []EnvFieldsLabelsLabel { return v.EnvFields.Labels }

// GetIntentsCount returns CreateEnvCreateEnvironment.IntentsCount, and is useful for accessing the field via an interface.
func (v *CreateEnvCreateEnvironment) GetIntentsCount() int { return v.EnvFields.IntentsCount }

// GetIntegrationCount returns CreateEnvCreateEnvironment.IntegrationCount, and is useful for accessing the field via an interface.
func (v *CreateEnvCreateEnvironment) GetIntegrationCount() int { return v.EnvFields.IntegrationCount }

func (v *CreateEnvCreateEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateEnvCreateEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateEnvCreateEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateEnvCreateEnvironment struct {
	Organization EnvFieldsOrganization `json:"organization"`

	Id string `json:"id"`

	Name string `json:"name"`

	Labels []EnvFieldsLabelsLabel `json:"labels"`

	IntentsCount int `json:"intentsCount"`

	IntegrationCount int `json:"integrationCount"`
}

func (v *CreateEnvCreateEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateEnvCreateEnvironment) __premarshalJSON() (*__premarshalCreateEnvCreateEnvironment, error) {
	var retval __premarshalCreateEnvCreateEnvironment

	retval.Organization = v.EnvFields.Organization
	retval.Id = v.EnvFields.Id
	retval.Name = v.EnvFields.Name
	retval.Labels = v.EnvFields.Labels
	retval.IntentsCount = v.EnvFields.IntentsCount
	retval.IntegrationCount = v.EnvFields.IntegrationCount
	return &retval, nil
}

// CreateEnvResponse is returned by CreateEnv on success.
type CreateEnvResponse struct {
	// Create a new environment
	CreateEnvironment CreateEnvCreateEnvironment `json:"createEnvironment"`
}

// GetCreateEnvironment returns CreateEnvResponse.CreateEnvironment, and is useful for accessing the field via an interface.
func (v *CreateEnvResponse) GetCreateEnvironment() CreateEnvCreateEnvironment {
	return v.CreateEnvironment
}

// DeleteEnvResponse is returned by DeleteEnv on success.
type DeleteEnvResponse struct {
	// Delete environment
	DeleteEnvironment *string `json:"deleteEnvironment"`
}

// GetDeleteEnvironment returns DeleteEnvResponse.DeleteEnvironment, and is useful for accessing the field via an interface.
func (v *DeleteEnvResponse) GetDeleteEnvironment() *string { return v.DeleteEnvironment }

// EnvFields includes the GraphQL fields of Environment requested by the fragment EnvFields.
type EnvFields struct {
	Organization     EnvFieldsOrganization  `json:"organization"`
	Id               string                 `json:"id"`
	Name             string                 `json:"name"`
	Labels           []EnvFieldsLabelsLabel `json:"labels"`
	IntentsCount     int                    `json:"intentsCount"`
	IntegrationCount int                    `json:"integrationCount"`
}

// GetOrganization returns EnvFields.Organization, and is useful for accessing the field via an interface.
func (v *EnvFields) GetOrganization() EnvFieldsOrganization { return v.Organization }

// GetId returns EnvFields.Id, and is useful for accessing the field via an interface.
func (v *EnvFields) GetId() string { return v.Id }

// GetName returns EnvFields.Name, and is useful for accessing the field via an interface.
func (v *EnvFields) GetName() string { return v.Name }

// GetLabels returns EnvFields.Labels, and is useful for accessing the field via an interface.
func (v *EnvFields) GetLabels() []EnvFieldsLabelsLabel { return v.Labels }

// GetIntentsCount returns EnvFields.IntentsCount, and is useful for accessing the field via an interface.
func (v *EnvFields) GetIntentsCount() int { return v.IntentsCount }

// GetIntegrationCount returns EnvFields.IntegrationCount, and is useful for accessing the field via an interface.
func (v *EnvFields) GetIntegrationCount() int { return v.IntegrationCount }

// EnvFieldsLabelsLabel includes the requested fields of the GraphQL type Label.
type EnvFieldsLabelsLabel struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns EnvFieldsLabelsLabel.Key, and is useful for accessing the field via an interface.
func (v *EnvFieldsLabelsLabel) GetKey() string { return v.Key }

// GetValue returns EnvFieldsLabelsLabel.Value, and is useful for accessing the field via an interface.
func (v *EnvFieldsLabelsLabel) GetValue() string { return v.Value }

// EnvFieldsOrganization includes the requested fields of the GraphQL type Organization.
type EnvFieldsOrganization struct {
	Id string `json:"id"`
}

// GetId returns EnvFieldsOrganization.Id, and is useful for accessing the field via an interface.
func (v *EnvFieldsOrganization) GetId() string { return v.Id }

type EnvironmentUpdate struct {
	Name   *string       `json:"name"`
	Labels []*LabelInput `json:"labels"`
}

// GetName returns EnvironmentUpdate.Name, and is useful for accessing the field via an interface.
func (v *EnvironmentUpdate) GetName() *string { return v.Name }

// GetLabels returns EnvironmentUpdate.Labels, and is useful for accessing the field via an interface.
func (v *EnvironmentUpdate) GetLabels() []*LabelInput { return v.Labels }

// GetEnvByIDEnvironment includes the requested fields of the GraphQL type Environment.
type GetEnvByIDEnvironment struct {
	EnvFields `json:"-"`
}

// GetOrganization returns GetEnvByIDEnvironment.Organization, and is useful for accessing the field via an interface.
func (v *GetEnvByIDEnvironment) GetOrganization() EnvFieldsOrganization {
	return v.EnvFields.Organization
}

// GetId returns GetEnvByIDEnvironment.Id, and is useful for accessing the field via an interface.
func (v *GetEnvByIDEnvironment) GetId() string { return v.EnvFields.Id }

// GetName returns GetEnvByIDEnvironment.Name, and is useful for accessing the field via an interface.
func (v *GetEnvByIDEnvironment) GetName() string { return v.EnvFields.Name }

// GetLabels returns GetEnvByIDEnvironment.Labels, and is useful for accessing the field via an interface.
func (v *GetEnvByIDEnvironment) GetLabels() []EnvFieldsLabelsLabel { return v.EnvFields.Labels }

// GetIntentsCount returns GetEnvByIDEnvironment.IntentsCount, and is useful for accessing the field via an interface.
func (v *GetEnvByIDEnvironment) GetIntentsCount() int { return v.EnvFields.IntentsCount }

// GetIntegrationCount returns GetEnvByIDEnvironment.IntegrationCount, and is useful for accessing the field via an interface.
func (v *GetEnvByIDEnvironment) GetIntegrationCount() int { return v.EnvFields.IntegrationCount }

func (v *GetEnvByIDEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetEnvByIDEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.GetEnvByIDEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetEnvByIDEnvironment struct {
	Organization EnvFieldsOrganization `json:"organization"`

	Id string `json:"id"`

	Name string `json:"name"`

	Labels []EnvFieldsLabelsLabel `json:"labels"`

	IntentsCount int `json:"intentsCount"`

	IntegrationCount int `json:"integrationCount"`
}

func (v *GetEnvByIDEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetEnvByIDEnvironment) __premarshalJSON() (*__premarshalGetEnvByIDEnvironment, error) {
	var retval __premarshalGetEnvByIDEnvironment

	retval.Organization = v.EnvFields.Organization
	retval.Id = v.EnvFields.Id
	retval.Name = v.EnvFields.Name
	retval.Labels = v.EnvFields.Labels
	retval.IntentsCount = v.EnvFields.IntentsCount
	retval.IntegrationCount = v.EnvFields.IntegrationCount
	return &retval, nil
}

// GetEnvByIDResponse is returned by GetEnvByID on success.
type GetEnvByIDResponse struct {
	// Get environment
	Environment GetEnvByIDEnvironment `json:"environment"`
}

// GetEnvironment returns GetEnvByIDResponse.Environment, and is useful for accessing the field via an interface.
func (v *GetEnvByIDResponse) GetEnvironment() GetEnvByIDEnvironment { return v.Environment }

// GetEnvByNameOneEnvironment includes the requested fields of the GraphQL type Environment.
type GetEnvByNameOneEnvironment struct {
	EnvFields `json:"-"`
}

// GetOrganization returns GetEnvByNameOneEnvironment.Organization, and is useful for accessing the field via an interface.
func (v *GetEnvByNameOneEnvironment) GetOrganization() EnvFieldsOrganization {
	return v.EnvFields.Organization
}

// GetId returns GetEnvByNameOneEnvironment.Id, and is useful for accessing the field via an interface.
func (v *GetEnvByNameOneEnvironment) GetId() string { return v.EnvFields.Id }

// GetName returns GetEnvByNameOneEnvironment.Name, and is useful for accessing the field via an interface.
func (v *GetEnvByNameOneEnvironment) GetName() string { return v.EnvFields.Name }

// GetLabels returns GetEnvByNameOneEnvironment.Labels, and is useful for accessing the field via an interface.
func (v *GetEnvByNameOneEnvironment) GetLabels() []EnvFieldsLabelsLabel { return v.EnvFields.Labels }

// GetIntentsCount returns GetEnvByNameOneEnvironment.IntentsCount, and is useful for accessing the field via an interface.
func (v *GetEnvByNameOneEnvironment) GetIntentsCount() int { return v.EnvFields.IntentsCount }

// GetIntegrationCount returns GetEnvByNameOneEnvironment.IntegrationCount, and is useful for accessing the field via an interface.
func (v *GetEnvByNameOneEnvironment) GetIntegrationCount() int { return v.EnvFields.IntegrationCount }

func (v *GetEnvByNameOneEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetEnvByNameOneEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.GetEnvByNameOneEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetEnvByNameOneEnvironment struct {
	Organization EnvFieldsOrganization `json:"organization"`

	Id string `json:"id"`

	Name string `json:"name"`

	Labels []EnvFieldsLabelsLabel `json:"labels"`

	IntentsCount int `json:"intentsCount"`

	IntegrationCount int `json:"integrationCount"`
}

func (v *GetEnvByNameOneEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetEnvByNameOneEnvironment) __premarshalJSON() (*__premarshalGetEnvByNameOneEnvironment, error) {
	var retval __premarshalGetEnvByNameOneEnvironment

	retval.Organization = v.EnvFields.Organization
	retval.Id = v.EnvFields.Id
	retval.Name = v.EnvFields.Name
	retval.Labels = v.EnvFields.Labels
	retval.IntentsCount = v.EnvFields.IntentsCount
	retval.IntegrationCount = v.EnvFields.IntegrationCount
	return &retval, nil
}

// GetEnvByNameResponse is returned by GetEnvByName on success.
type GetEnvByNameResponse struct {
	// Get environment by filters
	OneEnvironment GetEnvByNameOneEnvironment `json:"oneEnvironment"`
}

// GetOneEnvironment returns GetEnvByNameResponse.OneEnvironment, and is useful for accessing the field via an interface.
func (v *GetEnvByNameResponse) GetOneEnvironment() GetEnvByNameOneEnvironment {
	return v.OneEnvironment
}

// GetEnvironmentsByLabelsEnvironmentsEnvironment includes the requested fields of the GraphQL type Environment.
type GetEnvironmentsByLabelsEnvironmentsEnvironment struct {
	EnvFields `json:"-"`
}

// GetOrganization returns GetEnvironmentsByLabelsEnvironmentsEnvironment.Organization, and is useful for accessing the field via an interface.
func (v *GetEnvironmentsByLabelsEnvironmentsEnvironment) GetOrganization() EnvFieldsOrganization {
	return v.EnvFields.Organization
}

// GetId returns GetEnvironmentsByLabelsEnvironmentsEnvironment.Id, and is useful for accessing the field via an interface.
func (v *GetEnvironmentsByLabelsEnvironmentsEnvironment) GetId() string { return v.EnvFields.Id }

// GetName returns GetEnvironmentsByLabelsEnvironmentsEnvironment.Name, and is useful for accessing the field via an interface.
func (v *GetEnvironmentsByLabelsEnvironmentsEnvironment) GetName() string { return v.EnvFields.Name }

// GetLabels returns GetEnvironmentsByLabelsEnvironmentsEnvironment.Labels, and is useful for accessing the field via an interface.
func (v *GetEnvironmentsByLabelsEnvironmentsEnvironment) GetLabels() []EnvFieldsLabelsLabel {
	return v.EnvFields.Labels
}

// GetIntentsCount returns GetEnvironmentsByLabelsEnvironmentsEnvironment.IntentsCount, and is useful for accessing the field via an interface.
func (v *GetEnvironmentsByLabelsEnvironmentsEnvironment) GetIntentsCount() int {
	return v.EnvFields.IntentsCount
}

// GetIntegrationCount returns GetEnvironmentsByLabelsEnvironmentsEnvironment.IntegrationCount, and is useful for accessing the field via an interface.
func (v *GetEnvironmentsByLabelsEnvironmentsEnvironment) GetIntegrationCount() int {
	return v.EnvFields.IntegrationCount
}

func (v *GetEnvironmentsByLabelsEnvironmentsEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetEnvironmentsByLabelsEnvironmentsEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.GetEnvironmentsByLabelsEnvironmentsEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetEnvironmentsByLabelsEnvironmentsEnvironment struct {
	Organization EnvFieldsOrganization `json:"organization"`

	Id string `json:"id"`

	Name string `json:"name"`

	Labels []EnvFieldsLabelsLabel `json:"labels"`

	IntentsCount int `json:"intentsCount"`

	IntegrationCount int `json:"integrationCount"`
}

func (v *GetEnvironmentsByLabelsEnvironmentsEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetEnvironmentsByLabelsEnvironmentsEnvironment) __premarshalJSON() (*__premarshalGetEnvironmentsByLabelsEnvironmentsEnvironment, error) {
	var retval __premarshalGetEnvironmentsByLabelsEnvironmentsEnvironment

	retval.Organization = v.EnvFields.Organization
	retval.Id = v.EnvFields.Id
	retval.Name = v.EnvFields.Name
	retval.Labels = v.EnvFields.Labels
	retval.IntentsCount = v.EnvFields.IntentsCount
	retval.IntegrationCount = v.EnvFields.IntegrationCount
	return &retval, nil
}

// GetEnvironmentsByLabelsResponse is returned by GetEnvironmentsByLabels on success.
type GetEnvironmentsByLabelsResponse struct {
	// List environments
	Environments []*GetEnvironmentsByLabelsEnvironmentsEnvironment `json:"environments"`
}

// GetEnvironments returns GetEnvironmentsByLabelsResponse.Environments, and is useful for accessing the field via an interface.
func (v *GetEnvironmentsByLabelsResponse) GetEnvironments() []*GetEnvironmentsByLabelsEnvironmentsEnvironment {
	return v.Environments
}

// GetEnvironmentsEnvironmentsEnvironment includes the requested fields of the GraphQL type Environment.
type GetEnvironmentsEnvironmentsEnvironment struct {
	EnvFields `json:"-"`
}

// GetOrganization returns GetEnvironmentsEnvironmentsEnvironment.Organization, and is useful for accessing the field via an interface.
func (v *GetEnvironmentsEnvironmentsEnvironment) GetOrganization() EnvFieldsOrganization {
	return v.EnvFields.Organization
}

// GetId returns GetEnvironmentsEnvironmentsEnvironment.Id, and is useful for accessing the field via an interface.
func (v *GetEnvironmentsEnvironmentsEnvironment) GetId() string { return v.EnvFields.Id }

// GetName returns GetEnvironmentsEnvironmentsEnvironment.Name, and is useful for accessing the field via an interface.
func (v *GetEnvironmentsEnvironmentsEnvironment) GetName() string { return v.EnvFields.Name }

// GetLabels returns GetEnvironmentsEnvironmentsEnvironment.Labels, and is useful for accessing the field via an interface.
func (v *GetEnvironmentsEnvironmentsEnvironment) GetLabels() []EnvFieldsLabelsLabel {
	return v.EnvFields.Labels
}

// GetIntentsCount returns GetEnvironmentsEnvironmentsEnvironment.IntentsCount, and is useful for accessing the field via an interface.
func (v *GetEnvironmentsEnvironmentsEnvironment) GetIntentsCount() int {
	return v.EnvFields.IntentsCount
}

// GetIntegrationCount returns GetEnvironmentsEnvironmentsEnvironment.IntegrationCount, and is useful for accessing the field via an interface.
func (v *GetEnvironmentsEnvironmentsEnvironment) GetIntegrationCount() int {
	return v.EnvFields.IntegrationCount
}

func (v *GetEnvironmentsEnvironmentsEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetEnvironmentsEnvironmentsEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.GetEnvironmentsEnvironmentsEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetEnvironmentsEnvironmentsEnvironment struct {
	Organization EnvFieldsOrganization `json:"organization"`

	Id string `json:"id"`

	Name string `json:"name"`

	Labels []EnvFieldsLabelsLabel `json:"labels"`

	IntentsCount int `json:"intentsCount"`

	IntegrationCount int `json:"integrationCount"`
}

func (v *GetEnvironmentsEnvironmentsEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetEnvironmentsEnvironmentsEnvironment) __premarshalJSON() (*__premarshalGetEnvironmentsEnvironmentsEnvironment, error) {
	var retval __premarshalGetEnvironmentsEnvironmentsEnvironment

	retval.Organization = v.EnvFields.Organization
	retval.Id = v.EnvFields.Id
	retval.Name = v.EnvFields.Name
	retval.Labels = v.EnvFields.Labels
	retval.IntentsCount = v.EnvFields.IntentsCount
	retval.IntegrationCount = v.EnvFields.IntegrationCount
	return &retval, nil
}

// GetEnvironmentsResponse is returned by GetEnvironments on success.
type GetEnvironmentsResponse struct {
	// List environments
	Environments []GetEnvironmentsEnvironmentsEnvironment `json:"environments"`
}

// GetEnvironments returns GetEnvironmentsResponse.Environments, and is useful for accessing the field via an interface.
func (v *GetEnvironmentsResponse) GetEnvironments() []GetEnvironmentsEnvironmentsEnvironment {
	return v.Environments
}

type LabelInput struct {
	Key   *string `json:"key"`
	Value *string `json:"value"`
}

// GetKey returns LabelInput.Key, and is useful for accessing the field via an interface.
func (v *LabelInput) GetKey() *string { return v.Key }

// GetValue returns LabelInput.Value, and is useful for accessing the field via an interface.
func (v *LabelInput) GetValue() *string { return v.Value }

// RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment includes the requested fields of the GraphQL type Environment.
type RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment struct {
	EnvFields `json:"-"`
}

// GetOrganization returns RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment.Organization, and is useful for accessing the field via an interface.
func (v *RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment) GetOrganization() EnvFieldsOrganization {
	return v.EnvFields.Organization
}

// GetId returns RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment.Id, and is useful for accessing the field via an interface.
func (v *RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment) GetId() string { return v.EnvFields.Id }

// GetName returns RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment.Name, and is useful for accessing the field via an interface.
func (v *RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment) GetName() string { return v.EnvFields.Name }

// GetLabels returns RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment.Labels, and is useful for accessing the field via an interface.
func (v *RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment) GetLabels() []EnvFieldsLabelsLabel {
	return v.EnvFields.Labels
}

// GetIntentsCount returns RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment.IntentsCount, and is useful for accessing the field via an interface.
func (v *RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment) GetIntentsCount() int {
	return v.EnvFields.IntentsCount
}

// GetIntegrationCount returns RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment.IntegrationCount, and is useful for accessing the field via an interface.
func (v *RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment) GetIntegrationCount() int {
	return v.EnvFields.IntegrationCount
}

func (v *RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveEnvLabelsDeleteEnvironmentLabelsEnvironment struct {
	Organization EnvFieldsOrganization `json:"organization"`

	Id string `json:"id"`

	Name string `json:"name"`

	Labels []EnvFieldsLabelsLabel `json:"labels"`

	IntentsCount int `json:"intentsCount"`

	IntegrationCount int `json:"integrationCount"`
}

func (v *RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment) __premarshalJSON() (*__premarshalRemoveEnvLabelsDeleteEnvironmentLabelsEnvironment, error) {
	var retval __premarshalRemoveEnvLabelsDeleteEnvironmentLabelsEnvironment

	retval.Organization = v.EnvFields.Organization
	retval.Id = v.EnvFields.Id
	retval.Name = v.EnvFields.Name
	retval.Labels = v.EnvFields.Labels
	retval.IntentsCount = v.EnvFields.IntentsCount
	retval.IntegrationCount = v.EnvFields.IntegrationCount
	return &retval, nil
}

// RemoveEnvLabelsResponse is returned by RemoveEnvLabels on success.
type RemoveEnvLabelsResponse struct {
	// Remove labels from environment
	DeleteEnvironmentLabels *RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment `json:"deleteEnvironmentLabels"`
}

// GetDeleteEnvironmentLabels returns RemoveEnvLabelsResponse.DeleteEnvironmentLabels, and is useful for accessing the field via an interface.
func (v *RemoveEnvLabelsResponse) GetDeleteEnvironmentLabels() *RemoveEnvLabelsDeleteEnvironmentLabelsEnvironment {
	return v.DeleteEnvironmentLabels
}

// UpdateEnvironmentResponse is returned by UpdateEnvironment on success.
type UpdateEnvironmentResponse struct {
	// Update environment
	UpdateEnvironment *UpdateEnvironmentUpdateEnvironment `json:"updateEnvironment"`
}

// GetUpdateEnvironment returns UpdateEnvironmentResponse.UpdateEnvironment, and is useful for accessing the field via an interface.
func (v *UpdateEnvironmentResponse) GetUpdateEnvironment() *UpdateEnvironmentUpdateEnvironment {
	return v.UpdateEnvironment
}

// UpdateEnvironmentUpdateEnvironment includes the requested fields of the GraphQL type Environment.
type UpdateEnvironmentUpdateEnvironment struct {
	EnvFields `json:"-"`
}

// GetOrganization returns UpdateEnvironmentUpdateEnvironment.Organization, and is useful for accessing the field via an interface.
func (v *UpdateEnvironmentUpdateEnvironment) GetOrganization() EnvFieldsOrganization {
	return v.EnvFields.Organization
}

// GetId returns UpdateEnvironmentUpdateEnvironment.Id, and is useful for accessing the field via an interface.
func (v *UpdateEnvironmentUpdateEnvironment) GetId() string { return v.EnvFields.Id }

// GetName returns UpdateEnvironmentUpdateEnvironment.Name, and is useful for accessing the field via an interface.
func (v *UpdateEnvironmentUpdateEnvironment) GetName() string { return v.EnvFields.Name }

// GetLabels returns UpdateEnvironmentUpdateEnvironment.Labels, and is useful for accessing the field via an interface.
func (v *UpdateEnvironmentUpdateEnvironment) GetLabels() []EnvFieldsLabelsLabel {
	return v.EnvFields.Labels
}

// GetIntentsCount returns UpdateEnvironmentUpdateEnvironment.IntentsCount, and is useful for accessing the field via an interface.
func (v *UpdateEnvironmentUpdateEnvironment) GetIntentsCount() int { return v.EnvFields.IntentsCount }

// GetIntegrationCount returns UpdateEnvironmentUpdateEnvironment.IntegrationCount, and is useful for accessing the field via an interface.
func (v *UpdateEnvironmentUpdateEnvironment) GetIntegrationCount() int {
	return v.EnvFields.IntegrationCount
}

func (v *UpdateEnvironmentUpdateEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateEnvironmentUpdateEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateEnvironmentUpdateEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EnvFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateEnvironmentUpdateEnvironment struct {
	Organization EnvFieldsOrganization `json:"organization"`

	Id string `json:"id"`

	Name string `json:"name"`

	Labels []EnvFieldsLabelsLabel `json:"labels"`

	IntentsCount int `json:"intentsCount"`

	IntegrationCount int `json:"integrationCount"`
}

func (v *UpdateEnvironmentUpdateEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateEnvironmentUpdateEnvironment) __premarshalJSON() (*__premarshalUpdateEnvironmentUpdateEnvironment, error) {
	var retval __premarshalUpdateEnvironmentUpdateEnvironment

	retval.Organization = v.EnvFields.Organization
	retval.Id = v.EnvFields.Id
	retval.Name = v.EnvFields.Name
	retval.Labels = v.EnvFields.Labels
	retval.IntentsCount = v.EnvFields.IntentsCount
	retval.IntegrationCount = v.EnvFields.IntegrationCount
	return &retval, nil
}

// __AddEnvLabelsInput is used internally by genqlient
type __AddEnvLabelsInput struct {
	Id     *string       `json:"id"`
	Labels []*LabelInput `json:"labels"`
}

// GetId returns __AddEnvLabelsInput.Id, and is useful for accessing the field via an interface.
func (v *__AddEnvLabelsInput) GetId() *string { return v.Id }

// GetLabels returns __AddEnvLabelsInput.Labels, and is useful for accessing the field via an interface.
func (v *__AddEnvLabelsInput) GetLabels() []*LabelInput { return v.Labels }

// __CreateEnvInput is used internally by genqlient
type __CreateEnvInput struct {
	Name   string       `json:"name"`
	Labels []LabelInput `json:"labels"`
}

// GetName returns __CreateEnvInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateEnvInput) GetName() string { return v.Name }

// GetLabels returns __CreateEnvInput.Labels, and is useful for accessing the field via an interface.
func (v *__CreateEnvInput) GetLabels() []LabelInput { return v.Labels }

// __DeleteEnvInput is used internally by genqlient
type __DeleteEnvInput struct {
	Id    *string `json:"id"`
	Force *bool   `json:"force"`
}

// GetId returns __DeleteEnvInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteEnvInput) GetId() *string { return v.Id }

// GetForce returns __DeleteEnvInput.Force, and is useful for accessing the field via an interface.
func (v *__DeleteEnvInput) GetForce() *bool { return v.Force }

// __GetEnvByIDInput is used internally by genqlient
type __GetEnvByIDInput struct {
	Id string `json:"id"`
}

// GetId returns __GetEnvByIDInput.Id, and is useful for accessing the field via an interface.
func (v *__GetEnvByIDInput) GetId() string { return v.Id }

// __GetEnvByNameInput is used internally by genqlient
type __GetEnvByNameInput struct {
	Name string `json:"name"`
}

// GetName returns __GetEnvByNameInput.Name, and is useful for accessing the field via an interface.
func (v *__GetEnvByNameInput) GetName() string { return v.Name }

// __GetEnvironmentsByLabelsInput is used internally by genqlient
type __GetEnvironmentsByLabelsInput struct {
	Labels []*LabelInput `json:"labels"`
}

// GetLabels returns __GetEnvironmentsByLabelsInput.Labels, and is useful for accessing the field via an interface.
func (v *__GetEnvironmentsByLabelsInput) GetLabels() []*LabelInput { return v.Labels }

// __RemoveEnvLabelsInput is used internally by genqlient
type __RemoveEnvLabelsInput struct {
	Id     *string   `json:"id"`
	Labels []*string `json:"labels"`
}

// GetId returns __RemoveEnvLabelsInput.Id, and is useful for accessing the field via an interface.
func (v *__RemoveEnvLabelsInput) GetId() *string { return v.Id }

// GetLabels returns __RemoveEnvLabelsInput.Labels, and is useful for accessing the field via an interface.
func (v *__RemoveEnvLabelsInput) GetLabels() []*string { return v.Labels }

// __UpdateEnvironmentInput is used internally by genqlient
type __UpdateEnvironmentInput struct {
	Id     *string            `json:"id"`
	Update *EnvironmentUpdate `json:"update"`
}

// GetId returns __UpdateEnvironmentInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateEnvironmentInput) GetId() *string { return v.Id }

// GetUpdate returns __UpdateEnvironmentInput.Update, and is useful for accessing the field via an interface.
func (v *__UpdateEnvironmentInput) GetUpdate() *EnvironmentUpdate { return v.Update }

func AddEnvLabels(
	ctx context.Context,
	client graphql.Client,
	id *string,
	labels []*LabelInput,
) (*AddEnvLabelsResponse, error) {
	req := &graphql.Request{
		OpName: "AddEnvLabels",
		Query: `
mutation AddEnvLabels ($id: ID!, $labels: [LabelInput!]!) {
	addEnvironmentLabels(id: $id, labels: $labels) {
		... EnvFields
	}
}
fragment EnvFields on Environment {
	organization {
		id
	}
	id
	name
	labels {
		key
		value
	}
	intentsCount
	integrationCount
}
`,
		Variables: &__AddEnvLabelsInput{
			Id:     id,
			Labels: labels,
		},
	}
	var err error

	var data AddEnvLabelsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateEnv(
	ctx context.Context,
	client graphql.Client,
	name string,
	labels []LabelInput,
) (*CreateEnvResponse, error) {
	req := &graphql.Request{
		OpName: "CreateEnv",
		Query: `
mutation CreateEnv ($name: String!, $labels: [LabelInput!]) {
	createEnvironment(name: $name, labels: $labels) {
		... EnvFields
	}
}
fragment EnvFields on Environment {
	organization {
		id
	}
	id
	name
	labels {
		key
		value
	}
	intentsCount
	integrationCount
}
`,
		Variables: &__CreateEnvInput{
			Name:   name,
			Labels: labels,
		},
	}
	var err error

	var data CreateEnvResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteEnv(
	ctx context.Context,
	client graphql.Client,
	id *string,
	force *bool,
) (*DeleteEnvResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteEnv",
		Query: `
mutation DeleteEnv ($id: ID!, $force: Boolean!) {
	deleteEnvironment(id: $id, force: $force)
}
`,
		Variables: &__DeleteEnvInput{
			Id:    id,
			Force: force,
		},
	}
	var err error

	var data DeleteEnvResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetEnvByID(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetEnvByIDResponse, error) {
	req := &graphql.Request{
		OpName: "GetEnvByID",
		Query: `
query GetEnvByID ($id: ID!) {
	environment(id: $id) {
		... EnvFields
	}
}
fragment EnvFields on Environment {
	organization {
		id
	}
	id
	name
	labels {
		key
		value
	}
	intentsCount
	integrationCount
}
`,
		Variables: &__GetEnvByIDInput{
			Id: id,
		},
	}
	var err error

	var data GetEnvByIDResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetEnvByName(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*GetEnvByNameResponse, error) {
	req := &graphql.Request{
		OpName: "GetEnvByName",
		Query: `
query GetEnvByName ($name: String!) {
	oneEnvironment(name: $name) {
		... EnvFields
	}
}
fragment EnvFields on Environment {
	organization {
		id
	}
	id
	name
	labels {
		key
		value
	}
	intentsCount
	integrationCount
}
`,
		Variables: &__GetEnvByNameInput{
			Name: name,
		},
	}
	var err error

	var data GetEnvByNameResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetEnvironments(
	ctx context.Context,
	client graphql.Client,
) (*GetEnvironmentsResponse, error) {
	req := &graphql.Request{
		OpName: "GetEnvironments",
		Query: `
query GetEnvironments {
	environments {
		... EnvFields
	}
}
fragment EnvFields on Environment {
	organization {
		id
	}
	id
	name
	labels {
		key
		value
	}
	intentsCount
	integrationCount
}
`,
	}
	var err error

	var data GetEnvironmentsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetEnvironmentsByLabels(
	ctx context.Context,
	client graphql.Client,
	labels []*LabelInput,
) (*GetEnvironmentsByLabelsResponse, error) {
	req := &graphql.Request{
		OpName: "GetEnvironmentsByLabels",
		Query: `
query GetEnvironmentsByLabels ($labels: [LabelInput!]) {
	environments(labels: $labels) {
		... EnvFields
	}
}
fragment EnvFields on Environment {
	organization {
		id
	}
	id
	name
	labels {
		key
		value
	}
	intentsCount
	integrationCount
}
`,
		Variables: &__GetEnvironmentsByLabelsInput{
			Labels: labels,
		},
	}
	var err error

	var data GetEnvironmentsByLabelsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func RemoveEnvLabels(
	ctx context.Context,
	client graphql.Client,
	id *string,
	labels []*string,
) (*RemoveEnvLabelsResponse, error) {
	req := &graphql.Request{
		OpName: "RemoveEnvLabels",
		Query: `
mutation RemoveEnvLabels ($id: ID!, $labels: [String!]!) {
	deleteEnvironmentLabels(id: $id, labels: $labels) {
		... EnvFields
	}
}
fragment EnvFields on Environment {
	organization {
		id
	}
	id
	name
	labels {
		key
		value
	}
	intentsCount
	integrationCount
}
`,
		Variables: &__RemoveEnvLabelsInput{
			Id:     id,
			Labels: labels,
		},
	}
	var err error

	var data RemoveEnvLabelsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateEnvironment(
	ctx context.Context,
	client graphql.Client,
	id *string,
	update *EnvironmentUpdate,
) (*UpdateEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateEnvironment",
		Query: `
mutation UpdateEnvironment ($id: ID!, $update: EnvironmentUpdate!) {
	updateEnvironment(id: $id, update: $update) {
		... EnvFields
	}
}
fragment EnvFields on Environment {
	organization {
		id
	}
	id
	name
	labels {
		key
		value
	}
	intentsCount
	integrationCount
}
`,
		Variables: &__UpdateEnvironmentInput{
			Id:     id,
			Update: update,
		},
	}
	var err error

	var data UpdateEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
