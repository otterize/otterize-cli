// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package users

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// CreateUserCreateUser includes the requested fields of the GraphQL type User.
type CreateUserCreateUser struct {
	Id            string                            `json:"id"`
	Email         string                            `json:"email"`
	Auth0UserId   string                            `json:"auth0UserId"`
	Organization  CreateUserCreateUserOrganization  `json:"organization"`
	Auth0UserInfo CreateUserCreateUserAuth0UserInfo `json:"auth0UserInfo"`
}

// GetId returns CreateUserCreateUser.Id, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetId() string { return v.Id }

// GetEmail returns CreateUserCreateUser.Email, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetEmail() string { return v.Email }

// GetAuth0UserId returns CreateUserCreateUser.Auth0UserId, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetAuth0UserId() string { return v.Auth0UserId }

// GetOrganization returns CreateUserCreateUser.Organization, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetOrganization() CreateUserCreateUserOrganization {
	return v.Organization
}

// GetAuth0UserInfo returns CreateUserCreateUser.Auth0UserInfo, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetAuth0UserInfo() CreateUserCreateUserAuth0UserInfo {
	return v.Auth0UserInfo
}

// CreateUserCreateUserAuth0UserInfo includes the requested fields of the GraphQL type Auth0UserInfo.
type CreateUserCreateUserAuth0UserInfo struct {
	Name string `json:"name"`
}

// GetName returns CreateUserCreateUserAuth0UserInfo.Name, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUserAuth0UserInfo) GetName() string { return v.Name }

// CreateUserCreateUserOrganization includes the requested fields of the GraphQL type Organization.
type CreateUserCreateUserOrganization struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns CreateUserCreateUserOrganization.Id, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUserOrganization) GetId() string { return v.Id }

// GetName returns CreateUserCreateUserOrganization.Name, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUserOrganization) GetName() string { return v.Name }

// CreateUserFromAuth0UserMeMeMutation includes the requested fields of the GraphQL type MeMutation.
type CreateUserFromAuth0UserMeMeMutation struct {
	RegisterUser CreateUserFromAuth0UserMeMeMutationRegisterUser `json:"registerUser"`
}

// GetRegisterUser returns CreateUserFromAuth0UserMeMeMutation.RegisterUser, and is useful for accessing the field via an interface.
func (v *CreateUserFromAuth0UserMeMeMutation) GetRegisterUser() CreateUserFromAuth0UserMeMeMutationRegisterUser {
	return v.RegisterUser
}

// CreateUserFromAuth0UserMeMeMutationRegisterUser includes the requested fields of the GraphQL type User.
type CreateUserFromAuth0UserMeMeMutationRegisterUser struct {
	Id            string                                                       `json:"id"`
	Email         string                                                       `json:"email"`
	Auth0UserId   string                                                       `json:"auth0UserId"`
	Organization  CreateUserFromAuth0UserMeMeMutationRegisterUserOrganization  `json:"organization"`
	Auth0UserInfo CreateUserFromAuth0UserMeMeMutationRegisterUserAuth0UserInfo `json:"auth0UserInfo"`
}

// GetId returns CreateUserFromAuth0UserMeMeMutationRegisterUser.Id, and is useful for accessing the field via an interface.
func (v *CreateUserFromAuth0UserMeMeMutationRegisterUser) GetId() string { return v.Id }

// GetEmail returns CreateUserFromAuth0UserMeMeMutationRegisterUser.Email, and is useful for accessing the field via an interface.
func (v *CreateUserFromAuth0UserMeMeMutationRegisterUser) GetEmail() string { return v.Email }

// GetAuth0UserId returns CreateUserFromAuth0UserMeMeMutationRegisterUser.Auth0UserId, and is useful for accessing the field via an interface.
func (v *CreateUserFromAuth0UserMeMeMutationRegisterUser) GetAuth0UserId() string {
	return v.Auth0UserId
}

// GetOrganization returns CreateUserFromAuth0UserMeMeMutationRegisterUser.Organization, and is useful for accessing the field via an interface.
func (v *CreateUserFromAuth0UserMeMeMutationRegisterUser) GetOrganization() CreateUserFromAuth0UserMeMeMutationRegisterUserOrganization {
	return v.Organization
}

// GetAuth0UserInfo returns CreateUserFromAuth0UserMeMeMutationRegisterUser.Auth0UserInfo, and is useful for accessing the field via an interface.
func (v *CreateUserFromAuth0UserMeMeMutationRegisterUser) GetAuth0UserInfo() CreateUserFromAuth0UserMeMeMutationRegisterUserAuth0UserInfo {
	return v.Auth0UserInfo
}

// CreateUserFromAuth0UserMeMeMutationRegisterUserAuth0UserInfo includes the requested fields of the GraphQL type Auth0UserInfo.
type CreateUserFromAuth0UserMeMeMutationRegisterUserAuth0UserInfo struct {
	Name string `json:"name"`
}

// GetName returns CreateUserFromAuth0UserMeMeMutationRegisterUserAuth0UserInfo.Name, and is useful for accessing the field via an interface.
func (v *CreateUserFromAuth0UserMeMeMutationRegisterUserAuth0UserInfo) GetName() string {
	return v.Name
}

// CreateUserFromAuth0UserMeMeMutationRegisterUserOrganization includes the requested fields of the GraphQL type Organization.
type CreateUserFromAuth0UserMeMeMutationRegisterUserOrganization struct {
	Id string `json:"id"`
}

// GetId returns CreateUserFromAuth0UserMeMeMutationRegisterUserOrganization.Id, and is useful for accessing the field via an interface.
func (v *CreateUserFromAuth0UserMeMeMutationRegisterUserOrganization) GetId() string { return v.Id }

// CreateUserFromAuth0UserResponse is returned by CreateUserFromAuth0User on success.
type CreateUserFromAuth0UserResponse struct {
	Me CreateUserFromAuth0UserMeMeMutation `json:"me"`
}

// GetMe returns CreateUserFromAuth0UserResponse.Me, and is useful for accessing the field via an interface.
func (v *CreateUserFromAuth0UserResponse) GetMe() CreateUserFromAuth0UserMeMeMutation { return v.Me }

// CreateUserResponse is returned by CreateUser on success.
type CreateUserResponse struct {
	CreateUser CreateUserCreateUser `json:"createUser"`
}

// GetCreateUser returns CreateUserResponse.CreateUser, and is useful for accessing the field via an interface.
func (v *CreateUserResponse) GetCreateUser() CreateUserCreateUser { return v.CreateUser }

// DeleteUserResponse is returned by DeleteUser on success.
type DeleteUserResponse struct {
	DeleteUser string `json:"deleteUser"`
}

// GetDeleteUser returns DeleteUserResponse.DeleteUser, and is useful for accessing the field via an interface.
func (v *DeleteUserResponse) GetDeleteUser() string { return v.DeleteUser }

// GetUserByAuth0UserMe includes the requested fields of the GraphQL type Me.
type GetUserByAuth0UserMe struct {
	User GetUserByAuth0UserMeUser `json:"user"`
}

// GetUser returns GetUserByAuth0UserMe.User, and is useful for accessing the field via an interface.
func (v *GetUserByAuth0UserMe) GetUser() GetUserByAuth0UserMeUser { return v.User }

// GetUserByAuth0UserMeUser includes the requested fields of the GraphQL type User.
type GetUserByAuth0UserMeUser struct {
	Id            string                                `json:"id"`
	Email         string                                `json:"email"`
	Auth0UserId   string                                `json:"auth0UserId"`
	Organization  GetUserByAuth0UserMeUserOrganization  `json:"organization"`
	Auth0UserInfo GetUserByAuth0UserMeUserAuth0UserInfo `json:"auth0UserInfo"`
}

// GetId returns GetUserByAuth0UserMeUser.Id, and is useful for accessing the field via an interface.
func (v *GetUserByAuth0UserMeUser) GetId() string { return v.Id }

// GetEmail returns GetUserByAuth0UserMeUser.Email, and is useful for accessing the field via an interface.
func (v *GetUserByAuth0UserMeUser) GetEmail() string { return v.Email }

// GetAuth0UserId returns GetUserByAuth0UserMeUser.Auth0UserId, and is useful for accessing the field via an interface.
func (v *GetUserByAuth0UserMeUser) GetAuth0UserId() string { return v.Auth0UserId }

// GetOrganization returns GetUserByAuth0UserMeUser.Organization, and is useful for accessing the field via an interface.
func (v *GetUserByAuth0UserMeUser) GetOrganization() GetUserByAuth0UserMeUserOrganization {
	return v.Organization
}

// GetAuth0UserInfo returns GetUserByAuth0UserMeUser.Auth0UserInfo, and is useful for accessing the field via an interface.
func (v *GetUserByAuth0UserMeUser) GetAuth0UserInfo() GetUserByAuth0UserMeUserAuth0UserInfo {
	return v.Auth0UserInfo
}

// GetUserByAuth0UserMeUserAuth0UserInfo includes the requested fields of the GraphQL type Auth0UserInfo.
type GetUserByAuth0UserMeUserAuth0UserInfo struct {
	Name string `json:"name"`
}

// GetName returns GetUserByAuth0UserMeUserAuth0UserInfo.Name, and is useful for accessing the field via an interface.
func (v *GetUserByAuth0UserMeUserAuth0UserInfo) GetName() string { return v.Name }

// GetUserByAuth0UserMeUserOrganization includes the requested fields of the GraphQL type Organization.
type GetUserByAuth0UserMeUserOrganization struct {
	Id string `json:"id"`
}

// GetId returns GetUserByAuth0UserMeUserOrganization.Id, and is useful for accessing the field via an interface.
func (v *GetUserByAuth0UserMeUserOrganization) GetId() string { return v.Id }

// GetUserByAuth0UserResponse is returned by GetUserByAuth0User on success.
type GetUserByAuth0UserResponse struct {
	Me GetUserByAuth0UserMe `json:"me"`
}

// GetMe returns GetUserByAuth0UserResponse.Me, and is useful for accessing the field via an interface.
func (v *GetUserByAuth0UserResponse) GetMe() GetUserByAuth0UserMe { return v.Me }

// GetUserResponse is returned by GetUser on success.
type GetUserResponse struct {
	User GetUserUser `json:"user"`
}

// GetUser returns GetUserResponse.User, and is useful for accessing the field via an interface.
func (v *GetUserResponse) GetUser() GetUserUser { return v.User }

// GetUserUser includes the requested fields of the GraphQL type User.
type GetUserUser struct {
	Id            string                   `json:"id"`
	Email         string                   `json:"email"`
	Auth0UserId   string                   `json:"auth0UserId"`
	Organization  GetUserUserOrganization  `json:"organization"`
	Auth0UserInfo GetUserUserAuth0UserInfo `json:"auth0UserInfo"`
}

// GetId returns GetUserUser.Id, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetId() string { return v.Id }

// GetEmail returns GetUserUser.Email, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetEmail() string { return v.Email }

// GetAuth0UserId returns GetUserUser.Auth0UserId, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetAuth0UserId() string { return v.Auth0UserId }

// GetOrganization returns GetUserUser.Organization, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetOrganization() GetUserUserOrganization { return v.Organization }

// GetAuth0UserInfo returns GetUserUser.Auth0UserInfo, and is useful for accessing the field via an interface.
func (v *GetUserUser) GetAuth0UserInfo() GetUserUserAuth0UserInfo { return v.Auth0UserInfo }

// GetUserUserAuth0UserInfo includes the requested fields of the GraphQL type Auth0UserInfo.
type GetUserUserAuth0UserInfo struct {
	Name string `json:"name"`
}

// GetName returns GetUserUserAuth0UserInfo.Name, and is useful for accessing the field via an interface.
func (v *GetUserUserAuth0UserInfo) GetName() string { return v.Name }

// GetUserUserOrganization includes the requested fields of the GraphQL type Organization.
type GetUserUserOrganization struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns GetUserUserOrganization.Id, and is useful for accessing the field via an interface.
func (v *GetUserUserOrganization) GetId() string { return v.Id }

// GetName returns GetUserUserOrganization.Name, and is useful for accessing the field via an interface.
func (v *GetUserUserOrganization) GetName() string { return v.Name }

// ListUsersResponse is returned by ListUsers on success.
type ListUsersResponse struct {
	Users []ListUsersUsersUser `json:"users"`
}

// GetUsers returns ListUsersResponse.Users, and is useful for accessing the field via an interface.
func (v *ListUsersResponse) GetUsers() []ListUsersUsersUser { return v.Users }

// ListUsersUsersUser includes the requested fields of the GraphQL type User.
type ListUsersUsersUser struct {
	Id            string                          `json:"id"`
	Email         string                          `json:"email"`
	Auth0UserId   string                          `json:"auth0UserId"`
	Organization  ListUsersUsersUserOrganization  `json:"organization"`
	Auth0UserInfo ListUsersUsersUserAuth0UserInfo `json:"auth0UserInfo"`
}

// GetId returns ListUsersUsersUser.Id, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUser) GetId() string { return v.Id }

// GetEmail returns ListUsersUsersUser.Email, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUser) GetEmail() string { return v.Email }

// GetAuth0UserId returns ListUsersUsersUser.Auth0UserId, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUser) GetAuth0UserId() string { return v.Auth0UserId }

// GetOrganization returns ListUsersUsersUser.Organization, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUser) GetOrganization() ListUsersUsersUserOrganization { return v.Organization }

// GetAuth0UserInfo returns ListUsersUsersUser.Auth0UserInfo, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUser) GetAuth0UserInfo() ListUsersUsersUserAuth0UserInfo {
	return v.Auth0UserInfo
}

// ListUsersUsersUserAuth0UserInfo includes the requested fields of the GraphQL type Auth0UserInfo.
type ListUsersUsersUserAuth0UserInfo struct {
	Name string `json:"name"`
}

// GetName returns ListUsersUsersUserAuth0UserInfo.Name, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUserAuth0UserInfo) GetName() string { return v.Name }

// ListUsersUsersUserOrganization includes the requested fields of the GraphQL type Organization.
type ListUsersUsersUserOrganization struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns ListUsersUsersUserOrganization.Id, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUserOrganization) GetId() string { return v.Id }

// GetName returns ListUsersUsersUserOrganization.Name, and is useful for accessing the field via an interface.
func (v *ListUsersUsersUserOrganization) GetName() string { return v.Name }

// __CreateUserInput is used internally by genqlient
type __CreateUserInput struct {
	Email         string `json:"email"`
	Auth0_user_id string `json:"auth0_user_id"`
}

// GetEmail returns __CreateUserInput.Email, and is useful for accessing the field via an interface.
func (v *__CreateUserInput) GetEmail() string { return v.Email }

// GetAuth0_user_id returns __CreateUserInput.Auth0_user_id, and is useful for accessing the field via an interface.
func (v *__CreateUserInput) GetAuth0_user_id() string { return v.Auth0_user_id }

// __DeleteUserInput is used internally by genqlient
type __DeleteUserInput struct {
	Id string `json:"id"`
}

// GetId returns __DeleteUserInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteUserInput) GetId() string { return v.Id }

// __GetUserInput is used internally by genqlient
type __GetUserInput struct {
	Id string `json:"id"`
}

// GetId returns __GetUserInput.Id, and is useful for accessing the field via an interface.
func (v *__GetUserInput) GetId() string { return v.Id }

func CreateUser(
	ctx context.Context,
	client graphql.Client,
	email string,
	auth0_user_id string,
) (*CreateUserResponse, error) {
	req := &graphql.Request{
		OpName: "CreateUser",
		Query: `
mutation CreateUser ($email: String!, $auth0_user_id: String!) {
	createUser(email: $email, auth0UserId: $auth0_user_id) {
		id
		email
		auth0UserId
		organization {
			id
			name
		}
		auth0UserInfo {
			name
		}
	}
}
`,
		Variables: &__CreateUserInput{
			Email:         email,
			Auth0_user_id: auth0_user_id,
		},
	}
	var err error

	var data CreateUserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateUserFromAuth0User(
	ctx context.Context,
	client graphql.Client,
) (*CreateUserFromAuth0UserResponse, error) {
	req := &graphql.Request{
		OpName: "CreateUserFromAuth0User",
		Query: `
mutation CreateUserFromAuth0User {
	me {
		registerUser {
			id
			email
			auth0UserId
			organization {
				id
			}
			auth0UserInfo {
				name
			}
		}
	}
}
`,
	}
	var err error

	var data CreateUserFromAuth0UserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteUser(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*DeleteUserResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteUser",
		Query: `
mutation DeleteUser ($id: ID!) {
	deleteUser(id: $id)
}
`,
		Variables: &__DeleteUserInput{
			Id: id,
		},
	}
	var err error

	var data DeleteUserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetUser(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetUserResponse, error) {
	req := &graphql.Request{
		OpName: "GetUser",
		Query: `
query GetUser ($id: ID!) {
	user(id: $id) {
		id
		email
		auth0UserId
		organization {
			id
			name
		}
		auth0UserInfo {
			name
		}
	}
}
`,
		Variables: &__GetUserInput{
			Id: id,
		},
	}
	var err error

	var data GetUserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetUserByAuth0User(
	ctx context.Context,
	client graphql.Client,
) (*GetUserByAuth0UserResponse, error) {
	req := &graphql.Request{
		OpName: "GetUserByAuth0User",
		Query: `
query GetUserByAuth0User {
	me {
		user {
			id
			email
			auth0UserId
			organization {
				id
			}
			auth0UserInfo {
				name
			}
		}
	}
}
`,
	}
	var err error

	var data GetUserByAuth0UserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ListUsers(
	ctx context.Context,
	client graphql.Client,
) (*ListUsersResponse, error) {
	req := &graphql.Request{
		OpName: "ListUsers",
		Query: `
query ListUsers {
	users {
		id
		email
		auth0UserId
		organization {
			id
			name
		}
		auth0UserInfo {
			name
		}
	}
}
`,
	}
	var err error

	var data ListUsersResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
