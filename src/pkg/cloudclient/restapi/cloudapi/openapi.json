{
  "components": {
    "responses": {
      "APPLIED_INTENTS_ERROR": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Bad Request"
      },
      "BAD_REQUEST": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Bad Request"
      },
      "BAD_USER_INPUT": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Unprocessable Entity"
      },
      "CONFLICT": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Conflict"
      },
      "FORBIDDEN": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Forbidden"
      },
      "INTERNAL_SERVER_ERROR": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Internal Server Error"
      },
      "NOT_FOUND": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Not Found"
      },
      "UNAUTHENTICATED": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Unauthorized"
      },
      "UNEXPECTED_ERROR": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "AWSGeneralResource": {
        "properties": {
          "isWildcard": {
            "type": "boolean"
          },
          "resource": {
            "type": "string"
          }
        },
        "required": [
          "resource",
          "isWildcard"
        ],
        "type": "object"
      },
      "AWSInfo": {
        "properties": {
          "awsAccountId": {
            "type": "string"
          },
          "eksClusterName": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "required": [
          "region",
          "namespace",
          "eksClusterName",
          "awsAccountId"
        ],
        "type": "object"
      },
      "AWSInfoInput": {
        "properties": {
          "awsAccountId": {
            "type": "string"
          },
          "clusterId": {
            "type": "string"
          },
          "eksClusterName": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "required": [
          "clusterId",
          "region",
          "namespace",
          "eksClusterName",
          "awsAccountId"
        ],
        "type": "object"
      },
      "AWSResource": {
        "properties": {
          "info": {
            "type": "object"
          },
          "type": {
            "enum": [
              "GENERAL",
              "S3"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "info"
        ],
        "type": "object"
      },
      "AWSS3Resource": {
        "properties": {
          "bucketName": {
            "type": "string"
          }
        },
        "required": [
          "bucketName"
        ],
        "type": "object"
      },
      "AWSVisibility": {
        "properties": {
          "arn": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "eksIngressName": {
            "type": "string"
          },
          "ips": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "lbArn": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "resourceType": {
            "enum": [
              "EKS"
            ],
            "type": "string"
          }
        },
        "required": [
          "arn",
          "resourceType",
          "name",
          "ips",
          "region"
        ],
        "type": "object"
      },
      "AWSVisibilitySettings": {
        "properties": {
          "awsAccountId": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "isActive",
          "awsAccountId",
          "externalId",
          "regions"
        ],
        "type": "object"
      },
      "AWSVisibilitySettingsInput": {
        "properties": {
          "awsAccountId": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "isActive",
          "awsAccountId",
          "regions"
        ],
        "type": "object"
      },
      "AccessGraph": {
        "properties": {
          "clusters": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "filter": {
            "$ref": "#/components/schemas/AccessGraphFilter"
          },
          "serviceAccessGraphs": {
            "items": {
              "$ref": "#/components/schemas/ServiceAccessGraph"
            },
            "type": "array"
          },
          "serviceCount": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "filter",
          "clusters",
          "serviceAccessGraphs",
          "serviceCount"
        ],
        "type": "object"
      },
      "AccessGraphEdge": {
        "properties": {
          "accessStatus": {
            "$ref": "#/components/schemas/EdgeAccessStatus"
          },
          "accessStatuses": {
            "$ref": "#/components/schemas/EdgeAccessStatuses"
          },
          "appliedIntents": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "client": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "discoveredIntents": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "findings": {
            "items": {
              "$ref": "#/components/schemas/CallFinding"
            },
            "type": "array"
          },
          "server": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          }
        },
        "required": [
          "client",
          "server",
          "discoveredIntents",
          "appliedIntents",
          "accessStatus",
          "accessStatuses",
          "findings"
        ],
        "type": "object"
      },
      "AccessGraphFilter": {
        "description": " Access graph filter ",
        "properties": {
          "clusterIds": {
            "$ref": "#/components/schemas/IDFilterValue"
          },
          "environmentIds": {
            "$ref": "#/components/schemas/IDFilterValue"
          },
          "featureFlags": {
            "$ref": "#/components/schemas/FeatureFlags"
          },
          "includeOnlyClientsMatchingFilter": {
            "type": "boolean"
          },
          "lastSeen": {
            "$ref": "#/components/schemas/TimeFilterValue"
          },
          "namespaceIds": {
            "$ref": "#/components/schemas/IDFilterValue"
          },
          "serviceIds": {
            "$ref": "#/components/schemas/IDFilterValue"
          }
        },
        "type": "object"
      },
      "AccessLog": {
        "properties": {
          "clusters": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "entries": {
            "items": {
              "$ref": "#/components/schemas/AccessLogEdge"
            },
            "type": "array"
          },
          "namespaces": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange"
          },
          "totalCount": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "clusters",
          "namespaces",
          "entries",
          "timeRange",
          "totalCount"
        ],
        "type": "object"
      },
      "AccessLogEdge": {
        "properties": {
          "accessStatus": {
            "$ref": "#/components/schemas/EdgeAccessStatus"
          },
          "appliedIntents": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "client": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "dns": {
            "type": "string"
          },
          "originIntent": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "server": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "timestamp",
          "client",
          "server",
          "originIntent",
          "dns",
          "accessStatus"
        ],
        "type": "object"
      },
      "AzureInfo": {
        "properties": {
          "aksClusterName": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "resourceGroup": {
            "type": "string"
          },
          "subscriptionId": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          }
        },
        "required": [
          "tenantId",
          "subscriptionId",
          "resourceGroup",
          "aksClusterName",
          "namespace"
        ],
        "type": "object"
      },
      "AzureInfoInput": {
        "properties": {
          "aksClusterName": {
            "type": "string"
          },
          "clusterId": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "resourceGroup": {
            "type": "string"
          },
          "subscriptionId": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          }
        },
        "required": [
          "clusterId",
          "tenantId",
          "subscriptionId",
          "resourceGroup",
          "aksClusterName",
          "namespace"
        ],
        "type": "object"
      },
      "AzureKeyVaultPolicy": {
        "properties": {
          "certificatePermissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "keyPermissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "secretPermissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "storagePermissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AzureResource": {
        "properties": {
          "resource": {
            "type": "string"
          }
        },
        "required": [
          "resource"
        ],
        "type": "object"
      },
      "CallFinding": {
        "properties": {
          "code": {
            "enum": [
              "PCI_4_0",
              "PCI_4_0_1_1",
              "PCI_4_0_1_1_2",
              "PCI_4_0_1_1_4",
              "PCI_4_0_1_1_6",
              "PCI_4_0_1_2",
              "PCI_4_0_1_2_1",
              "PCI_4_0_1_3",
              "PCI_4_0_1_3_4",
              "PCI_4_0_1_3_6",
              "PCI_4_0_7_1",
              "PCI_4_0_7_2",
              "PCI_4_0_8_7",
              "ZERO_TRUST",
              "ZERO_TRUST_SENSITIVE",
              "ZERO_TRUST_DEFAULT_DENY",
              "ZERO_TRUST_EGRESS_ACCESS_COVERED",
              "ZERO_TRUST_EXTERNAL_INGRESS_TAGGED",
              "ZERO_TRUST_ALL_INTRA_CLUSTER_ACCESS_COVERED"
            ],
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "standard": {
            "enum": [
              "PCI_4_0",
              "PII",
              "HIPAA",
              "ZERO_TRUST"
            ],
            "type": "string"
          }
        },
        "required": [
          "standard",
          "code",
          "reason"
        ],
        "type": "object"
      },
      "CertificateInformation": {
        "properties": {
          "commonName": {
            "type": "string"
          },
          "dnsNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ttl": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "commonName"
        ],
        "type": "object"
      },
      "ChannelInfoInput": {
        "properties": {
          "channelName": {
            "type": "string"
          }
        },
        "required": [
          "channelName"
        ],
        "type": "object"
      },
      "ClientIntentEvent": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "firstTimestamp": {
            "format": "date-time",
            "type": "string"
          },
          "lastTimestamp": {
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "reportingComponent": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "count",
          "type",
          "reason",
          "message"
        ],
        "type": "object"
      },
      "ClientIntentStatus": {
        "properties": {
          "clientIntentName": {
            "type": "string"
          },
          "generation": {
            "format": "int32",
            "type": "integer"
          },
          "observedGeneration": {
            "format": "int32",
            "type": "integer"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "upToDate": {
            "type": "boolean"
          }
        },
        "required": [
          "clientIntentName",
          "generation",
          "timestamp",
          "observedGeneration",
          "upToDate"
        ],
        "type": "object"
      },
      "ClientIntentsFileRepresentation": {
        "properties": {
          "content": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "rows": {
            "items": {
              "$ref": "#/components/schemas/ClientIntentsRow"
            },
            "type": "array"
          },
          "service": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          }
        },
        "required": [
          "fileName",
          "service",
          "rows",
          "content"
        ],
        "type": "object"
      },
      "ClientIntentsFiles": {
        "properties": {
          "files": {
            "items": {
              "$ref": "#/components/schemas/ClientIntentsFileRepresentation"
            },
            "type": "array"
          },
          "mergedYAMLFile": {
            "$ref": "#/components/schemas/MergedYAMLFile"
          }
        },
        "required": [
          "files"
        ],
        "type": "object"
      },
      "ClientIntentsRow": {
        "properties": {
          "calledServerId": {
            "type": "string"
          },
          "diff": {
            "enum": [
              "ADDED",
              "REMOVED"
            ],
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "type": "object"
      },
      "Cluster": {
        "properties": {
          "components": {
            "$ref": "#/components/schemas/IntegrationComponents"
          },
          "configuration": {
            "$ref": "#/components/schemas/ClusterConfiguration"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "defaultEnvironment": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "integration": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "integrations": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "namespaces": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "serviceCount": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "namespaces",
          "serviceCount",
          "integrations",
          "components",
          "createdAt"
        ],
        "type": "object"
      },
      "ClusterConfiguration": {
        "properties": {
          "clusterFormSettings": {
            "$ref": "#/components/schemas/ClusterFormSettings"
          },
          "globalDefaultDeny": {
            "type": "boolean"
          },
          "istioGlobalDefaultDeny": {
            "type": "boolean"
          },
          "useAWSIAMInAccessGraphStates": {
            "type": "boolean"
          },
          "useAzureIAMInAccessGraphStates": {
            "type": "boolean"
          },
          "useDatabaseInAccessGraphStates": {
            "type": "boolean"
          },
          "useGCPIAMInAccessGraphStates": {
            "type": "boolean"
          },
          "useIstioPoliciesInAccessGraphStates": {
            "type": "boolean"
          },
          "useKafkaACLsInAccessGraphStates": {
            "type": "boolean"
          },
          "useNetworkPoliciesInAccessGraphStates": {
            "type": "boolean"
          }
        },
        "required": [
          "globalDefaultDeny",
          "istioGlobalDefaultDeny",
          "useNetworkPoliciesInAccessGraphStates",
          "useIstioPoliciesInAccessGraphStates",
          "useKafkaACLsInAccessGraphStates",
          "useAWSIAMInAccessGraphStates",
          "useGCPIAMInAccessGraphStates",
          "useAzureIAMInAccessGraphStates",
          "useDatabaseInAccessGraphStates",
          "clusterFormSettings"
        ],
        "type": "object"
      },
      "ClusterConfigurationInput": {
        "properties": {
          "clusterFormSettings": {
            "type": "object"
          },
          "globalDefaultDeny": {
            "type": "boolean"
          },
          "istioGlobalDefaultDeny": {
            "type": "boolean"
          },
          "useAWSIAMInAccessGraphStates": {
            "type": "boolean"
          },
          "useAzureIAMInAccessGraphStates": {
            "type": "boolean"
          },
          "useDatabaseInAccessGraphStates": {
            "type": "boolean"
          },
          "useGCPIAMInAccessGraphStates": {
            "type": "boolean"
          },
          "useIstioPoliciesInAccessGraphStates": {
            "type": "boolean"
          },
          "useKafkaACLsInAccessGraphStates": {
            "type": "boolean"
          },
          "useNetworkPoliciesInAccessGraphStates": {
            "type": "boolean"
          }
        },
        "required": [
          "globalDefaultDeny",
          "useNetworkPoliciesInAccessGraphStates",
          "useIstioPoliciesInAccessGraphStates",
          "useKafkaACLsInAccessGraphStates"
        ],
        "type": "object"
      },
      "ClusterFormSettings": {
        "properties": {
          "certificateProvider": {
            "enum": [
              "SPIRE",
              "CERT_MANAGER",
              "CLOUD",
              "NONE"
            ],
            "type": "string"
          },
          "enforcement": {
            "type": "boolean"
          }
        },
        "required": [
          "certificateProvider",
          "enforcement"
        ],
        "type": "object"
      },
      "ClusterFormSettingsInput": {
        "properties": {
          "certificateProvider": {
            "enum": [
              "SPIRE",
              "CERT_MANAGER",
              "CLOUD",
              "NONE"
            ],
            "type": "string"
          },
          "enforcement": {
            "type": "boolean"
          }
        },
        "required": [
          "certificateProvider",
          "enforcement"
        ],
        "type": "object"
      },
      "ComponentStatus": {
        "properties": {
          "lastSeen": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "enum": [
              "NOT_INTEGRATED",
              "CONNECTED",
              "DISCONNECTED"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "CreateGitHubIntegrationResponse": {
        "properties": {
          "integration": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "nextURL": {
            "type": "string"
          }
        },
        "required": [
          "integration",
          "nextURL"
        ],
        "type": "object"
      },
      "CreateGitLabIntegrationResponse": {
        "properties": {
          "integration": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "nextURL": {
            "type": "string"
          }
        },
        "required": [
          "integration",
          "nextURL"
        ],
        "type": "object"
      },
      "CreateSlackIntegrationResponse": {
        "properties": {
          "integration": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "nextURL": {
            "type": "string"
          }
        },
        "required": [
          "integration",
          "nextURL"
        ],
        "type": "object"
      },
      "CredentialsOperatorComponent": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ComponentStatus"
          },
          "type": {
            "enum": [
              "INTENTS_OPERATOR",
              "CREDENTIALS_OPERATOR",
              "NETWORK_MAPPER"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "status"
        ],
        "type": "object"
      },
      "DatabaseConfig": {
        "properties": {
          "dbname": {
            "type": "string"
          },
          "operations": {
            "items": {
              "enum": [
                "ALL",
                "SELECT",
                "INSERT",
                "UPDATE",
                "DELETE"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "table": {
            "type": "string"
          }
        },
        "required": [
          "dbname",
          "table"
        ],
        "type": "object"
      },
      "DatabaseInfo": {
        "properties": {
          "address": {
            "type": "string"
          },
          "databaseType": {
            "enum": [
              "POSTGRESQL",
              "MYSQL"
            ],
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "visibility": {
            "$ref": "#/components/schemas/DatabaseVisibilitySettings"
          }
        },
        "required": [
          "databaseType",
          "address",
          "username"
        ],
        "type": "object"
      },
      "DatabaseInfoInput": {
        "properties": {
          "address": {
            "type": "string"
          },
          "databaseType": {
            "enum": [
              "POSTGRESQL",
              "MYSQL"
            ],
            "type": "string"
          },
          "visibility": {
            "type": "object"
          }
        },
        "required": [
          "databaseType",
          "address"
        ],
        "type": "object"
      },
      "DatabaseVisibilitySettings": {
        "properties": {
          "gcpPubSub": {
            "$ref": "#/components/schemas/GCPPubSubLogConsumerSettings"
          },
          "source": {
            "enum": [
              "GCP_PUBSUB"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DatabaseVisibilitySettingsInput": {
        "properties": {
          "gcpPubSub": {
            "type": "object"
          },
          "source": {
            "enum": [
              "GCP_PUBSUB"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DetectedCloudServer": {
        "properties": {
          "cloudProvider": {
            "type": "string"
          },
          "cloudService": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "required": [
          "cloudProvider",
          "cloudService",
          "region"
        ],
        "type": "object"
      },
      "EdgeAccessStatus": {
        "properties": {
          "reason": {
            "enum": [
              "ALLOWED_BY_APPLIED_INTENTS",
              "ALLOWED_BY_APPLIED_INTENTS_OVERLY_PERMISSIVE",
              "ALLOWED_BY_APPLIED_INTENTS_HTTP_OVERLY_PERMISSIVE",
              "ALLOWED_BY_APPLIED_INTENTS_KAFKA_OVERLY_PERMISSIVE",
              "ALLOWED_BY_APPLIED_INTENTS_DATABASE_OVERLY_PERMISSIVE",
              "ALLOWED_BY_EXTERNAL_TRAFFIC_NETWORK_POLICY",
              "WOULD_BE_ALLOWED_BY_EXTERNAL_TRAFFIC_NETWORK_POLICY",
              "BLOCKED_BY_APPLIED_INTENTS_UNDER_PERMISSIVE",
              "BLOCKED_BY_APPLIED_INTENTS_RESOURCE_MISMATCH",
              "BLOCKED_BY_APPLIED_INTENTS_HTTP_UNDER_PERMISSIVE",
              "BLOCKED_BY_APPLIED_INTENTS_HTTP_RESOURCE_MISMATCH",
              "BLOCKED_BY_APPLIED_INTENTS_KAFKA_UNDER_PERMISSIVE",
              "BLOCKED_BY_APPLIED_INTENTS_KAFKA_RESOURCE_MISMATCH",
              "BLOCKED_BY_KAFKA_ENFORCEMENT_CONFIG_MISSING_APPLIED_INTENTS",
              "BLOCKED_BY_APPLIED_INTENTS_DATABASE_UNDER_PERMISSIVE",
              "BLOCKED_BY_APPLIED_INTENTS_DATABASE_RESOURCE_MISMATCH",
              "BLOCKED_BY_DATABASE_ENFORCEMENT_CONFIG_MISSING_APPLIED_INTENTS",
              "BLOCKED_BY_DEFAULT_DENY",
              "SHARED_SERVICE_ACCOUNT",
              "CLIENT_ISTIO_SIDECAR_MISSING",
              "SERVER_ISTIO_SIDECAR_MISSING",
              "INTENTS_OPERATOR_NOT_ENFORCING",
              "INTENTS_OPERATOR_NOT_ENFORCING_MISSING_APPLIED_INTENT",
              "INTENTS_OPERATOR_NOT_ENFORCING_KAFKA_INTENTS_NOT_REQUIRED_FOR_TOPIC",
              "MISSING_APPLIED_INTENT",
              "MISSING_APPLIED_CLOUD_RESOURCE_INTENT",
              "NOT_IN_PROTECTED_SERVICES",
              "INTENTS_OPERATOR_NEVER_CONNECTED",
              "NETWORK_MAPPER_NEVER_CONNECTED",
              "INTERNET_ACCESS_STATUS_UNKNOWN",
              "NO_INTENTS_FOUND_OF_RELEVANT_TYPE",
              "IGNORED_IN_CALCULATION",
              "INTERNET_INTENTS_ENFORCEMENT_DISABLED",
              "BLOCKED_BY_DEFAULT_DENY_MISSING_EXTERNAL_TRAFFIC_POLICY",
              "BLOCKED_BY_APPLIED_INTENTS_MISSING_EXTERNAL_TRAFFIC_POLICY",
              "ALLOWED_BY_EXTERNALLY_MANAGED_NETWORK_POLICY"
            ],
            "type": "string"
          },
          "reasons": {
            "items": {
              "enum": [
                "ALLOWED_BY_APPLIED_INTENTS",
                "ALLOWED_BY_APPLIED_INTENTS_OVERLY_PERMISSIVE",
                "ALLOWED_BY_APPLIED_INTENTS_HTTP_OVERLY_PERMISSIVE",
                "ALLOWED_BY_APPLIED_INTENTS_KAFKA_OVERLY_PERMISSIVE",
                "ALLOWED_BY_APPLIED_INTENTS_DATABASE_OVERLY_PERMISSIVE",
                "ALLOWED_BY_EXTERNAL_TRAFFIC_NETWORK_POLICY",
                "WOULD_BE_ALLOWED_BY_EXTERNAL_TRAFFIC_NETWORK_POLICY",
                "BLOCKED_BY_APPLIED_INTENTS_UNDER_PERMISSIVE",
                "BLOCKED_BY_APPLIED_INTENTS_RESOURCE_MISMATCH",
                "BLOCKED_BY_APPLIED_INTENTS_HTTP_UNDER_PERMISSIVE",
                "BLOCKED_BY_APPLIED_INTENTS_HTTP_RESOURCE_MISMATCH",
                "BLOCKED_BY_APPLIED_INTENTS_KAFKA_UNDER_PERMISSIVE",
                "BLOCKED_BY_APPLIED_INTENTS_KAFKA_RESOURCE_MISMATCH",
                "BLOCKED_BY_KAFKA_ENFORCEMENT_CONFIG_MISSING_APPLIED_INTENTS",
                "BLOCKED_BY_APPLIED_INTENTS_DATABASE_UNDER_PERMISSIVE",
                "BLOCKED_BY_APPLIED_INTENTS_DATABASE_RESOURCE_MISMATCH",
                "BLOCKED_BY_DATABASE_ENFORCEMENT_CONFIG_MISSING_APPLIED_INTENTS",
                "BLOCKED_BY_DEFAULT_DENY",
                "SHARED_SERVICE_ACCOUNT",
                "CLIENT_ISTIO_SIDECAR_MISSING",
                "SERVER_ISTIO_SIDECAR_MISSING",
                "INTENTS_OPERATOR_NOT_ENFORCING",
                "INTENTS_OPERATOR_NOT_ENFORCING_MISSING_APPLIED_INTENT",
                "INTENTS_OPERATOR_NOT_ENFORCING_KAFKA_INTENTS_NOT_REQUIRED_FOR_TOPIC",
                "MISSING_APPLIED_INTENT",
                "MISSING_APPLIED_CLOUD_RESOURCE_INTENT",
                "NOT_IN_PROTECTED_SERVICES",
                "INTENTS_OPERATOR_NEVER_CONNECTED",
                "NETWORK_MAPPER_NEVER_CONNECTED",
                "INTERNET_ACCESS_STATUS_UNKNOWN",
                "NO_INTENTS_FOUND_OF_RELEVANT_TYPE",
                "IGNORED_IN_CALCULATION",
                "INTERNET_INTENTS_ENFORCEMENT_DISABLED",
                "BLOCKED_BY_DEFAULT_DENY_MISSING_EXTERNAL_TRAFFIC_POLICY",
                "BLOCKED_BY_APPLIED_INTENTS_MISSING_EXTERNAL_TRAFFIC_POLICY",
                "ALLOWED_BY_EXTERNALLY_MANAGED_NETWORK_POLICY"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "useIstioPoliciesInAccessGraphStates": {
            "type": "boolean"
          },
          "useKafkaPoliciesInAccessGraphStates": {
            "type": "boolean"
          },
          "useNetworkPoliciesInAccessGraphStates": {
            "type": "boolean"
          },
          "verdict": {
            "enum": [
              "EXPLICITLY_ALLOWED",
              "IMPLICITLY_ALLOWED",
              "WOULD_BE_BLOCKED",
              "BLOCKED",
              "UNKNOWN"
            ],
            "type": "string"
          }
        },
        "required": [
          "useNetworkPoliciesInAccessGraphStates",
          "useIstioPoliciesInAccessGraphStates",
          "useKafkaPoliciesInAccessGraphStates",
          "verdict",
          "reason",
          "reasons"
        ],
        "type": "object"
      },
      "EdgeAccessStatuses": {
        "properties": {
          "awsIam": {
            "$ref": "#/components/schemas/EdgeAccessStatus"
          },
          "azureIAM": {
            "$ref": "#/components/schemas/EdgeAccessStatus"
          },
          "database": {
            "$ref": "#/components/schemas/EdgeAccessStatus"
          },
          "gcpIam": {
            "$ref": "#/components/schemas/EdgeAccessStatus"
          },
          "istioPolicies": {
            "$ref": "#/components/schemas/EdgeAccessStatus"
          },
          "kafkaACLs": {
            "$ref": "#/components/schemas/EdgeAccessStatus"
          },
          "networkPolicies": {
            "$ref": "#/components/schemas/EdgeAccessStatus"
          }
        },
        "required": [
          "networkPolicies",
          "kafkaACLs",
          "istioPolicies",
          "awsIam",
          "gcpIam",
          "azureIAM",
          "database"
        ],
        "type": "object"
      },
      "Environment": {
        "properties": {
          "appliedIntentsCount": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "namespaces": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "serviceCount": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "namespaces",
          "serviceCount",
          "appliedIntentsCount"
        ],
        "type": "object"
      },
      "Error": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "FeatureFlags": {
        "properties": {
          "isCloudSecurityEnabled": {
            "type": "boolean"
          },
          "isCloudServicesDetectionEnabled": {
            "type": "boolean"
          },
          "useClientIntentsV2": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GCPInfo": {
        "properties": {
          "gcpProjectName": {
            "type": "string"
          },
          "gkeClusterName": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "required": [
          "region",
          "namespace",
          "gcpProjectName",
          "gkeClusterName"
        ],
        "type": "object"
      },
      "GCPInfoInput": {
        "properties": {
          "clusterId": {
            "type": "string"
          },
          "gcpProjectName": {
            "type": "string"
          },
          "gkeClusterName": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "region": {
            "type": "string"
          }
        },
        "required": [
          "region",
          "namespace",
          "clusterId",
          "gcpProjectName",
          "gkeClusterName"
        ],
        "type": "object"
      },
      "GCPPubSubLogConsumerSettings": {
        "properties": {
          "projectId": {
            "type": "string"
          },
          "topic": {
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "topic"
        ],
        "type": "object"
      },
      "GCPPubSubLogConsumerSettingsInput": {
        "properties": {
          "projectId": {
            "type": "string"
          },
          "topic": {
            "type": "string"
          }
        },
        "required": [
          "projectId",
          "topic"
        ],
        "type": "object"
      },
      "GCPResource": {
        "properties": {
          "resource": {
            "type": "string"
          }
        },
        "required": [
          "resource"
        ],
        "type": "object"
      },
      "GitHubRepoFilterPair": {
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/IntegrationAccessGraphFilter"
          },
          "repoInfo": {
            "$ref": "#/components/schemas/GitHubRepoInfo"
          }
        },
        "required": [
          "filter",
          "repoInfo"
        ],
        "type": "object"
      },
      "GitHubRepoFilterPairInput": {
        "properties": {
          "filter": {
            "type": "object"
          },
          "repoInfo": {
            "type": "object"
          }
        },
        "required": [
          "filter",
          "repoInfo"
        ],
        "type": "object"
      },
      "GitHubRepoInfo": {
        "properties": {
          "baseBranch": {
            "type": "string"
          },
          "intentsPath": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          }
        },
        "required": [
          "repository",
          "baseBranch",
          "intentsPath"
        ],
        "type": "object"
      },
      "GitHubRepoInfoInput": {
        "properties": {
          "baseBranch": {
            "type": "string"
          },
          "intentsPath": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          }
        },
        "required": [
          "repository",
          "baseBranch",
          "intentsPath"
        ],
        "type": "object"
      },
      "GitHubSettings": {
        "properties": {
          "isActive": {
            "type": "boolean"
          },
          "repoFilterPairs": {
            "items": {
              "$ref": "#/components/schemas/GitHubRepoFilterPair"
            },
            "type": "array"
          }
        },
        "required": [
          "isActive",
          "repoFilterPairs"
        ],
        "type": "object"
      },
      "GitHubSettingsInput": {
        "properties": {
          "isActive": {
            "type": "boolean"
          },
          "repoFilterPairs": {
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "isActive",
          "repoFilterPairs"
        ],
        "type": "object"
      },
      "GitLabRepoFilterPair": {
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/IntegrationAccessGraphFilter"
          },
          "repoInfo": {
            "$ref": "#/components/schemas/GitLabRepoInfo"
          }
        },
        "required": [
          "filter",
          "repoInfo"
        ],
        "type": "object"
      },
      "GitLabRepoFilterPairInput": {
        "properties": {
          "filter": {
            "type": "object"
          },
          "repoInfo": {
            "type": "object"
          }
        },
        "required": [
          "filter",
          "repoInfo"
        ],
        "type": "object"
      },
      "GitLabRepoInfo": {
        "properties": {
          "baseBranch": {
            "type": "string"
          },
          "intentsPath": {
            "type": "string"
          },
          "projectPath": {
            "type": "string"
          }
        },
        "required": [
          "projectPath",
          "baseBranch",
          "intentsPath"
        ],
        "type": "object"
      },
      "GitLabRepoInfoInput": {
        "properties": {
          "baseBranch": {
            "type": "string"
          },
          "intentsPath": {
            "type": "string"
          },
          "projectPath": {
            "type": "string"
          }
        },
        "required": [
          "projectPath",
          "baseBranch",
          "intentsPath"
        ],
        "type": "object"
      },
      "GitLabSettings": {
        "properties": {
          "isActive": {
            "type": "boolean"
          },
          "repoFilterPairs": {
            "items": {
              "$ref": "#/components/schemas/GitLabRepoFilterPair"
            },
            "type": "array"
          }
        },
        "required": [
          "isActive",
          "repoFilterPairs"
        ],
        "type": "object"
      },
      "GitLabSettingsInput": {
        "properties": {
          "isActive": {
            "type": "boolean"
          },
          "repoFilterPairs": {
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "isActive",
          "repoFilterPairs"
        ],
        "type": "object"
      },
      "HTTPConfig": {
        "properties": {
          "methods": {
            "items": {
              "enum": [
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "OPTIONS",
                "TRACE",
                "PATCH",
                "CONNECT",
                "ALL"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "type": "object"
      },
      "IDFilterValue": {
        "properties": {
          "exclude": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "include": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InputAccessGraphFilter": {
        "properties": {
          "clusterIds": {
            "type": "object"
          },
          "environmentIds": {
            "type": "object"
          },
          "featureFlags": {
            "type": "object"
          },
          "includeOnlyClientsMatchingFilter": {
            "type": "boolean"
          },
          "lastSeen": {
            "type": "object"
          },
          "namespaceIds": {
            "type": "object"
          },
          "serviceIds": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "InputAccessLogFilter": {
        "description": " Access log filter ",
        "properties": {
          "accessStatusReasons": {
            "type": "object"
          },
          "accessVerdicts": {
            "type": "object"
          },
          "clusterIds": {
            "type": "object"
          },
          "environmentIds": {
            "type": "object"
          },
          "featureFlags": {
            "type": "object"
          },
          "namespaceIds": {
            "type": "object"
          },
          "pagination": {
            "type": "object"
          },
          "serviceIds": {
            "type": "object"
          },
          "timeRange": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "InputFeatureFlags": {
        "properties": {
          "isCloudSecurityEnabled": {
            "type": "boolean"
          },
          "isCloudServicesDetectionEnabled": {
            "type": "boolean"
          },
          "useClientIntentsV2": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "InputIDFilterValue": {
        "properties": {
          "exclude": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "include": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InputIntegrationAccessGraphFilter": {
        "properties": {
          "clusterFilterType": {
            "enum": [
              "INCLUDE",
              "EXCLUDE"
            ],
            "type": "string"
          },
          "clusterIds": {
            "items": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            },
            "type": "array"
          },
          "environmentFilterType": {
            "enum": [
              "INCLUDE",
              "EXCLUDE"
            ],
            "type": "string"
          },
          "environmentIds": {
            "items": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            },
            "type": "array"
          },
          "namespaceFilterType": {
            "enum": [
              "INCLUDE",
              "EXCLUDE"
            ],
            "type": "string"
          },
          "namespaceIds": {
            "items": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            },
            "type": "array"
          },
          "serviceFilterType": {
            "enum": [
              "INCLUDE",
              "EXCLUDE"
            ],
            "type": "string"
          },
          "serviceIds": {
            "items": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InputServiceFilter": {
        "description": " Service filter ",
        "properties": {
          "clusterIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "environmentIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "integrationIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "namespaceIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "search": {
            "type": "string"
          },
          "serviceIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "serviceType": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "InputTimeFilterValue": {
        "properties": {
          "operator": {
            "enum": [
              "AFTER"
            ],
            "type": "string"
          },
          "value": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "value",
          "operator"
        ],
        "type": "object"
      },
      "Integration": {
        "properties": {
          "awsInfo": {
            "$ref": "#/components/schemas/AWSInfo"
          },
          "awsVisibilitySettings": {
            "$ref": "#/components/schemas/AWSVisibilitySettings"
          },
          "azureInfo": {
            "$ref": "#/components/schemas/AzureInfo"
          },
          "cluster": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "components": {
            "$ref": "#/components/schemas/IntegrationComponents"
          },
          "credentials": {
            "$ref": "#/components/schemas/IntegrationCredentials"
          },
          "databaseInfo": {
            "$ref": "#/components/schemas/DatabaseInfo"
          },
          "defaultEnvironment": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "gcpInfo": {
            "$ref": "#/components/schemas/GCPInfo"
          },
          "gitHubSettings": {
            "$ref": "#/components/schemas/GitHubSettings"
          },
          "gitLabSettings": {
            "$ref": "#/components/schemas/GitLabSettings"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "slackSettings": {
            "$ref": "#/components/schemas/SlackSettings"
          },
          "status": {
            "$ref": "#/components/schemas/IntegrationStatus"
          },
          "type": {
            "enum": [
              "GENERIC",
              "KUBERNETES",
              "DATABASE",
              "AWS",
              "GCP",
              "GITHUB",
              "GITLAB",
              "AZURE",
              "SLACK",
              "AWS_VISIBILITY"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "credentials",
          "organizationId"
        ],
        "type": "object"
      },
      "IntegrationAccessGraphFilter": {
        "properties": {
          "clusterFilterType": {
            "enum": [
              "INCLUDE",
              "EXCLUDE"
            ],
            "type": "string"
          },
          "clusterIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "environmentFilterType": {
            "enum": [
              "INCLUDE",
              "EXCLUDE"
            ],
            "type": "string"
          },
          "environmentIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "lastSeenAfter": {
            "format": "date-time",
            "type": "string"
          },
          "namespaceFilterType": {
            "enum": [
              "INCLUDE",
              "EXCLUDE"
            ],
            "type": "string"
          },
          "namespaceIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "serviceFilterType": {
            "enum": [
              "INCLUDE",
              "EXCLUDE"
            ],
            "type": "string"
          },
          "serviceIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "IntegrationComponents": {
        "properties": {
          "credentialsOperator": {
            "$ref": "#/components/schemas/CredentialsOperatorComponent"
          },
          "intentsOperator": {
            "$ref": "#/components/schemas/IntentsOperatorComponent"
          },
          "networkMapper": {
            "$ref": "#/components/schemas/NetworkMapperComponent"
          }
        },
        "required": [
          "intentsOperator",
          "credentialsOperator",
          "networkMapper"
        ],
        "type": "object"
      },
      "IntegrationCredentials": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          }
        },
        "required": [
          "clientId",
          "clientSecret"
        ],
        "type": "object"
      },
      "IntegrationStatus": {
        "properties": {
          "lastSeen": {
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "items": {
              "$ref": "#/components/schemas/IntegrationStatusMetadataItem"
            },
            "type": "array"
          },
          "state": {
            "enum": [
              "SUCCESS",
              "FAILURE",
              "PENDING",
              "WARNING"
            ],
            "type": "string"
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      },
      "IntegrationStatusMetadataItem": {
        "properties": {
          "extra": {
            "items": {
              "$ref": "#/components/schemas/LabelValueTuple"
            },
            "type": "array"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "Intent": {
        "properties": {
          "awsActions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "azureActions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "azureDataActions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "azureKeyVaultPolicy": {
            "$ref": "#/components/schemas/AzureKeyVaultPolicy"
          },
          "azureRoles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "client": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "databaseResources": {
            "items": {
              "$ref": "#/components/schemas/DatabaseConfig"
            },
            "type": "array"
          },
          "gcpPermissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "httpResources": {
            "items": {
              "$ref": "#/components/schemas/HTTPConfig"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "internet": {
            "$ref": "#/components/schemas/InternetConfig"
          },
          "kafkaTopics": {
            "items": {
              "$ref": "#/components/schemas/KafkaConfig"
            },
            "type": "array"
          },
          "server": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "serverAlias": {
            "$ref": "#/components/schemas/ServerAlias"
          },
          "status": {
            "$ref": "#/components/schemas/IntentStatus"
          },
          "type": {
            "enum": [
              "HTTP",
              "KAFKA",
              "DATABASE",
              "AWS",
              "GCP",
              "AZURE",
              "S3",
              "INTERNET"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "server",
          "client"
        ],
        "type": "object"
      },
      "IntentStatus": {
        "properties": {
          "isClientMissingSidecar": {
            "type": "boolean"
          },
          "isServerMissingSidecar": {
            "type": "boolean"
          },
          "isServiceAccountShared": {
            "type": "boolean"
          },
          "serviceAccountName": {
            "type": "string"
          }
        },
        "required": [
          "serviceAccountName",
          "isServiceAccountShared",
          "isServerMissingSidecar",
          "isClientMissingSidecar"
        ],
        "type": "object"
      },
      "IntentsOperatorComponent": {
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/IntentsOperatorConfiguration"
          },
          "status": {
            "$ref": "#/components/schemas/ComponentStatus"
          },
          "type": {
            "enum": [
              "INTENTS_OPERATOR",
              "CREDENTIALS_OPERATOR",
              "NETWORK_MAPPER"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "status"
        ],
        "type": "object"
      },
      "IntentsOperatorConfiguration": {
        "properties": {
          "awsIAMPolicyEnforcementEnabled": {
            "type": "boolean"
          },
          "azureIAMPolicyEnforcementEnabled": {
            "type": "boolean"
          },
          "databaseEnforcementEnabled": {
            "type": "boolean"
          },
          "egressNetworkPolicyEnforcementEnabled": {
            "type": "boolean"
          },
          "enforcedNamespaces": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "gcpIAMPolicyEnforcementEnabled": {
            "type": "boolean"
          },
          "globalEnforcementEnabled": {
            "type": "boolean"
          },
          "istioPolicyEnforcementEnabled": {
            "type": "boolean"
          },
          "kafkaACLEnforcementEnabled": {
            "type": "boolean"
          },
          "networkPolicyEnforcementEnabled": {
            "type": "boolean"
          },
          "protectedServices": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "protectedServicesEnabled": {
            "type": "boolean"
          }
        },
        "required": [
          "globalEnforcementEnabled",
          "networkPolicyEnforcementEnabled",
          "kafkaACLEnforcementEnabled",
          "istioPolicyEnforcementEnabled",
          "awsIAMPolicyEnforcementEnabled",
          "gcpIAMPolicyEnforcementEnabled",
          "azureIAMPolicyEnforcementEnabled",
          "databaseEnforcementEnabled",
          "protectedServicesEnabled",
          "protectedServices",
          "egressNetworkPolicyEnforcementEnabled"
        ],
        "type": "object"
      },
      "InternetConfig": {
        "properties": {
          "appliedDomains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dnsName": {
            "type": "string"
          },
          "ips": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ports": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "required": [
          "dnsName"
        ],
        "type": "object"
      },
      "Invite": {
        "properties": {
          "acceptedAt": {
            "format": "date-time",
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inviter": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "organization": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "status": {
            "enum": [
              "PENDING",
              "ACCEPTED"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "organization",
          "inviter",
          "created",
          "status"
        ],
        "type": "object"
      },
      "KafkaConfig": {
        "properties": {
          "name": {
            "type": "string"
          },
          "operations": {
            "items": {
              "enum": [
                "ALL",
                "CONSUME",
                "PRODUCE",
                "CREATE",
                "ALTER",
                "DELETE",
                "DESCRIBE",
                "CLUSTER_ACTION",
                "DESCRIBE_CONFIGS",
                "ALTER_CONFIGS",
                "IDEMPOTENT_WRITE"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "KafkaServerConfig": {
        "properties": {
          "address": {
            "type": "string"
          },
          "topics": {
            "items": {
              "$ref": "#/components/schemas/KafkaTopic"
            },
            "type": "array"
          }
        },
        "required": [
          "topics"
        ],
        "type": "object"
      },
      "KafkaTopic": {
        "properties": {
          "clientIdentityRequired": {
            "type": "boolean"
          },
          "intentsRequired": {
            "type": "boolean"
          },
          "pattern": {
            "enum": [
              "LITERAL",
              "PREFIX"
            ],
            "type": "string"
          },
          "topic": {
            "type": "string"
          }
        },
        "required": [
          "clientIdentityRequired",
          "intentsRequired",
          "pattern",
          "topic"
        ],
        "type": "object"
      },
      "Label": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "LabelInput": {
        "properties": {
          "key": {
            "example": "label value",
            "format": "non-empty",
            "pattern": ".+",
            "type": "string"
          },
          "value": {
            "example": "label value",
            "format": "non-empty",
            "pattern": ".+",
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "LabelValueTuple": {
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "label",
          "value"
        ],
        "type": "object"
      },
      "Me": {
        "properties": {
          "invites": {
            "items": {
              "$ref": "#/components/schemas/Invite"
            },
            "type": "array"
          },
          "organizations": {
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array"
          },
          "user": {
            "$ref": "#/components/schemas/User",
            "description": "The logged-in user details."
          }
        },
        "required": [
          "user",
          "organizations",
          "invites"
        ],
        "type": "object"
      },
      "MergedYAMLFile": {
        "properties": {
          "content": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "rows": {
            "items": {
              "$ref": "#/components/schemas/ClientIntentsRow"
            },
            "type": "array"
          }
        },
        "required": [
          "fileName",
          "rows",
          "content"
        ],
        "type": "object"
      },
      "Namespace": {
        "properties": {
          "cluster": {
            "$ref": "#/components/schemas/Cluster"
          },
          "environment": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "serviceCount": {
            "format": "int32",
            "type": "integer"
          },
          "services": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "cluster",
          "environment",
          "services",
          "serviceCount"
        ],
        "type": "object"
      },
      "NamespaceFilterInput": {
        "properties": {
          "clusterIds": {
            "items": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            },
            "type": "array"
          },
          "environmentIds": {
            "items": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkMapperComponent": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ComponentStatus"
          },
          "type": {
            "enum": [
              "INTENTS_OPERATOR",
              "CREDENTIALS_OPERATOR",
              "NETWORK_MAPPER"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "status"
        ],
        "type": "object"
      },
      "Organization": {
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "imageURL": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/OrganizationSettings"
          }
        },
        "required": [
          "id",
          "name",
          "settings",
          "created"
        ],
        "type": "object"
      },
      "OrganizationSettings": {
        "properties": {
          "domains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enforcedRegulations": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ignoredCloudDomains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OrganizationSettingsInput": {
        "properties": {
          "domains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enforcedRegulations": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ignoredCloudDomains": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PaginationInput": {
        "properties": {
          "limit": {
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PaginationMeta": {
        "description": " Pagination types ",
        "properties": {
          "total": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ServerAlias": {
        "properties": {
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ServerBlockingStatus": {
        "properties": {
          "reason": {
            "enum": [
              "INTENTS_OPERATOR_NEVER_CONNECTED",
              "NETWORK_MAPPER_NEVER_CONNECTED",
              "INTENTS_IMPLICITLY_ALLOWED",
              "ALL_INTENTS_APPLIED",
              "MISSING_APPLIED_INTENTS",
              "INTENTS_OPERATOR_NOT_ENFORCING"
            ],
            "type": "string"
          },
          "verdict": {
            "enum": [
              "UNKNOWN",
              "NOT_BLOCKING",
              "WOULD_BLOCK",
              "BLOCKING"
            ],
            "type": "string"
          }
        },
        "required": [
          "verdict",
          "reason"
        ],
        "type": "object"
      },
      "ServerProtectionStatus": {
        "properties": {
          "reason": {
            "enum": [
              "INTENTS_OPERATOR_NEVER_CONNECTED",
              "INTENTS_OPERATOR_NOT_ENFORCING",
              "SERVER_HAS_NO_NETWORK_POLICY",
              "SERVER_HAS_NO_ISTIO_POLICY",
              "SERVER_HAS_NO_ISTIO_SIDECAR",
              "PROTECTED_BY_DEFAULT_DENY",
              "PROTECTED_BY_SERVER_NETWORK_POLICY",
              "PROTECTED_BY_SERVER_ISTIO_POLICY",
              "PROTECTED_BY_KAFKA_IDENTITY_REQUIRED_NO_INTENTS_REQUIRED",
              "PROTECTED_BY_KAFKA_INTENTS_REQUIRED",
              "SERVER_HAS_KAFKASERVERCONFIG_NO_ENFORCEMENT",
              "SERVER_HAS_NO_KAFKA_SERVER_CONFIG",
              "IGNORED_IN_CALCULATION",
              "PROTECTED_BY_DATABASE_INTEGRATION",
              "PROTECTED_BY_AWS_IAM_INTEGRATION",
              "PROTECTED_BY_INTERNET_INTENTS",
              "SERVER_EXTERNAL_ACCESS_POLICY_CREATED",
              "EXTERNALLY_MANAGED_POLICY_WORKLOAD"
            ],
            "type": "string"
          },
          "verdict": {
            "enum": [
              "UNKNOWN",
              "UNPROTECTED",
              "PROTECTED"
            ],
            "type": "string"
          }
        },
        "required": [
          "verdict",
          "reason"
        ],
        "type": "object"
      },
      "ServerProtectionStatuses": {
        "properties": {
          "istioPolicies": {
            "$ref": "#/components/schemas/ServerProtectionStatus"
          },
          "kafkaACLs": {
            "$ref": "#/components/schemas/ServerProtectionStatus"
          },
          "networkPolicies": {
            "$ref": "#/components/schemas/ServerProtectionStatus"
          }
        },
        "required": [
          "networkPolicies",
          "kafkaACLs",
          "istioPolicies"
        ],
        "type": "object"
      },
      "Service": {
        "properties": {
          "aliases": {
            "items": {
              "$ref": "#/components/schemas/ServerAlias"
            },
            "type": "array"
          },
          "awsResource": {
            "$ref": "#/components/schemas/AWSResource"
          },
          "awsVisibility": {
            "$ref": "#/components/schemas/AWSVisibility"
          },
          "azureResource": {
            "$ref": "#/components/schemas/AzureResource"
          },
          "certificateInformation": {
            "$ref": "#/components/schemas/CertificateInformation"
          },
          "databaseIntegration": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "detectedCloudServer": {
            "$ref": "#/components/schemas/DetectedCloudServer"
          },
          "discoveredByIntegration": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "environment": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "gcpResource": {
            "$ref": "#/components/schemas/GCPResource"
          },
          "id": {
            "type": "string"
          },
          "kafkaServerConfig": {
            "$ref": "#/components/schemas/KafkaServerConfig",
            "description": "If service is Kafka, its KafkaServerConfig."
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/Namespace"
          },
          "serviceAccount": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "workloadKind": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "environment"
        ],
        "type": "object"
      },
      "ServiceAccessGraph": {
        "properties": {
          "accessStatus": {
            "$ref": "#/components/schemas/ServiceAccessStatus"
          },
          "calls": {
            "items": {
              "$ref": "#/components/schemas/AccessGraphEdge"
            },
            "type": "array"
          },
          "serves": {
            "items": {
              "$ref": "#/components/schemas/AccessGraphEdge"
            },
            "type": "array"
          },
          "service": {
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "types": {
            "items": {
              "enum": [
                "NODE_GROUP",
                "PREFIX_GROUP",
                "KUBERNETES",
                "KAFKA",
                "AWS",
                "GCP",
                "AZURE",
                "DATABASE",
                "INTERNET",
                "DATABASE_USER",
                "KUBERNETES_LOAD_BALANCER",
                "AWS_VISIBILITY_EKS",
                "DETECTED_CLOUD_SERVER"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "service",
          "types",
          "accessStatus",
          "calls",
          "serves"
        ],
        "type": "object"
      },
      "ServiceAccessStatus": {
        "properties": {
          "blockingStatus": {
            "$ref": "#/components/schemas/ServerBlockingStatus"
          },
          "hasAppliedIntents": {
            "type": "boolean"
          },
          "protectionStatus": {
            "$ref": "#/components/schemas/ServerProtectionStatus"
          },
          "protectionStatuses": {
            "$ref": "#/components/schemas/ServerProtectionStatuses"
          },
          "useIstioPoliciesInAccessGraphStates": {
            "type": "boolean"
          },
          "useKafkaACLsInAccessGraphStates": {
            "type": "boolean"
          },
          "useNetworkPoliciesInAccessGraphStates": {
            "type": "boolean"
          }
        },
        "required": [
          "useNetworkPoliciesInAccessGraphStates",
          "useKafkaACLsInAccessGraphStates",
          "useIstioPoliciesInAccessGraphStates",
          "protectionStatus",
          "protectionStatuses",
          "blockingStatus",
          "hasAppliedIntents"
        ],
        "type": "object"
      },
      "ServiceClientIntents": {
        "properties": {
          "appliedIntentEvents": {
            "items": {
              "$ref": "#/components/schemas/ClientIntentEvent"
            },
            "type": "array"
          },
          "appliedIntentStatus": {
            "$ref": "#/components/schemas/ClientIntentStatus"
          },
          "asClient": {
            "$ref": "#/components/schemas/ClientIntentsFiles"
          },
          "asServer": {
            "$ref": "#/components/schemas/ClientIntentsFiles"
          }
        },
        "type": "object"
      },
      "ServicesResponse": {
        "properties": {
          "data": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "SlackChannelInfo": {
        "properties": {
          "channelName": {
            "type": "string"
          }
        },
        "required": [
          "channelName"
        ],
        "type": "object"
      },
      "SlackChannelIntegrationAlerts": {
        "properties": {
          "channelInfo": {
            "$ref": "#/components/schemas/SlackChannelInfo"
          }
        },
        "required": [
          "channelInfo"
        ],
        "type": "object"
      },
      "SlackChannelIntegrationAlertsInput": {
        "properties": {
          "channelInfo": {
            "type": "object"
          }
        },
        "required": [
          "channelInfo"
        ],
        "type": "object"
      },
      "SlackFilterPair": {
        "properties": {
          "channelInfo": {
            "$ref": "#/components/schemas/SlackChannelInfo"
          },
          "filter": {
            "$ref": "#/components/schemas/IntegrationAccessGraphFilter"
          }
        },
        "required": [
          "filter",
          "channelInfo"
        ],
        "type": "object"
      },
      "SlackFilterPairInput": {
        "properties": {
          "channelInfo": {
            "type": "object"
          },
          "filter": {
            "type": "object"
          }
        },
        "required": [
          "channelInfo"
        ],
        "type": "object"
      },
      "SlackSettings": {
        "properties": {
          "channelFilterPairs": {
            "items": {
              "$ref": "#/components/schemas/SlackFilterPair"
            },
            "type": "array"
          },
          "channelIntegrationAlerts": {
            "items": {
              "$ref": "#/components/schemas/SlackChannelIntegrationAlerts"
            },
            "type": "array"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "required": [
          "isActive",
          "channelFilterPairs"
        ],
        "type": "object"
      },
      "SlackSettingsInput": {
        "properties": {
          "channelFilterPairs": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "channelIntegrationAlerts": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "required": [
          "isActive",
          "channelFilterPairs"
        ],
        "type": "object"
      },
      "TimeFilterValue": {
        "properties": {
          "operator": {
            "enum": [
              "AFTER"
            ],
            "type": "string"
          },
          "value": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "value",
          "operator"
        ],
        "type": "object"
      },
      "TimeRange": {
        "properties": {
          "from": {
            "format": "date-time",
            "type": "string"
          },
          "to": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TimeRangeInput": {
        "properties": {
          "from": {
            "format": "date-time",
            "type": "string"
          },
          "to": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "User": {
        "properties": {
          "authProviderUserId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "imageURL": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "imageURL",
          "authProviderUserId"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "accessTokenCookie": {
        "description": "Otterize user JWT token. This session cookie is automatically set by logging in to Otterize Cloud.",
        "in": "cookie",
        "name": "access_token",
        "type": "apiKey"
      },
      "oauth2": {
        "description": "Use client ID and client secret from an Otterize integration to authenticate.",
        "flows": {
          "clientCredentials": {
            "scopes": {
            },
            "tokenUrl": "/api/auth/tokens/token"
          }
        },
        "type": "oauth2"
      },
      "organizationHeader": {
        "description": "Selected organization ID. Leave blank to auto-select the first organization for the current user.",
        "in": "header",
        "name": "X-Otterize-Organization",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "title": "Otterize API Server",
    "version": "v1beta",
    "x-revision": "282405d818bdec5386a77301294342aa9f697470"
  },
  "openapi": "3.0.0",
  "paths": {
    "/access-graph": {
      "post": {
        "description": "Get access graph",
        "operationId": "accessGraph_query",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filter": {
                    "$ref": "#/components/schemas/InputAccessGraphFilter"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessGraph"
                }
              }
            },
            "description": "Get access graph"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get access graph",
        "tags": [
          "access graph"
        ]
      }
    },
    "/access-graph/client-intents": {
      "post": {
        "description": " Get service ClientIntents by filter ",
        "operationId": "clientIntents_query",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "clusterIds": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "featureFlags": {
                    "$ref": "#/components/schemas/InputFeatureFlags"
                  },
                  "filter": {
                    "$ref": "#/components/schemas/InputServiceFilter"
                  },
                  "lastSeenAfter": {
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": [
                  "filter"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ClientIntentsFileRepresentation"
                  },
                  "type": "array"
                }
              }
            },
            "description": " Get service ClientIntents by filter "
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": " Get service ClientIntents by filter ",
        "tags": [
          "access graph"
        ]
      }
    },
    "/access-graph/service-client-intents/{id}": {
      "post": {
        "description": " Get service ClientIntents ",
        "operationId": "serviceClientIntents_query",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "asServiceId": {
                    "type": "string"
                  },
                  "clusterIds": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "enableInternetIntents": {
                    "type": "boolean"
                  },
                  "featureFlags": {
                    "$ref": "#/components/schemas/InputFeatureFlags"
                  },
                  "lastSeenAfter": {
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceClientIntents"
                }
              }
            },
            "description": " Get service ClientIntents "
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": " Get service ClientIntents ",
        "tags": [
          "access graph"
        ]
      }
    },
    "/access-log": {
      "post": {
        "description": "Get access log",
        "operationId": "accessLog_query",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filter": {
                    "$ref": "#/components/schemas/InputAccessLogFilter"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessLog"
                }
              }
            },
            "description": "Get access log"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get access log",
        "tags": [
          "access log"
        ]
      }
    },
    "/cluster": {
      "get": {
        "description": "Get cluster by filters",
        "operationId": "oneCluster_query",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "example": "Object name",
              "format": "custom-name",
              "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            },
            "description": "Get cluster by filters"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get cluster by filters",
        "tags": [
          "clusters"
        ]
      }
    },
    "/clusters": {
      "get": {
        "description": "List clusters",
        "operationId": "clusters_query",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "example": "Object name",
              "format": "custom-name",
              "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Cluster"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List clusters"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "List clusters",
        "tags": [
          "clusters"
        ]
      },
      "post": {
        "description": "Create cluster",
        "operationId": "createCluster_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            },
            "description": "Create cluster"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Create cluster",
        "tags": [
          "clusters"
        ]
      }
    },
    "/clusters/{id}": {
      "delete": {
        "description": "Delete cluster",
        "operationId": "deleteCluster_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Delete cluster"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Delete cluster",
        "tags": [
          "clusters"
        ]
      },
      "get": {
        "description": "Get cluster",
        "operationId": "cluster_query",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            },
            "description": "Get cluster"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get cluster",
        "tags": [
          "clusters"
        ]
      },
      "patch": {
        "description": "Update cluster",
        "operationId": "updateCluster_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "configuration": {
                    "$ref": "#/components/schemas/ClusterConfigurationInput"
                  },
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cluster"
                }
              }
            },
            "description": "Update cluster"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Update cluster",
        "tags": [
          "clusters"
        ]
      }
    },
    "/environment": {
      "get": {
        "description": "Get environment by filters",
        "operationId": "oneEnvironment_query",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "example": "Object name",
              "format": "custom-name",
              "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            },
            "description": "Get environment by filters"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get environment by filters",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments": {
      "get": {
        "description": "List environments",
        "operationId": "environments_query",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "example": "Object name",
              "format": "custom-name",
              "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
              "type": "string"
            }
          },
          {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LabelInput"
                  },
                  "type": "array"
                }
              }
            },
            "in": "query",
            "name": "labels",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Environment"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List environments"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "List environments",
        "tags": [
          "environments"
        ]
      },
      "post": {
        "description": "Create a new environment",
        "operationId": "createEnvironment_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "labels": {
                    "items": {
                      "$ref": "#/components/schemas/LabelInput"
                    },
                    "type": "array"
                  },
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            },
            "description": "Create a new environment"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Create a new environment",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{id}": {
      "delete": {
        "description": "Delete environment",
        "operationId": "deleteEnvironment_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Delete environment"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Delete environment",
        "tags": [
          "environments"
        ]
      },
      "get": {
        "description": "Get environment",
        "operationId": "environment_query",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            },
            "description": "Get environment"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get environment",
        "tags": [
          "environments"
        ]
      },
      "patch": {
        "description": "Update environment",
        "operationId": "updateEnvironment_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "labels": {
                    "items": {
                      "$ref": "#/components/schemas/LabelInput"
                    },
                    "type": "array"
                  },
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            },
            "description": "Update environment"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Update environment",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{id}/labels": {
      "post": {
        "description": "Add label to environment",
        "operationId": "addEnvironmentLabel_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "label": {
                    "$ref": "#/components/schemas/LabelInput"
                  }
                },
                "required": [
                  "label"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            },
            "description": "Add label to environment"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Add label to environment",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{id}/labels/{key}": {
      "delete": {
        "description": "Remove label from environment",
        "operationId": "deleteEnvironmentLabel_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "example": "label value",
              "format": "non-empty",
              "pattern": ".+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            },
            "description": "Remove label from environment"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Remove label from environment",
        "tags": [
          "environments"
        ]
      }
    },
    "/integration": {
      "get": {
        "description": "Get integration by filters",
        "operationId": "oneIntegration_query",
        "parameters": [
          {
            "in": "query",
            "name": "integrationType",
            "required": false,
            "schema": {
              "enum": [
                "GENERIC",
                "KUBERNETES",
                "DATABASE",
                "AWS",
                "GCP",
                "GITHUB",
                "GITLAB",
                "AZURE",
                "SLACK",
                "AWS_VISIBILITY"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "environmentId",
            "required": false,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clusterId",
            "required": false,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "example": "Object name",
              "format": "custom-name",
              "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Get integration by filters"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get integration by filters",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations": {
      "get": {
        "description": "List integrations",
        "operationId": "integrations_query",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "example": "Object name",
              "format": "custom-name",
              "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "integrationType",
            "required": false,
            "schema": {
              "enum": [
                "GENERIC",
                "KUBERNETES",
                "DATABASE",
                "AWS",
                "GCP",
                "GITHUB",
                "GITLAB",
                "AZURE",
                "SLACK",
                "AWS_VISIBILITY"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "environmentId",
            "required": false,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clusterId",
            "required": false,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List integrations"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "List integrations",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations/aws": {
      "patch": {
        "description": "Update AWS integration",
        "operationId": "updateAWSIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "awsIntegration": {
                    "$ref": "#/components/schemas/AWSInfoInput"
                  },
                  "environmentId": {
                    "example": "obj_12345",
                    "format": "id",
                    "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
                    "type": "string"
                  },
                  "id": {
                    "example": "obj_12345",
                    "format": "id",
                    "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
                    "type": "string"
                  },
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Update AWS integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Update AWS integration",
        "tags": [
          "integrations"
        ]
      },
      "post": {
        "description": "Create a new AWS integration",
        "operationId": "createAWSIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "awsIntegration": {
                    "$ref": "#/components/schemas/AWSInfoInput"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "awsIntegration"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Create a new AWS integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Create a new AWS integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations/aws-metadata": {
      "patch": {
        "description": "Update an AWS Visibility integration",
        "operationId": "updateAwsVisibilityIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "awsVisibilitySettings": {
                    "$ref": "#/components/schemas/AWSVisibilitySettingsInput"
                  },
                  "id": {
                    "example": "obj_12345",
                    "format": "id",
                    "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
                    "type": "string"
                  },
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Update an AWS Visibility integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Update an AWS Visibility integration",
        "tags": [
          "integrations"
        ]
      },
      "post": {
        "description": "Create a new AWS Visibility integration",
        "operationId": "createAwsVisibilityIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "awsVisibilitySettings": {
                    "$ref": "#/components/schemas/AWSVisibilitySettingsInput"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "awsVisibilitySettings"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Create a new AWS Visibility integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Create a new AWS Visibility integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations/azure": {
      "patch": {
        "description": "Update Azure integration",
        "operationId": "updateAzureIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "azureIntegration": {
                    "$ref": "#/components/schemas/AzureInfoInput"
                  },
                  "id": {
                    "example": "obj_12345",
                    "format": "id",
                    "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
                    "type": "string"
                  },
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Update Azure integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Update Azure integration",
        "tags": [
          "integrations"
        ]
      },
      "post": {
        "description": "Create a new Azure integration",
        "operationId": "createAzureIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "azureIntegration": {
                    "$ref": "#/components/schemas/AzureInfoInput"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "azureIntegration"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Create a new Azure integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Create a new Azure integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations/database": {
      "post": {
        "description": "",
        "operationId": "createDatabaseIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "databaseInfo": {
                    "$ref": "#/components/schemas/DatabaseInfoInput"
                  },
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "databaseInfo"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": ""
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations/database/{id}": {
      "patch": {
        "description": "Update Database integration",
        "operationId": "updateDatabaseIntegration_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "databaseInfo": {
                    "$ref": "#/components/schemas/DatabaseInfoInput"
                  },
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Update Database integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Update Database integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations/gcp": {
      "patch": {
        "description": "Update GCP integration",
        "operationId": "updateGCPIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "gcpIntegration": {
                    "$ref": "#/components/schemas/GCPInfoInput"
                  },
                  "id": {
                    "example": "obj_12345",
                    "format": "id",
                    "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
                    "type": "string"
                  },
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Update GCP integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Update GCP integration",
        "tags": [
          "integrations"
        ]
      },
      "post": {
        "description": "Create a new GCP integration",
        "operationId": "createGCPIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "gcpIntegration": {
                    "$ref": "#/components/schemas/GCPInfoInput"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "gcpIntegration"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Create a new GCP integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Create a new GCP integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations/generic": {
      "post": {
        "description": "Create a new generic integration",
        "operationId": "createGenericIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Create a new generic integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Create a new generic integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations/generic/{id}": {
      "patch": {
        "description": "Update Generic integration",
        "operationId": "updateGenericIntegration_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Update Generic integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Update Generic integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations/github": {
      "patch": {
        "description": "Update GitHub integration",
        "operationId": "updateGitHubIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "gitHubSettings": {
                    "$ref": "#/components/schemas/GitHubSettingsInput"
                  },
                  "id": {
                    "example": "obj_12345",
                    "format": "id",
                    "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
                    "type": "string"
                  },
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "name",
                  "gitHubSettings"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Update GitHub integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Update GitHub integration",
        "tags": [
          "integrations"
        ]
      },
      "post": {
        "description": "Create a new GitHub integration",
        "operationId": "createGitHubIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "gitHubSettings": {
                    "$ref": "#/components/schemas/GitHubSettingsInput"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "gitHubSettings"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGitHubIntegrationResponse"
                }
              }
            },
            "description": "Create a new GitHub integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Create a new GitHub integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations/gitlab": {
      "patch": {
        "description": "Update GitLab integration",
        "operationId": "updateGitLabIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "gitLabSettings": {
                    "$ref": "#/components/schemas/GitLabSettingsInput"
                  },
                  "id": {
                    "example": "obj_12345",
                    "format": "id",
                    "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
                    "type": "string"
                  },
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "name",
                  "gitLabSettings"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Update GitLab integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Update GitLab integration",
        "tags": [
          "integrations"
        ]
      },
      "post": {
        "description": "Create a new GitLab integration",
        "operationId": "createGitLabIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "gitLabSettings": {
                    "$ref": "#/components/schemas/GitLabSettingsInput"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "gitLabSettings"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGitLabIntegrationResponse"
                }
              }
            },
            "description": "Create a new GitLab integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Create a new GitLab integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations/kubernetes": {
      "post": {
        "description": "Create a new Kubernetes integration",
        "operationId": "createKubernetesIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "environmentId": {
                    "example": "obj_12345",
                    "format": "id",
                    "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
                    "type": "string"
                  },
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "required": [
                  "environmentId",
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Create a new Kubernetes integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Create a new Kubernetes integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations/kubernetes/{id}": {
      "patch": {
        "description": "Update Kubernetes integration",
        "operationId": "updateKubernetesIntegration_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "environmentId": {
                    "example": "obj_12345",
                    "format": "id",
                    "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
                    "type": "string"
                  },
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Update Kubernetes integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Update Kubernetes integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations/slack": {
      "patch": {
        "description": "Update a Slack integration",
        "operationId": "updateSlackIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "example": "obj_12345",
                    "format": "id",
                    "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "slackSettings": {
                    "$ref": "#/components/schemas/SlackSettingsInput"
                  }
                },
                "required": [
                  "id",
                  "name",
                  "slackSettings"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Update a Slack integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Update a Slack integration",
        "tags": [
          "integrations"
        ]
      },
      "post": {
        "description": "Create a new Slack integration",
        "operationId": "createSlackIntegration_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "slackSettings": {
                    "$ref": "#/components/schemas/SlackSettingsInput"
                  }
                },
                "required": [
                  "name",
                  "slackSettings"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSlackIntegrationResponse"
                }
              }
            },
            "description": "Create a new Slack integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Create a new Slack integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/integrations/{id}": {
      "delete": {
        "description": "Delete integration",
        "operationId": "deleteIntegration_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Delete integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Delete integration",
        "tags": [
          "integrations"
        ]
      },
      "get": {
        "description": "Get integration",
        "operationId": "integration_query",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": "Get integration"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/invite": {
      "get": {
        "description": "Get one user invite",
        "operationId": "oneInvite_query",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "format": "email",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "PENDING",
                "ACCEPTED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            },
            "description": "Get one user invite"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get one user invite",
        "tags": [
          "invites"
        ]
      }
    },
    "/invites": {
      "get": {
        "description": "List user invites",
        "operationId": "invites_query",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "format": "email",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "PENDING",
                "ACCEPTED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Invite"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List user invites"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "List user invites",
        "tags": [
          "invites"
        ]
      },
      "post": {
        "description": "Create user invite",
        "operationId": "createInvite_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "format": "email",
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            },
            "description": "Create user invite"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Create user invite",
        "tags": [
          "invites"
        ]
      }
    },
    "/invites/{id}": {
      "delete": {
        "description": "Delete user invite",
        "operationId": "deleteInvite_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Delete user invite"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Delete user invite",
        "tags": [
          "invites"
        ]
      },
      "get": {
        "description": "Get user invite",
        "operationId": "invite_query",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            },
            "description": "Get user invite"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get user invite",
        "tags": [
          "invites"
        ]
      },
      "patch": {
        "description": "Accept user invite",
        "operationId": "acceptInvite_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            },
            "description": "Accept user invite"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Accept user invite",
        "tags": [
          "invites"
        ]
      }
    },
    "/me": {
      "get": {
        "description": "Get information regarding the current logged-in user",
        "operationId": "me_query",
        "parameters": [
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Me"
                }
              }
            },
            "description": "Get information regarding the current logged-in user"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get information regarding the current logged-in user",
        "tags": [
          "me"
        ]
      }
    },
    "/namespace": {
      "get": {
        "description": "Get one namespace",
        "operationId": "oneNamespace_query",
        "parameters": [
          {
            "in": "query",
            "name": "environmentId",
            "required": false,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clusterId",
            "required": false,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "example": "objects-name",
              "format": "k8s-name",
              "pattern": "^[a-z0-9][a-z0-9-_.]{0,252}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            },
            "description": "Get one namespace"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get one namespace",
        "tags": [
          "namespaces"
        ]
      }
    },
    "/namespaces": {
      "get": {
        "description": "List namespaces",
        "operationId": "namespaces_query",
        "parameters": [
          {
            "in": "query",
            "name": "environmentId",
            "required": false,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clusterId",
            "required": false,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "example": "objects-name",
              "format": "k8s-name",
              "pattern": "^[a-z0-9][a-z0-9-_.]{0,252}$",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/NamespaceFilterInput"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Namespace"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List namespaces"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "List namespaces",
        "tags": [
          "namespaces"
        ]
      }
    },
    "/namespaces/{id}": {
      "get": {
        "description": "Get namespace",
        "operationId": "namespace_query",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            },
            "description": "Get namespace"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get namespace",
        "tags": [
          "namespaces"
        ]
      }
    },
    "/namespaces/{id}/environment": {
      "put": {
        "description": "Associate namespace to environment",
        "operationId": "associateNamespaceToEnv_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "environmentId": {
                    "example": "obj_12345",
                    "format": "id",
                    "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Namespace"
                }
              }
            },
            "description": "Associate namespace to environment"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Associate namespace to environment",
        "tags": [
          "namespaces"
        ]
      }
    },
    "/organizations": {
      "get": {
        "description": "List organizations",
        "operationId": "organizations_query",
        "parameters": [
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List organizations"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "List organizations",
        "tags": [
          "organizations"
        ]
      },
      "post": {
        "description": "Create a new organization",
        "operationId": "createOrganization_mutation",
        "parameters": [
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "Create a new organization"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Create a new organization",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{id}": {
      "get": {
        "description": "Get organization",
        "operationId": "organization_query",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "Get organization"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get organization",
        "tags": [
          "organizations"
        ]
      },
      "patch": {
        "description": "Update organization",
        "operationId": "updateOrganization_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "imageURL": {
                    "format": "omitempty,url",
                    "type": "string"
                  },
                  "name": {
                    "example": "Object name",
                    "format": "custom-name",
                    "pattern": "^[A-Za-z][A-Za-z0-9- _]{0,61}[A-Za-z0-9]$",
                    "type": "string"
                  },
                  "settings": {
                    "$ref": "#/components/schemas/OrganizationSettingsInput"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "Update organization"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Update organization",
        "tags": [
          "organizations"
        ]
      }
    },
    "/organizations/{id}/users/{userId}": {
      "delete": {
        "description": "Remove user from organization",
        "operationId": "removeUserFromOrganization_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Remove user from organization"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Remove user from organization",
        "tags": [
          "organizations"
        ]
      }
    },
    "/paginate-services": {
      "get": {
        "description": "Paginate services",
        "operationId": "paginateServices_query",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/InputServiceFilter"
            }
          },
          {
            "in": "query",
            "name": "pagination",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PaginationInput"
            }
          },
          {
            "in": "query",
            "name": "featureFlags",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/InputFeatureFlags"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesResponse"
                }
              }
            },
            "description": "Paginate services"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Paginate services",
        "tags": [
          "services"
        ]
      }
    },
    "/ping": {
      "get": {
        "description": "Checks the availability of the API server",
        "operationId": "ping_query",
        "parameters": [
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Checks the availability of the API server"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Checks the availability of the API server",
        "tags": [
          "health"
        ]
      }
    },
    "/service": {
      "get": {
        "description": "Get service by filters",
        "operationId": "oneService_query",
        "parameters": [
          {
            "in": "query",
            "name": "environmentId",
            "required": false,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespaceId",
            "required": false,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "example": "objects-name",
              "format": "k8s-name",
              "pattern": "^[a-z0-9][a-z0-9-_.]{0,252}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            },
            "description": "Get service by filters"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get service by filters",
        "tags": [
          "services"
        ]
      }
    },
    "/services": {
      "get": {
        "description": "List services",
        "operationId": "services_query",
        "parameters": [
          {
            "in": "query",
            "name": "environmentId",
            "required": false,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "namespaceId",
            "required": false,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "example": "objects-name",
              "format": "k8s-name",
              "pattern": "^[a-z0-9][a-z0-9-_.]{0,252}$",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/InputServiceFilter"
            }
          },
          {
            "in": "query",
            "name": "featureFlags",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/InputFeatureFlags"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List services"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "List services",
        "tags": [
          "services"
        ]
      }
    },
    "/services/{id}": {
      "get": {
        "description": "Get service",
        "operationId": "service_query",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            },
            "description": "Get service"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get service",
        "tags": [
          "services"
        ]
      },
      "patch": {
        "description": "Update service",
        "operationId": "updateService_mutation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            },
            "description": "Update service"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Update service",
        "tags": [
          "services"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "List users",
        "operationId": "users_query",
        "parameters": [
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List users"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "List users",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Get user",
        "operationId": "user_query",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "obj_12345",
              "format": "id",
              "pattern": "^[A-Za-z_]+_[a-z0-9]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Get user"
          },
          "400": {
            "$ref": "#/components/responses/APPLIED_INTENTS_ERROR"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/FORBIDDEN"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "$ref": "#/components/responses/CONFLICT"
          },
          "422": {
            "$ref": "#/components/responses/BAD_USER_INPUT"
          },
          "500": {
            "$ref": "#/components/responses/INTERNAL_SERVER_ERROR"
          },
          "default": {
            "$ref": "#/components/responses/UNEXPECTED_ERROR"
          }
        },
        "summary": "Get user",
        "tags": [
          "users"
        ]
      }
    }
  },
  "security": [
    {
      "oauth2": [
      ]
    },
    {
      "accessTokenCookie": [
      ],
      "organizationHeader": [
      ]
    }
  ],
  "servers": [
    {
      "description": "Otterize API Server",
      "url": "/api/rest/v1beta"
    }
  ],
  "tags": [
  ]
}