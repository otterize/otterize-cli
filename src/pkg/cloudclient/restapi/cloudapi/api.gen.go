// Package cloudapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package cloudapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	AccessTokenCookieScopes  = "accessTokenCookie.Scopes"
	Oauth2Scopes             = "oauth2.Scopes"
	OrganizationHeaderScopes = "organizationHeader.Scopes"
)

// Defines values for AWSResourceType.
const (
	AWSResourceTypeGENERAL AWSResourceType = "GENERAL"
	AWSResourceTypeS3      AWSResourceType = "S3"
)

// Defines values for AWSVisibilityResourceType.
const (
	EKS AWSVisibilityResourceType = "EKS"
)

// Defines values for CallFindingCode.
const (
	CallFindingCodePCI40                                 CallFindingCode = "PCI_4_0"
	CallFindingCodePCI4011                               CallFindingCode = "PCI_4_0_1_1"
	CallFindingCodePCI40112                              CallFindingCode = "PCI_4_0_1_1_2"
	CallFindingCodePCI40114                              CallFindingCode = "PCI_4_0_1_1_4"
	CallFindingCodePCI40116                              CallFindingCode = "PCI_4_0_1_1_6"
	CallFindingCodePCI4012                               CallFindingCode = "PCI_4_0_1_2"
	CallFindingCodePCI40121                              CallFindingCode = "PCI_4_0_1_2_1"
	CallFindingCodePCI4013                               CallFindingCode = "PCI_4_0_1_3"
	CallFindingCodePCI40134                              CallFindingCode = "PCI_4_0_1_3_4"
	CallFindingCodePCI40136                              CallFindingCode = "PCI_4_0_1_3_6"
	CallFindingCodePCI4071                               CallFindingCode = "PCI_4_0_7_1"
	CallFindingCodePCI4072                               CallFindingCode = "PCI_4_0_7_2"
	CallFindingCodePCI4087                               CallFindingCode = "PCI_4_0_8_7"
	CallFindingCodeTHREATINTELLIGENCE                    CallFindingCode = "THREAT_INTELLIGENCE"
	CallFindingCodeTHREATINTELLIGENCEKNOWNIOCS           CallFindingCode = "THREAT_INTELLIGENCE_KNOWN_IOCS"
	CallFindingCodeZEROTRUST                             CallFindingCode = "ZERO_TRUST"
	CallFindingCodeZEROTRUSTALLINTRACLUSTERACCESSCOVERED CallFindingCode = "ZERO_TRUST_ALL_INTRA_CLUSTER_ACCESS_COVERED"
	CallFindingCodeZEROTRUSTDEFAULTDENY                  CallFindingCode = "ZERO_TRUST_DEFAULT_DENY"
	CallFindingCodeZEROTRUSTEGRESSACCESSCOVERED          CallFindingCode = "ZERO_TRUST_EGRESS_ACCESS_COVERED"
	CallFindingCodeZEROTRUSTEXTERNALINGRESSTAGGED        CallFindingCode = "ZERO_TRUST_EXTERNAL_INGRESS_TAGGED"
	CallFindingCodeZEROTRUSTSENSITIVE                    CallFindingCode = "ZERO_TRUST_SENSITIVE"
)

// Defines values for CallFindingStandard.
const (
	CallFindingStandardHIPAA              CallFindingStandard = "HIPAA"
	CallFindingStandardPCI40              CallFindingStandard = "PCI_4_0"
	CallFindingStandardPII                CallFindingStandard = "PII"
	CallFindingStandardTHREATINTELLIGENCE CallFindingStandard = "THREAT_INTELLIGENCE"
	CallFindingStandardZEROTRUST          CallFindingStandard = "ZERO_TRUST"
)

// Defines values for ClientIntentsRowDiff.
const (
	ADDED   ClientIntentsRowDiff = "ADDED"
	REMOVED ClientIntentsRowDiff = "REMOVED"
)

// Defines values for ClusterFormSettingsCertificateProvider.
const (
	CERTMANAGER ClusterFormSettingsCertificateProvider = "CERT_MANAGER"
	CLOUD       ClusterFormSettingsCertificateProvider = "CLOUD"
	NONE        ClusterFormSettingsCertificateProvider = "NONE"
	SPIRE       ClusterFormSettingsCertificateProvider = "SPIRE"
)

// Defines values for ComponentStatusType.
const (
	CONNECTED     ComponentStatusType = "CONNECTED"
	DISCONNECTED  ComponentStatusType = "DISCONNECTED"
	NOTINTEGRATED ComponentStatusType = "NOT_INTEGRATED"
)

// Defines values for CredentialsOperatorComponentType.
const (
	CredentialsOperatorComponentTypeCREDENTIALSOPERATOR CredentialsOperatorComponentType = "CREDENTIALS_OPERATOR"
	CredentialsOperatorComponentTypeINTENTSOPERATOR     CredentialsOperatorComponentType = "INTENTS_OPERATOR"
	CredentialsOperatorComponentTypeNETWORKMAPPER       CredentialsOperatorComponentType = "NETWORK_MAPPER"
)

// Defines values for DatabaseInfoDatabaseType.
const (
	DatabaseInfoDatabaseTypeMYSQL      DatabaseInfoDatabaseType = "MYSQL"
	DatabaseInfoDatabaseTypePOSTGRESQL DatabaseInfoDatabaseType = "POSTGRESQL"
)

// Defines values for DatabaseInfoInputDatabaseType.
const (
	DatabaseInfoInputDatabaseTypeMYSQL      DatabaseInfoInputDatabaseType = "MYSQL"
	DatabaseInfoInputDatabaseTypePOSTGRESQL DatabaseInfoInputDatabaseType = "POSTGRESQL"
)

// Defines values for DatabaseVisibilitySettingsSource.
const (
	GCPPUBSUB DatabaseVisibilitySettingsSource = "GCP_PUBSUB"
)

// Defines values for DefaultIntentsApprovalActionByEnvAction.
const (
	AUTOAPPROVE     DefaultIntentsApprovalActionByEnvAction = "AUTO_APPROVE"
	AUTODENY        DefaultIntentsApprovalActionByEnvAction = "AUTO_DENY"
	REQUIREAPPROVAL DefaultIntentsApprovalActionByEnvAction = "REQUIRE_APPROVAL"
)

// Defines values for EdgeAccessStatusReason.
const (
	EdgeAccessStatusReasonALLOWEDBYAPPLIEDINTENTS                                    EdgeAccessStatusReason = "ALLOWED_BY_APPLIED_INTENTS"
	EdgeAccessStatusReasonALLOWEDBYAPPLIEDINTENTSDATABASEOVERLYPERMISSIVE            EdgeAccessStatusReason = "ALLOWED_BY_APPLIED_INTENTS_DATABASE_OVERLY_PERMISSIVE"
	EdgeAccessStatusReasonALLOWEDBYAPPLIEDINTENTSHTTPOVERLYPERMISSIVE                EdgeAccessStatusReason = "ALLOWED_BY_APPLIED_INTENTS_HTTP_OVERLY_PERMISSIVE"
	EdgeAccessStatusReasonALLOWEDBYAPPLIEDINTENTSKAFKAOVERLYPERMISSIVE               EdgeAccessStatusReason = "ALLOWED_BY_APPLIED_INTENTS_KAFKA_OVERLY_PERMISSIVE"
	EdgeAccessStatusReasonALLOWEDBYAPPLIEDINTENTSOVERLYPERMISSIVE                    EdgeAccessStatusReason = "ALLOWED_BY_APPLIED_INTENTS_OVERLY_PERMISSIVE"
	EdgeAccessStatusReasonALLOWEDBYEXTERNALLYMANAGEDNETWORKPOLICY                    EdgeAccessStatusReason = "ALLOWED_BY_EXTERNALLY_MANAGED_NETWORK_POLICY"
	EdgeAccessStatusReasonALLOWEDBYEXTERNALTRAFFICNETWORKPOLICY                      EdgeAccessStatusReason = "ALLOWED_BY_EXTERNAL_TRAFFIC_NETWORK_POLICY"
	EdgeAccessStatusReasonALLOWEDBYMETRICSCOLLECTIONTRAFFICNETWORKPOLICY             EdgeAccessStatusReason = "ALLOWED_BY_METRICS_COLLECTION_TRAFFIC_NETWORK_POLICY"
	EdgeAccessStatusReasonBLOCKEDBYAPPLIEDINTENTSDATABASERESOURCEMISMATCH            EdgeAccessStatusReason = "BLOCKED_BY_APPLIED_INTENTS_DATABASE_RESOURCE_MISMATCH"
	EdgeAccessStatusReasonBLOCKEDBYAPPLIEDINTENTSDATABASEUNDERPERMISSIVE             EdgeAccessStatusReason = "BLOCKED_BY_APPLIED_INTENTS_DATABASE_UNDER_PERMISSIVE"
	EdgeAccessStatusReasonBLOCKEDBYAPPLIEDINTENTSHTTPRESOURCEMISMATCH                EdgeAccessStatusReason = "BLOCKED_BY_APPLIED_INTENTS_HTTP_RESOURCE_MISMATCH"
	EdgeAccessStatusReasonBLOCKEDBYAPPLIEDINTENTSHTTPUNDERPERMISSIVE                 EdgeAccessStatusReason = "BLOCKED_BY_APPLIED_INTENTS_HTTP_UNDER_PERMISSIVE"
	EdgeAccessStatusReasonBLOCKEDBYAPPLIEDINTENTSKAFKARESOURCEMISMATCH               EdgeAccessStatusReason = "BLOCKED_BY_APPLIED_INTENTS_KAFKA_RESOURCE_MISMATCH"
	EdgeAccessStatusReasonBLOCKEDBYAPPLIEDINTENTSKAFKAUNDERPERMISSIVE                EdgeAccessStatusReason = "BLOCKED_BY_APPLIED_INTENTS_KAFKA_UNDER_PERMISSIVE"
	EdgeAccessStatusReasonBLOCKEDBYAPPLIEDINTENTSMISSINGEXTERNALTRAFFICPOLICY        EdgeAccessStatusReason = "BLOCKED_BY_APPLIED_INTENTS_MISSING_EXTERNAL_TRAFFIC_POLICY"
	EdgeAccessStatusReasonBLOCKEDBYAPPLIEDINTENTSRESOURCEMISMATCH                    EdgeAccessStatusReason = "BLOCKED_BY_APPLIED_INTENTS_RESOURCE_MISMATCH"
	EdgeAccessStatusReasonBLOCKEDBYAPPLIEDINTENTSUNDERPERMISSIVE                     EdgeAccessStatusReason = "BLOCKED_BY_APPLIED_INTENTS_UNDER_PERMISSIVE"
	EdgeAccessStatusReasonBLOCKEDBYDATABASEENFORCEMENTCONFIGMISSINGAPPLIEDINTENTS    EdgeAccessStatusReason = "BLOCKED_BY_DATABASE_ENFORCEMENT_CONFIG_MISSING_APPLIED_INTENTS"
	EdgeAccessStatusReasonBLOCKEDBYDEFAULTDENY                                       EdgeAccessStatusReason = "BLOCKED_BY_DEFAULT_DENY"
	EdgeAccessStatusReasonBLOCKEDBYDEFAULTDENYMISSINGEXTERNALTRAFFICPOLICY           EdgeAccessStatusReason = "BLOCKED_BY_DEFAULT_DENY_MISSING_EXTERNAL_TRAFFIC_POLICY"
	EdgeAccessStatusReasonBLOCKEDBYKAFKAENFORCEMENTCONFIGMISSINGAPPLIEDINTENTS       EdgeAccessStatusReason = "BLOCKED_BY_KAFKA_ENFORCEMENT_CONFIG_MISSING_APPLIED_INTENTS"
	EdgeAccessStatusReasonCLIENTISTIOSIDECARMISSING                                  EdgeAccessStatusReason = "CLIENT_ISTIO_SIDECAR_MISSING"
	EdgeAccessStatusReasonIGNOREDINCALCULATION                                       EdgeAccessStatusReason = "IGNORED_IN_CALCULATION"
	EdgeAccessStatusReasonINTENTSOPERATORNEVERCONNECTED                              EdgeAccessStatusReason = "INTENTS_OPERATOR_NEVER_CONNECTED"
	EdgeAccessStatusReasonINTENTSOPERATORNOTENFORCING                                EdgeAccessStatusReason = "INTENTS_OPERATOR_NOT_ENFORCING"
	EdgeAccessStatusReasonINTENTSOPERATORNOTENFORCINGKAFKAINTENTSNOTREQUIREDFORTOPIC EdgeAccessStatusReason = "INTENTS_OPERATOR_NOT_ENFORCING_KAFKA_INTENTS_NOT_REQUIRED_FOR_TOPIC"
	EdgeAccessStatusReasonINTENTSOPERATORNOTENFORCINGMISSINGAPPLIEDINTENT            EdgeAccessStatusReason = "INTENTS_OPERATOR_NOT_ENFORCING_MISSING_APPLIED_INTENT"
	EdgeAccessStatusReasonINTERNETACCESSSTATUSUNKNOWN                                EdgeAccessStatusReason = "INTERNET_ACCESS_STATUS_UNKNOWN"
	EdgeAccessStatusReasonINTERNETINTENTSENFORCEMENTDISABLED                         EdgeAccessStatusReason = "INTERNET_INTENTS_ENFORCEMENT_DISABLED"
	EdgeAccessStatusReasonMISSINGAPPLIEDCLOUDRESOURCEINTENT                          EdgeAccessStatusReason = "MISSING_APPLIED_CLOUD_RESOURCE_INTENT"
	EdgeAccessStatusReasonMISSINGAPPLIEDINTENT                                       EdgeAccessStatusReason = "MISSING_APPLIED_INTENT"
	EdgeAccessStatusReasonNETWORKMAPPERNEVERCONNECTED                                EdgeAccessStatusReason = "NETWORK_MAPPER_NEVER_CONNECTED"
	EdgeAccessStatusReasonNOINTENTSFOUNDOFRELEVANTTYPE                               EdgeAccessStatusReason = "NO_INTENTS_FOUND_OF_RELEVANT_TYPE"
	EdgeAccessStatusReasonNOTINPROTECTEDSERVICES                                     EdgeAccessStatusReason = "NOT_IN_PROTECTED_SERVICES"
	EdgeAccessStatusReasonSERVERISTIOSIDECARMISSING                                  EdgeAccessStatusReason = "SERVER_ISTIO_SIDECAR_MISSING"
	EdgeAccessStatusReasonSHAREDSERVICEACCOUNT                                       EdgeAccessStatusReason = "SHARED_SERVICE_ACCOUNT"
	EdgeAccessStatusReasonWOULDBEALLOWEDBYEXTERNALTRAFFICNETWORKPOLICY               EdgeAccessStatusReason = "WOULD_BE_ALLOWED_BY_EXTERNAL_TRAFFIC_NETWORK_POLICY"
	EdgeAccessStatusReasonWOULDBEALLOWEDBYMETRICSCOLLECTIONTRAFFICNETWORKPOLICY      EdgeAccessStatusReason = "WOULD_BE_ALLOWED_BY_METRICS_COLLECTION_TRAFFIC_NETWORK_POLICY"
)

// Defines values for EdgeAccessStatusReasons.
const (
	EdgeAccessStatusReasonsALLOWEDBYAPPLIEDINTENTS                                    EdgeAccessStatusReasons = "ALLOWED_BY_APPLIED_INTENTS"
	EdgeAccessStatusReasonsALLOWEDBYAPPLIEDINTENTSDATABASEOVERLYPERMISSIVE            EdgeAccessStatusReasons = "ALLOWED_BY_APPLIED_INTENTS_DATABASE_OVERLY_PERMISSIVE"
	EdgeAccessStatusReasonsALLOWEDBYAPPLIEDINTENTSHTTPOVERLYPERMISSIVE                EdgeAccessStatusReasons = "ALLOWED_BY_APPLIED_INTENTS_HTTP_OVERLY_PERMISSIVE"
	EdgeAccessStatusReasonsALLOWEDBYAPPLIEDINTENTSKAFKAOVERLYPERMISSIVE               EdgeAccessStatusReasons = "ALLOWED_BY_APPLIED_INTENTS_KAFKA_OVERLY_PERMISSIVE"
	EdgeAccessStatusReasonsALLOWEDBYAPPLIEDINTENTSOVERLYPERMISSIVE                    EdgeAccessStatusReasons = "ALLOWED_BY_APPLIED_INTENTS_OVERLY_PERMISSIVE"
	EdgeAccessStatusReasonsALLOWEDBYEXTERNALLYMANAGEDNETWORKPOLICY                    EdgeAccessStatusReasons = "ALLOWED_BY_EXTERNALLY_MANAGED_NETWORK_POLICY"
	EdgeAccessStatusReasonsALLOWEDBYEXTERNALTRAFFICNETWORKPOLICY                      EdgeAccessStatusReasons = "ALLOWED_BY_EXTERNAL_TRAFFIC_NETWORK_POLICY"
	EdgeAccessStatusReasonsALLOWEDBYMETRICSCOLLECTIONTRAFFICNETWORKPOLICY             EdgeAccessStatusReasons = "ALLOWED_BY_METRICS_COLLECTION_TRAFFIC_NETWORK_POLICY"
	EdgeAccessStatusReasonsBLOCKEDBYAPPLIEDINTENTSDATABASERESOURCEMISMATCH            EdgeAccessStatusReasons = "BLOCKED_BY_APPLIED_INTENTS_DATABASE_RESOURCE_MISMATCH"
	EdgeAccessStatusReasonsBLOCKEDBYAPPLIEDINTENTSDATABASEUNDERPERMISSIVE             EdgeAccessStatusReasons = "BLOCKED_BY_APPLIED_INTENTS_DATABASE_UNDER_PERMISSIVE"
	EdgeAccessStatusReasonsBLOCKEDBYAPPLIEDINTENTSHTTPRESOURCEMISMATCH                EdgeAccessStatusReasons = "BLOCKED_BY_APPLIED_INTENTS_HTTP_RESOURCE_MISMATCH"
	EdgeAccessStatusReasonsBLOCKEDBYAPPLIEDINTENTSHTTPUNDERPERMISSIVE                 EdgeAccessStatusReasons = "BLOCKED_BY_APPLIED_INTENTS_HTTP_UNDER_PERMISSIVE"
	EdgeAccessStatusReasonsBLOCKEDBYAPPLIEDINTENTSKAFKARESOURCEMISMATCH               EdgeAccessStatusReasons = "BLOCKED_BY_APPLIED_INTENTS_KAFKA_RESOURCE_MISMATCH"
	EdgeAccessStatusReasonsBLOCKEDBYAPPLIEDINTENTSKAFKAUNDERPERMISSIVE                EdgeAccessStatusReasons = "BLOCKED_BY_APPLIED_INTENTS_KAFKA_UNDER_PERMISSIVE"
	EdgeAccessStatusReasonsBLOCKEDBYAPPLIEDINTENTSMISSINGEXTERNALTRAFFICPOLICY        EdgeAccessStatusReasons = "BLOCKED_BY_APPLIED_INTENTS_MISSING_EXTERNAL_TRAFFIC_POLICY"
	EdgeAccessStatusReasonsBLOCKEDBYAPPLIEDINTENTSRESOURCEMISMATCH                    EdgeAccessStatusReasons = "BLOCKED_BY_APPLIED_INTENTS_RESOURCE_MISMATCH"
	EdgeAccessStatusReasonsBLOCKEDBYAPPLIEDINTENTSUNDERPERMISSIVE                     EdgeAccessStatusReasons = "BLOCKED_BY_APPLIED_INTENTS_UNDER_PERMISSIVE"
	EdgeAccessStatusReasonsBLOCKEDBYDATABASEENFORCEMENTCONFIGMISSINGAPPLIEDINTENTS    EdgeAccessStatusReasons = "BLOCKED_BY_DATABASE_ENFORCEMENT_CONFIG_MISSING_APPLIED_INTENTS"
	EdgeAccessStatusReasonsBLOCKEDBYDEFAULTDENY                                       EdgeAccessStatusReasons = "BLOCKED_BY_DEFAULT_DENY"
	EdgeAccessStatusReasonsBLOCKEDBYDEFAULTDENYMISSINGEXTERNALTRAFFICPOLICY           EdgeAccessStatusReasons = "BLOCKED_BY_DEFAULT_DENY_MISSING_EXTERNAL_TRAFFIC_POLICY"
	EdgeAccessStatusReasonsBLOCKEDBYKAFKAENFORCEMENTCONFIGMISSINGAPPLIEDINTENTS       EdgeAccessStatusReasons = "BLOCKED_BY_KAFKA_ENFORCEMENT_CONFIG_MISSING_APPLIED_INTENTS"
	EdgeAccessStatusReasonsCLIENTISTIOSIDECARMISSING                                  EdgeAccessStatusReasons = "CLIENT_ISTIO_SIDECAR_MISSING"
	EdgeAccessStatusReasonsIGNOREDINCALCULATION                                       EdgeAccessStatusReasons = "IGNORED_IN_CALCULATION"
	EdgeAccessStatusReasonsINTENTSOPERATORNEVERCONNECTED                              EdgeAccessStatusReasons = "INTENTS_OPERATOR_NEVER_CONNECTED"
	EdgeAccessStatusReasonsINTENTSOPERATORNOTENFORCING                                EdgeAccessStatusReasons = "INTENTS_OPERATOR_NOT_ENFORCING"
	EdgeAccessStatusReasonsINTENTSOPERATORNOTENFORCINGKAFKAINTENTSNOTREQUIREDFORTOPIC EdgeAccessStatusReasons = "INTENTS_OPERATOR_NOT_ENFORCING_KAFKA_INTENTS_NOT_REQUIRED_FOR_TOPIC"
	EdgeAccessStatusReasonsINTENTSOPERATORNOTENFORCINGMISSINGAPPLIEDINTENT            EdgeAccessStatusReasons = "INTENTS_OPERATOR_NOT_ENFORCING_MISSING_APPLIED_INTENT"
	EdgeAccessStatusReasonsINTERNETACCESSSTATUSUNKNOWN                                EdgeAccessStatusReasons = "INTERNET_ACCESS_STATUS_UNKNOWN"
	EdgeAccessStatusReasonsINTERNETINTENTSENFORCEMENTDISABLED                         EdgeAccessStatusReasons = "INTERNET_INTENTS_ENFORCEMENT_DISABLED"
	EdgeAccessStatusReasonsMISSINGAPPLIEDCLOUDRESOURCEINTENT                          EdgeAccessStatusReasons = "MISSING_APPLIED_CLOUD_RESOURCE_INTENT"
	EdgeAccessStatusReasonsMISSINGAPPLIEDINTENT                                       EdgeAccessStatusReasons = "MISSING_APPLIED_INTENT"
	EdgeAccessStatusReasonsNETWORKMAPPERNEVERCONNECTED                                EdgeAccessStatusReasons = "NETWORK_MAPPER_NEVER_CONNECTED"
	EdgeAccessStatusReasonsNOINTENTSFOUNDOFRELEVANTTYPE                               EdgeAccessStatusReasons = "NO_INTENTS_FOUND_OF_RELEVANT_TYPE"
	EdgeAccessStatusReasonsNOTINPROTECTEDSERVICES                                     EdgeAccessStatusReasons = "NOT_IN_PROTECTED_SERVICES"
	EdgeAccessStatusReasonsSERVERISTIOSIDECARMISSING                                  EdgeAccessStatusReasons = "SERVER_ISTIO_SIDECAR_MISSING"
	EdgeAccessStatusReasonsSHAREDSERVICEACCOUNT                                       EdgeAccessStatusReasons = "SHARED_SERVICE_ACCOUNT"
	EdgeAccessStatusReasonsWOULDBEALLOWEDBYEXTERNALTRAFFICNETWORKPOLICY               EdgeAccessStatusReasons = "WOULD_BE_ALLOWED_BY_EXTERNAL_TRAFFIC_NETWORK_POLICY"
	EdgeAccessStatusReasonsWOULDBEALLOWEDBYMETRICSCOLLECTIONTRAFFICNETWORKPOLICY      EdgeAccessStatusReasons = "WOULD_BE_ALLOWED_BY_METRICS_COLLECTION_TRAFFIC_NETWORK_POLICY"
)

// Defines values for EdgeAccessStatusVerdict.
const (
	EdgeAccessStatusVerdictBLOCKED           EdgeAccessStatusVerdict = "BLOCKED"
	EdgeAccessStatusVerdictEXPLICITLYALLOWED EdgeAccessStatusVerdict = "EXPLICITLY_ALLOWED"
	EdgeAccessStatusVerdictIMPLICITLYALLOWED EdgeAccessStatusVerdict = "IMPLICITLY_ALLOWED"
	EdgeAccessStatusVerdictUNKNOWN           EdgeAccessStatusVerdict = "UNKNOWN"
	EdgeAccessStatusVerdictWOULDBEBLOCKED    EdgeAccessStatusVerdict = "WOULD_BE_BLOCKED"
)

// Defines values for IntegrationType.
const (
	IntegrationTypeAWS           IntegrationType = "AWS"
	IntegrationTypeAWSVISIBILITY IntegrationType = "AWS_VISIBILITY"
	IntegrationTypeAZURE         IntegrationType = "AZURE"
	IntegrationTypeDATABASE      IntegrationType = "DATABASE"
	IntegrationTypeGCP           IntegrationType = "GCP"
	IntegrationTypeGENERIC       IntegrationType = "GENERIC"
	IntegrationTypeGITHUB        IntegrationType = "GITHUB"
	IntegrationTypeGITLAB        IntegrationType = "GITLAB"
	IntegrationTypeKUBERNETES    IntegrationType = "KUBERNETES"
	IntegrationTypeSIEM          IntegrationType = "SIEM"
	IntegrationTypeSLACK         IntegrationType = "SLACK"
)

// Defines values for IntegrationAccessGraphFilterClusterFilterType.
const (
	IntegrationAccessGraphFilterClusterFilterTypeEXCLUDE IntegrationAccessGraphFilterClusterFilterType = "EXCLUDE"
	IntegrationAccessGraphFilterClusterFilterTypeINCLUDE IntegrationAccessGraphFilterClusterFilterType = "INCLUDE"
)

// Defines values for IntegrationAccessGraphFilterEnvironmentFilterType.
const (
	IntegrationAccessGraphFilterEnvironmentFilterTypeEXCLUDE IntegrationAccessGraphFilterEnvironmentFilterType = "EXCLUDE"
	IntegrationAccessGraphFilterEnvironmentFilterTypeINCLUDE IntegrationAccessGraphFilterEnvironmentFilterType = "INCLUDE"
)

// Defines values for IntegrationAccessGraphFilterNamespaceFilterType.
const (
	IntegrationAccessGraphFilterNamespaceFilterTypeEXCLUDE IntegrationAccessGraphFilterNamespaceFilterType = "EXCLUDE"
	IntegrationAccessGraphFilterNamespaceFilterTypeINCLUDE IntegrationAccessGraphFilterNamespaceFilterType = "INCLUDE"
)

// Defines values for IntegrationAccessGraphFilterServiceFilterType.
const (
	IntegrationAccessGraphFilterServiceFilterTypeEXCLUDE IntegrationAccessGraphFilterServiceFilterType = "EXCLUDE"
	IntegrationAccessGraphFilterServiceFilterTypeINCLUDE IntegrationAccessGraphFilterServiceFilterType = "INCLUDE"
)

// Defines values for IntegrationAccessGraphFilterTargets.
const (
	IntegrationAccessGraphFilterTargetsAWS        IntegrationAccessGraphFilterTargets = "AWS"
	IntegrationAccessGraphFilterTargetsAZURE      IntegrationAccessGraphFilterTargets = "AZURE"
	IntegrationAccessGraphFilterTargetsDATABASE   IntegrationAccessGraphFilterTargets = "DATABASE"
	IntegrationAccessGraphFilterTargetsGCP        IntegrationAccessGraphFilterTargets = "GCP"
	IntegrationAccessGraphFilterTargetsHTTP       IntegrationAccessGraphFilterTargets = "HTTP"
	IntegrationAccessGraphFilterTargetsINTERNET   IntegrationAccessGraphFilterTargets = "INTERNET"
	IntegrationAccessGraphFilterTargetsKAFKA      IntegrationAccessGraphFilterTargets = "KAFKA"
	IntegrationAccessGraphFilterTargetsKUBERNETES IntegrationAccessGraphFilterTargets = "KUBERNETES"
	IntegrationAccessGraphFilterTargetsS3         IntegrationAccessGraphFilterTargets = "S3"
)

// Defines values for IntegrationStatusState.
const (
	IntegrationStatusStateDISABLED IntegrationStatusState = "DISABLED"
	IntegrationStatusStateFAILURE  IntegrationStatusState = "FAILURE"
	IntegrationStatusStatePENDING  IntegrationStatusState = "PENDING"
	IntegrationStatusStateSUCCESS  IntegrationStatusState = "SUCCESS"
	IntegrationStatusStateWARNING  IntegrationStatusState = "WARNING"
)

// Defines values for IntentsOperatorComponentType.
const (
	IntentsOperatorComponentTypeCREDENTIALSOPERATOR IntentsOperatorComponentType = "CREDENTIALS_OPERATOR"
	IntentsOperatorComponentTypeINTENTSOPERATOR     IntentsOperatorComponentType = "INTENTS_OPERATOR"
	IntentsOperatorComponentTypeNETWORKMAPPER       IntentsOperatorComponentType = "NETWORK_MAPPER"
)

// Defines values for InviteStatus.
const (
	InviteStatusACCEPTED InviteStatus = "ACCEPTED"
	InviteStatusPENDING  InviteStatus = "PENDING"
)

// Defines values for KafkaTopicPattern.
const (
	LITERAL KafkaTopicPattern = "LITERAL"
	PREFIX  KafkaTopicPattern = "PREFIX"
)

// Defines values for NetworkMapperComponentType.
const (
	CREDENTIALSOPERATOR NetworkMapperComponentType = "CREDENTIALS_OPERATOR"
	INTENTSOPERATOR     NetworkMapperComponentType = "INTENTS_OPERATOR"
	NETWORKMAPPER       NetworkMapperComponentType = "NETWORK_MAPPER"
)

// Defines values for NumericFilterValueOperator.
const (
	EQUAL              NumericFilterValueOperator = "EQUAL"
	GREATERTHAN        NumericFilterValueOperator = "GREATER_THAN"
	GREATERTHANOREQUAL NumericFilterValueOperator = "GREATER_THAN_OR_EQUAL"
	LESSTHAN           NumericFilterValueOperator = "LESS_THAN"
	LESSTHANOREQUAL    NumericFilterValueOperator = "LESS_THAN_OR_EQUAL"
	NOTEQUAL           NumericFilterValueOperator = "NOT_EQUAL"
)

// Defines values for OrganizationMembershipRole.
const (
	OrganizationMembershipRoleADMIN  OrganizationMembershipRole = "ADMIN"
	OrganizationMembershipRoleVIEWER OrganizationMembershipRole = "VIEWER"
)

// Defines values for OrganizationMembershipInputRole.
const (
	OrganizationMembershipInputRoleADMIN  OrganizationMembershipInputRole = "ADMIN"
	OrganizationMembershipInputRoleVIEWER OrganizationMembershipInputRole = "VIEWER"
)

// Defines values for OrganizationSettingsDomainsDefaultRole.
const (
	ADMIN  OrganizationSettingsDomainsDefaultRole = "ADMIN"
	VIEWER OrganizationSettingsDomainsDefaultRole = "VIEWER"
)

// Defines values for ServerBlockingStatusReason.
const (
	ServerBlockingStatusReasonALLINTENTSAPPLIED             ServerBlockingStatusReason = "ALL_INTENTS_APPLIED"
	ServerBlockingStatusReasonINTENTSIMPLICITLYALLOWED      ServerBlockingStatusReason = "INTENTS_IMPLICITLY_ALLOWED"
	ServerBlockingStatusReasonINTENTSOPERATORNEVERCONNECTED ServerBlockingStatusReason = "INTENTS_OPERATOR_NEVER_CONNECTED"
	ServerBlockingStatusReasonINTENTSOPERATORNOTENFORCING   ServerBlockingStatusReason = "INTENTS_OPERATOR_NOT_ENFORCING"
	ServerBlockingStatusReasonMISSINGAPPLIEDINTENTS         ServerBlockingStatusReason = "MISSING_APPLIED_INTENTS"
	ServerBlockingStatusReasonNETWORKMAPPERNEVERCONNECTED   ServerBlockingStatusReason = "NETWORK_MAPPER_NEVER_CONNECTED"
)

// Defines values for ServerBlockingStatusVerdict.
const (
	ServerBlockingStatusVerdictBLOCKING    ServerBlockingStatusVerdict = "BLOCKING"
	ServerBlockingStatusVerdictNOTBLOCKING ServerBlockingStatusVerdict = "NOT_BLOCKING"
	ServerBlockingStatusVerdictUNKNOWN     ServerBlockingStatusVerdict = "UNKNOWN"
	ServerBlockingStatusVerdictWOULDBLOCK  ServerBlockingStatusVerdict = "WOULD_BLOCK"
)

// Defines values for ServerProtectionStatusReason.
const (
	ServerProtectionStatusReasonEXTERNALLYMANAGEDPOLICYWORKLOAD                   ServerProtectionStatusReason = "EXTERNALLY_MANAGED_POLICY_WORKLOAD"
	ServerProtectionStatusReasonIGNOREDINCALCULATION                              ServerProtectionStatusReason = "IGNORED_IN_CALCULATION"
	ServerProtectionStatusReasonINTENTSOPERATORNEVERCONNECTED                     ServerProtectionStatusReason = "INTENTS_OPERATOR_NEVER_CONNECTED"
	ServerProtectionStatusReasonINTENTSOPERATORNOTENFORCING                       ServerProtectionStatusReason = "INTENTS_OPERATOR_NOT_ENFORCING"
	ServerProtectionStatusReasonPROTECTEDBYAWSIAMINTEGRATION                      ServerProtectionStatusReason = "PROTECTED_BY_AWS_IAM_INTEGRATION"
	ServerProtectionStatusReasonPROTECTEDBYDATABASEINTEGRATION                    ServerProtectionStatusReason = "PROTECTED_BY_DATABASE_INTEGRATION"
	ServerProtectionStatusReasonPROTECTEDBYDEFAULTDENY                            ServerProtectionStatusReason = "PROTECTED_BY_DEFAULT_DENY"
	ServerProtectionStatusReasonPROTECTEDBYINTERNETINTENTS                        ServerProtectionStatusReason = "PROTECTED_BY_INTERNET_INTENTS"
	ServerProtectionStatusReasonPROTECTEDBYKAFKAIDENTITYREQUIREDNOINTENTSREQUIRED ServerProtectionStatusReason = "PROTECTED_BY_KAFKA_IDENTITY_REQUIRED_NO_INTENTS_REQUIRED"
	ServerProtectionStatusReasonPROTECTEDBYKAFKAINTENTSREQUIRED                   ServerProtectionStatusReason = "PROTECTED_BY_KAFKA_INTENTS_REQUIRED"
	ServerProtectionStatusReasonPROTECTEDBYSERVERISTIOPOLICY                      ServerProtectionStatusReason = "PROTECTED_BY_SERVER_ISTIO_POLICY"
	ServerProtectionStatusReasonPROTECTEDBYSERVERNETWORKPOLICY                    ServerProtectionStatusReason = "PROTECTED_BY_SERVER_NETWORK_POLICY"
	ServerProtectionStatusReasonSERVEREXTERNALACCESSPOLICYCREATED                 ServerProtectionStatusReason = "SERVER_EXTERNAL_ACCESS_POLICY_CREATED"
	ServerProtectionStatusReasonSERVERHASKAFKASERVERCONFIGNOENFORCEMENT           ServerProtectionStatusReason = "SERVER_HAS_KAFKASERVERCONFIG_NO_ENFORCEMENT"
	ServerProtectionStatusReasonSERVERHASNOISTIOPOLICY                            ServerProtectionStatusReason = "SERVER_HAS_NO_ISTIO_POLICY"
	ServerProtectionStatusReasonSERVERHASNOISTIOSIDECAR                           ServerProtectionStatusReason = "SERVER_HAS_NO_ISTIO_SIDECAR"
	ServerProtectionStatusReasonSERVERHASNOKAFKASERVERCONFIG                      ServerProtectionStatusReason = "SERVER_HAS_NO_KAFKA_SERVER_CONFIG"
	ServerProtectionStatusReasonSERVERHASNONETWORKPOLICY                          ServerProtectionStatusReason = "SERVER_HAS_NO_NETWORK_POLICY"
)

// Defines values for ServerProtectionStatusVerdict.
const (
	PROTECTED   ServerProtectionStatusVerdict = "PROTECTED"
	UNKNOWN     ServerProtectionStatusVerdict = "UNKNOWN"
	UNPROTECTED ServerProtectionStatusVerdict = "UNPROTECTED"
)

// Defines values for ServiceAccessGraphTypes.
const (
	ServiceAccessGraphTypesAWS                    ServiceAccessGraphTypes = "AWS"
	ServiceAccessGraphTypesAWSVISIBILITYEKS       ServiceAccessGraphTypes = "AWS_VISIBILITY_EKS"
	ServiceAccessGraphTypesAZURE                  ServiceAccessGraphTypes = "AZURE"
	ServiceAccessGraphTypesDATABASE               ServiceAccessGraphTypes = "DATABASE"
	ServiceAccessGraphTypesDATABASEUSER           ServiceAccessGraphTypes = "DATABASE_USER"
	ServiceAccessGraphTypesDETECTEDCLOUDSERVER    ServiceAccessGraphTypes = "DETECTED_CLOUD_SERVER"
	ServiceAccessGraphTypesGCP                    ServiceAccessGraphTypes = "GCP"
	ServiceAccessGraphTypesINTERNET               ServiceAccessGraphTypes = "INTERNET"
	ServiceAccessGraphTypesKAFKA                  ServiceAccessGraphTypes = "KAFKA"
	ServiceAccessGraphTypesKUBERNETES             ServiceAccessGraphTypes = "KUBERNETES"
	ServiceAccessGraphTypesKUBERNETESLOADBALANCER ServiceAccessGraphTypes = "KUBERNETES_LOAD_BALANCER"
	ServiceAccessGraphTypesNODEGROUP              ServiceAccessGraphTypes = "NODE_GROUP"
	ServiceAccessGraphTypesPREFIXGROUP            ServiceAccessGraphTypes = "PREFIX_GROUP"
)

// Defines values for TimeFilterValueOperator.
const (
	AFTER TimeFilterValueOperator = "AFTER"
)

// Defines values for OneIntegrationQueryParamsIntegrationType.
const (
	OneIntegrationQueryParamsIntegrationTypeAWS           OneIntegrationQueryParamsIntegrationType = "AWS"
	OneIntegrationQueryParamsIntegrationTypeAWSVISIBILITY OneIntegrationQueryParamsIntegrationType = "AWS_VISIBILITY"
	OneIntegrationQueryParamsIntegrationTypeAZURE         OneIntegrationQueryParamsIntegrationType = "AZURE"
	OneIntegrationQueryParamsIntegrationTypeDATABASE      OneIntegrationQueryParamsIntegrationType = "DATABASE"
	OneIntegrationQueryParamsIntegrationTypeGCP           OneIntegrationQueryParamsIntegrationType = "GCP"
	OneIntegrationQueryParamsIntegrationTypeGENERIC       OneIntegrationQueryParamsIntegrationType = "GENERIC"
	OneIntegrationQueryParamsIntegrationTypeGITHUB        OneIntegrationQueryParamsIntegrationType = "GITHUB"
	OneIntegrationQueryParamsIntegrationTypeGITLAB        OneIntegrationQueryParamsIntegrationType = "GITLAB"
	OneIntegrationQueryParamsIntegrationTypeKUBERNETES    OneIntegrationQueryParamsIntegrationType = "KUBERNETES"
	OneIntegrationQueryParamsIntegrationTypeSIEM          OneIntegrationQueryParamsIntegrationType = "SIEM"
	OneIntegrationQueryParamsIntegrationTypeSLACK         OneIntegrationQueryParamsIntegrationType = "SLACK"
)

// Defines values for IntegrationsQueryParamsIntegrationType.
const (
	IntegrationsQueryParamsIntegrationTypeAWS           IntegrationsQueryParamsIntegrationType = "AWS"
	IntegrationsQueryParamsIntegrationTypeAWSVISIBILITY IntegrationsQueryParamsIntegrationType = "AWS_VISIBILITY"
	IntegrationsQueryParamsIntegrationTypeAZURE         IntegrationsQueryParamsIntegrationType = "AZURE"
	IntegrationsQueryParamsIntegrationTypeDATABASE      IntegrationsQueryParamsIntegrationType = "DATABASE"
	IntegrationsQueryParamsIntegrationTypeGCP           IntegrationsQueryParamsIntegrationType = "GCP"
	IntegrationsQueryParamsIntegrationTypeGENERIC       IntegrationsQueryParamsIntegrationType = "GENERIC"
	IntegrationsQueryParamsIntegrationTypeGITHUB        IntegrationsQueryParamsIntegrationType = "GITHUB"
	IntegrationsQueryParamsIntegrationTypeGITLAB        IntegrationsQueryParamsIntegrationType = "GITLAB"
	IntegrationsQueryParamsIntegrationTypeKUBERNETES    IntegrationsQueryParamsIntegrationType = "KUBERNETES"
	IntegrationsQueryParamsIntegrationTypeSIEM          IntegrationsQueryParamsIntegrationType = "SIEM"
	IntegrationsQueryParamsIntegrationTypeSLACK         IntegrationsQueryParamsIntegrationType = "SLACK"
)

// Defines values for OneInviteQueryParamsStatus.
const (
	OneInviteQueryParamsStatusACCEPTED OneInviteQueryParamsStatus = "ACCEPTED"
	OneInviteQueryParamsStatusPENDING  OneInviteQueryParamsStatus = "PENDING"
)

// Defines values for InvitesQueryParamsStatus.
const (
	InvitesQueryParamsStatusACCEPTED InvitesQueryParamsStatus = "ACCEPTED"
	InvitesQueryParamsStatusPENDING  InvitesQueryParamsStatus = "PENDING"
)

// AWSInfo defines model for AWSInfo.
type AWSInfo struct {
	AwsAccountId   string `json:"awsAccountId"`
	EksClusterName string `json:"eksClusterName"`
	Namespace      string `json:"namespace"`
	Region         string `json:"region"`
}

// AWSInfoInput defines model for AWSInfoInput.
type AWSInfoInput struct {
	AwsAccountId   string `json:"awsAccountId"`
	ClusterId      string `json:"clusterId"`
	EksClusterName string `json:"eksClusterName"`
	Namespace      string `json:"namespace"`
	Region         string `json:"region"`
}

// AWSResource defines model for AWSResource.
type AWSResource struct {
	Info map[string]interface{} `json:"info"`
	Type AWSResourceType        `json:"type"`
}

// AWSResourceType defines model for AWSResource.Type.
type AWSResourceType string

// AWSVisibility defines model for AWSVisibility.
type AWSVisibility struct {
	Arn            string                    `json:"arn"`
	Domain         *string                   `json:"domain,omitempty"`
	EksIngressName *string                   `json:"eksIngressName,omitempty"`
	Ips            []string                  `json:"ips"`
	LbArn          *string                   `json:"lbArn,omitempty"`
	Name           string                    `json:"name"`
	Region         string                    `json:"region"`
	ResourceType   AWSVisibilityResourceType `json:"resourceType"`
}

// AWSVisibilityResourceType defines model for AWSVisibility.ResourceType.
type AWSVisibilityResourceType string

// AWSVisibilitySettings defines model for AWSVisibilitySettings.
type AWSVisibilitySettings struct {
	AwsAccountId string   `json:"awsAccountId"`
	ExternalId   string   `json:"externalId"`
	IsActive     bool     `json:"isActive"`
	Regions      []string `json:"regions"`
}

// AWSVisibilitySettingsInput defines model for AWSVisibilitySettingsInput.
type AWSVisibilitySettingsInput struct {
	AwsAccountId string   `json:"awsAccountId"`
	IsActive     bool     `json:"isActive"`
	Regions      []string `json:"regions"`
}

// AccessGraph defines model for AccessGraph.
type AccessGraph struct {
	Clusters []struct {
		Id string `json:"id"`
	} `json:"clusters"`

	// Filter  Access graph filter
	Filter              AccessGraphFilter    `json:"filter"`
	ServiceAccessGraphs []ServiceAccessGraph `json:"serviceAccessGraphs"`
	ServiceCount        int32                `json:"serviceCount"`
}

// AccessGraphEdge defines model for AccessGraphEdge.
type AccessGraphEdge struct {
	AccessStatus   EdgeAccessStatus   `json:"accessStatus"`
	AccessStatuses EdgeAccessStatuses `json:"accessStatuses"`
	AppliedIntents []struct {
		Id string `json:"id"`
	} `json:"appliedIntents"`
	Client struct {
		Id string `json:"id"`
	} `json:"client"`
	DiscoveredIntents []struct {
		Id string `json:"id"`
	} `json:"discoveredIntents"`
	Findings []CallFinding `json:"findings"`
	Server   struct {
		Id string `json:"id"`
	} `json:"server"`
	Traffic TrafficLevel `json:"traffic"`
}

// AccessGraphFilter  Access graph filter
type AccessGraphFilter struct {
	ClusterIds                       *IDFilterValue      `json:"clusterIds,omitempty"`
	EnvironmentIds                   *IDFilterValue      `json:"environmentIds,omitempty"`
	FeatureFlags                     *FeatureFlags       `json:"featureFlags,omitempty"`
	Hits                             *NumericFilterValue `json:"hits,omitempty"`
	IncludeOnlyClientsMatchingFilter *bool               `json:"includeOnlyClientsMatchingFilter,omitempty"`
	LastSeen                         *TimeFilterValue    `json:"lastSeen,omitempty"`
	NamespaceIds                     *IDFilterValue      `json:"namespaceIds,omitempty"`
	ServiceIds                       *IDFilterValue      `json:"serviceIds,omitempty"`
}

// AccessLog defines model for AccessLog.
type AccessLog struct {
	Clusters []struct {
		Id string `json:"id"`
	} `json:"clusters"`
	Entries    []AccessLogEdge `json:"entries"`
	Namespaces []struct {
		Id string `json:"id"`
	} `json:"namespaces"`
	TimeRange  TimeRange `json:"timeRange"`
	TotalCount int32     `json:"totalCount"`
}

// AccessLogEdge defines model for AccessLogEdge.
type AccessLogEdge struct {
	AccessStatus   EdgeAccessStatus `json:"accessStatus"`
	AppliedIntents *[]struct {
		Id string `json:"id"`
	} `json:"appliedIntents,omitempty"`
	Client struct {
		Id string `json:"id"`
	} `json:"client"`
	Dns          string `json:"dns"`
	OriginIntent struct {
		Id string `json:"id"`
	} `json:"originIntent"`
	Server struct {
		Id string `json:"id"`
	} `json:"server"`
	Timestamp time.Time `json:"timestamp"`
}

// AzureInfo defines model for AzureInfo.
type AzureInfo struct {
	AksClusterName string `json:"aksClusterName"`
	Namespace      string `json:"namespace"`
	ResourceGroup  string `json:"resourceGroup"`
	SubscriptionId string `json:"subscriptionId"`
	TenantId       string `json:"tenantId"`
}

// AzureInfoInput defines model for AzureInfoInput.
type AzureInfoInput struct {
	AksClusterName string `json:"aksClusterName"`
	ClusterId      string `json:"clusterId"`
	Namespace      string `json:"namespace"`
	ResourceGroup  string `json:"resourceGroup"`
	SubscriptionId string `json:"subscriptionId"`
	TenantId       string `json:"tenantId"`
}

// AzureResource defines model for AzureResource.
type AzureResource struct {
	Resource string `json:"resource"`
}

// CallFinding defines model for CallFinding.
type CallFinding struct {
	Code     CallFindingCode     `json:"code"`
	Reason   string              `json:"reason"`
	Standard CallFindingStandard `json:"standard"`
}

// CallFindingCode defines model for CallFinding.Code.
type CallFindingCode string

// CallFindingStandard defines model for CallFinding.Standard.
type CallFindingStandard string

// CertificateInformation defines model for CertificateInformation.
type CertificateInformation struct {
	CommonName string    `json:"commonName"`
	DnsNames   *[]string `json:"dnsNames,omitempty"`
	Ttl        *int32    `json:"ttl,omitempty"`
}

// ClientIntentAccessStatus defines model for ClientIntentAccessStatus.
type ClientIntentAccessStatus struct {
	Allowed        int32 `json:"allowed"`
	Blocked        int32 `json:"blocked"`
	Total          int32 `json:"total"`
	WouldBeBlocked int32 `json:"wouldBeBlocked"`
}

// ClientIntentEvent defines model for ClientIntentEvent.
type ClientIntentEvent struct {
	Count              int32      `json:"count"`
	FirstTimestamp     *time.Time `json:"firstTimestamp,omitempty"`
	LastTimestamp      *time.Time `json:"lastTimestamp,omitempty"`
	Message            string     `json:"message"`
	Reason             string     `json:"reason"`
	ReportingComponent *string    `json:"reportingComponent,omitempty"`
	Type               string     `json:"type"`
}

// ClientIntentStatus defines model for ClientIntentStatus.
type ClientIntentStatus struct {
	ClientIntentName   string    `json:"clientIntentName"`
	Generation         int32     `json:"generation"`
	ObservedGeneration int32     `json:"observedGeneration"`
	Timestamp          time.Time `json:"timestamp"`
	UpToDate           bool      `json:"upToDate"`
}

// ClientIntentsFileRepresentation defines model for ClientIntentsFileRepresentation.
type ClientIntentsFileRepresentation struct {
	Content            string             `json:"content"`
	FileName           string             `json:"fileName"`
	NamespacedFileName string             `json:"namespacedFileName"`
	Rows               []ClientIntentsRow `json:"rows"`
	Service            struct {
		Id string `json:"id"`
	} `json:"service"`
}

// ClientIntentsFiles defines model for ClientIntentsFiles.
type ClientIntentsFiles struct {
	Files          []ClientIntentsFileRepresentation `json:"files"`
	MergedYAMLFile *MergedYAMLFile                   `json:"mergedYAMLFile,omitempty"`
}

// ClientIntentsRow defines model for ClientIntentsRow.
type ClientIntentsRow struct {
	CalledServerId *string               `json:"calledServerId,omitempty"`
	Diff           *ClientIntentsRowDiff `json:"diff,omitempty"`
	Text           string                `json:"text"`
}

// ClientIntentsRowDiff defines model for ClientIntentsRow.Diff.
type ClientIntentsRowDiff string

// CloudIam defines model for CloudIam.
type CloudIam struct {
	AwsRoles *[]string `json:"awsRoles,omitempty"`
}

// Cluster defines model for Cluster.
type Cluster struct {
	Components         IntegrationComponents `json:"components"`
	Configuration      *ClusterConfiguration `json:"configuration,omitempty"`
	CreatedAt          time.Time             `json:"createdAt"`
	DefaultEnvironment *struct {
		Id string `json:"id"`
	} `json:"defaultEnvironment,omitempty"`
	Id          string `json:"id"`
	Integration *struct {
		Id string `json:"id"`
	} `json:"integration,omitempty"`
	Integrations []struct {
		Id string `json:"id"`
	} `json:"integrations"`
	Name       string `json:"name"`
	Namespaces []struct {
		Id string `json:"id"`
	} `json:"namespaces"`
	ServiceCount int32 `json:"serviceCount"`
}

// ClusterConfiguration defines model for ClusterConfiguration.
type ClusterConfiguration struct {
	ClusterFormSettings                   ClusterFormSettings `json:"clusterFormSettings"`
	GlobalDefaultDeny                     bool                `json:"globalDefaultDeny"`
	IstioGlobalDefaultDeny                bool                `json:"istioGlobalDefaultDeny"`
	LinkerdGlobalDefaultDeny              bool                `json:"linkerdGlobalDefaultDeny"`
	UseAWSIAMInAccessGraphStates          bool                `json:"useAWSIAMInAccessGraphStates"`
	UseAzureIAMInAccessGraphStates        bool                `json:"useAzureIAMInAccessGraphStates"`
	UseDatabaseInAccessGraphStates        bool                `json:"useDatabaseInAccessGraphStates"`
	UseGCPIAMInAccessGraphStates          bool                `json:"useGCPIAMInAccessGraphStates"`
	UseIstioPoliciesInAccessGraphStates   bool                `json:"useIstioPoliciesInAccessGraphStates"`
	UseKafkaACLsInAccessGraphStates       bool                `json:"useKafkaACLsInAccessGraphStates"`
	UseLinkerdPoliciesInAccessGraphStates bool                `json:"useLinkerdPoliciesInAccessGraphStates"`
	UseNetworkPoliciesInAccessGraphStates bool                `json:"useNetworkPoliciesInAccessGraphStates"`
}

// ClusterConfigurationInput defines model for ClusterConfigurationInput.
type ClusterConfigurationInput struct {
	ClusterFormSettings                   *map[string]interface{} `json:"clusterFormSettings,omitempty"`
	GlobalDefaultDeny                     bool                    `json:"globalDefaultDeny"`
	IstioGlobalDefaultDeny                *bool                   `json:"istioGlobalDefaultDeny,omitempty"`
	LinkerdGlobalDefaultDeny              *bool                   `json:"linkerdGlobalDefaultDeny,omitempty"`
	UseAWSIAMInAccessGraphStates          *bool                   `json:"useAWSIAMInAccessGraphStates,omitempty"`
	UseAzureIAMInAccessGraphStates        *bool                   `json:"useAzureIAMInAccessGraphStates,omitempty"`
	UseDatabaseInAccessGraphStates        *bool                   `json:"useDatabaseInAccessGraphStates,omitempty"`
	UseGCPIAMInAccessGraphStates          *bool                   `json:"useGCPIAMInAccessGraphStates,omitempty"`
	UseIstioPoliciesInAccessGraphStates   bool                    `json:"useIstioPoliciesInAccessGraphStates"`
	UseKafkaACLsInAccessGraphStates       bool                    `json:"useKafkaACLsInAccessGraphStates"`
	UseLinkerdPoliciesInAccessGraphStates bool                    `json:"useLinkerdPoliciesInAccessGraphStates"`
	UseNetworkPoliciesInAccessGraphStates bool                    `json:"useNetworkPoliciesInAccessGraphStates"`
}

// ClusterFormSettings defines model for ClusterFormSettings.
type ClusterFormSettings struct {
	CertificateProvider ClusterFormSettingsCertificateProvider `json:"certificateProvider"`
	Enforcement         bool                                   `json:"enforcement"`
}

// ClusterFormSettingsCertificateProvider defines model for ClusterFormSettings.CertificateProvider.
type ClusterFormSettingsCertificateProvider string

// ComponentStatus defines model for ComponentStatus.
type ComponentStatus struct {
	LastSeen *time.Time          `json:"lastSeen,omitempty"`
	Type     ComponentStatusType `json:"type"`
}

// ComponentStatusType defines model for ComponentStatus.Type.
type ComponentStatusType string

// CreateGitHubIntegrationResponse defines model for CreateGitHubIntegrationResponse.
type CreateGitHubIntegrationResponse struct {
	Integration struct {
		Id string `json:"id"`
	} `json:"integration"`
	NextURL string `json:"nextURL"`
}

// CreateGitLabIntegrationResponse defines model for CreateGitLabIntegrationResponse.
type CreateGitLabIntegrationResponse struct {
	Integration struct {
		Id string `json:"id"`
	} `json:"integration"`
	NextURL string `json:"nextURL"`
}

// CreateSIEMIntegrationResponse defines model for CreateSIEMIntegrationResponse.
type CreateSIEMIntegrationResponse struct {
	Integration struct {
		Id string `json:"id"`
	} `json:"integration"`
}

// CreateSlackIntegrationResponse defines model for CreateSlackIntegrationResponse.
type CreateSlackIntegrationResponse struct {
	Integration struct {
		Id string `json:"id"`
	} `json:"integration"`
	NextURL string `json:"nextURL"`
}

// CredentialsOperatorComponent defines model for CredentialsOperatorComponent.
type CredentialsOperatorComponent struct {
	Status ComponentStatus                  `json:"status"`
	Type   CredentialsOperatorComponentType `json:"type"`
}

// CredentialsOperatorComponentType defines model for CredentialsOperatorComponent.Type.
type CredentialsOperatorComponentType string

// DatabaseInfo defines model for DatabaseInfo.
type DatabaseInfo struct {
	Address      string                      `json:"address"`
	DatabaseType DatabaseInfoDatabaseType    `json:"databaseType"`
	Username     string                      `json:"username"`
	Visibility   *DatabaseVisibilitySettings `json:"visibility,omitempty"`
}

// DatabaseInfoDatabaseType defines model for DatabaseInfo.DatabaseType.
type DatabaseInfoDatabaseType string

// DatabaseInfoInput defines model for DatabaseInfoInput.
type DatabaseInfoInput struct {
	Address      string                        `json:"address"`
	DatabaseType DatabaseInfoInputDatabaseType `json:"databaseType"`
	Visibility   *map[string]interface{}       `json:"visibility,omitempty"`
}

// DatabaseInfoInputDatabaseType defines model for DatabaseInfoInput.DatabaseType.
type DatabaseInfoInputDatabaseType string

// DatabaseVisibilitySettings defines model for DatabaseVisibilitySettings.
type DatabaseVisibilitySettings struct {
	GcpPubSub *GCPPubSubLogConsumerSettings     `json:"gcpPubSub,omitempty"`
	Source    *DatabaseVisibilitySettingsSource `json:"source,omitempty"`
}

// DatabaseVisibilitySettingsSource defines model for DatabaseVisibilitySettings.Source.
type DatabaseVisibilitySettingsSource string

// DefaultIntentsApprovalActionByEnv defines model for DefaultIntentsApprovalActionByEnv.
type DefaultIntentsApprovalActionByEnv struct {
	Action        DefaultIntentsApprovalActionByEnvAction `json:"action"`
	EnvironmentId string                                  `json:"environmentId"`
}

// DefaultIntentsApprovalActionByEnvAction defines model for DefaultIntentsApprovalActionByEnv.Action.
type DefaultIntentsApprovalActionByEnvAction string

// DetectedCloudServer defines model for DetectedCloudServer.
type DetectedCloudServer struct {
	CloudProvider string `json:"cloudProvider"`
	CloudService  string `json:"cloudService"`
	Region        string `json:"region"`
}

// EdgeAccessStatus defines model for EdgeAccessStatus.
type EdgeAccessStatus struct {
	Reason                                EdgeAccessStatusReason    `json:"reason"`
	Reasons                               []EdgeAccessStatusReasons `json:"reasons"`
	UseIstioPoliciesInAccessGraphStates   bool                      `json:"useIstioPoliciesInAccessGraphStates"`
	UseKafkaPoliciesInAccessGraphStates   bool                      `json:"useKafkaPoliciesInAccessGraphStates"`
	UseLinkerdPoliciesInAccessGraphStates bool                      `json:"useLinkerdPoliciesInAccessGraphStates"`
	UseNetworkPoliciesInAccessGraphStates bool                      `json:"useNetworkPoliciesInAccessGraphStates"`
	Verdict                               EdgeAccessStatusVerdict   `json:"verdict"`
}

// EdgeAccessStatusReason defines model for EdgeAccessStatus.Reason.
type EdgeAccessStatusReason string

// EdgeAccessStatusReasons defines model for EdgeAccessStatus.Reasons.
type EdgeAccessStatusReasons string

// EdgeAccessStatusVerdict defines model for EdgeAccessStatus.Verdict.
type EdgeAccessStatusVerdict string

// EdgeAccessStatuses defines model for EdgeAccessStatuses.
type EdgeAccessStatuses struct {
	AwsIam          EdgeAccessStatus `json:"awsIam"`
	AzureIAM        EdgeAccessStatus `json:"azureIAM"`
	Database        EdgeAccessStatus `json:"database"`
	GcpIam          EdgeAccessStatus `json:"gcpIam"`
	IstioPolicies   EdgeAccessStatus `json:"istioPolicies"`
	KafkaACLs       EdgeAccessStatus `json:"kafkaACLs"`
	LinkerdPolicies EdgeAccessStatus `json:"linkerdPolicies"`
	NetworkPolicies EdgeAccessStatus `json:"networkPolicies"`
}

// Environment defines model for Environment.
type Environment struct {
	AppliedIntentsCount int32    `json:"appliedIntentsCount"`
	Id                  string   `json:"id"`
	Labels              *[]Label `json:"labels,omitempty"`
	Name                string   `json:"name"`
	Namespaces          []struct {
		Id string `json:"id"`
	} `json:"namespaces"`
	ServiceCount int32 `json:"serviceCount"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// FeatureFlags defines model for FeatureFlags.
type FeatureFlags struct {
	EnableFindingsV2                 *bool `json:"enableFindingsV2,omitempty"`
	EnableIAMIntentsSuggestions      *bool `json:"enableIAMIntentsSuggestions,omitempty"`
	EnableInternetIntentsSuggestions *bool `json:"enableInternetIntentsSuggestions,omitempty"`
	IsCloudSecurityEnabled           *bool `json:"isCloudSecurityEnabled,omitempty"`
	IsCloudServicesDetectionEnabled  *bool `json:"isCloudServicesDetectionEnabled,omitempty"`
	UseClientIntentsV2               *bool `json:"useClientIntentsV2,omitempty"`
	UseTypedIntentsCTE               *bool `json:"useTypedIntentsCTE,omitempty"`
}

// GCPInfo defines model for GCPInfo.
type GCPInfo struct {
	GcpProjectName string `json:"gcpProjectName"`
	GkeClusterName string `json:"gkeClusterName"`
	Namespace      string `json:"namespace"`
	Region         string `json:"region"`
}

// GCPInfoInput defines model for GCPInfoInput.
type GCPInfoInput struct {
	ClusterId      string `json:"clusterId"`
	GcpProjectName string `json:"gcpProjectName"`
	GkeClusterName string `json:"gkeClusterName"`
	Namespace      string `json:"namespace"`
	Region         string `json:"region"`
}

// GCPPubSubLogConsumerSettings defines model for GCPPubSubLogConsumerSettings.
type GCPPubSubLogConsumerSettings struct {
	ProjectId string `json:"projectId"`
	Topic     string `json:"topic"`
}

// GCPResource defines model for GCPResource.
type GCPResource struct {
	Resource string `json:"resource"`
}

// GitHubRepoFilterPair defines model for GitHubRepoFilterPair.
type GitHubRepoFilterPair struct {
	Filter   IntegrationAccessGraphFilter `json:"filter"`
	RepoInfo GitHubRepoInfo               `json:"repoInfo"`
}

// GitHubRepoInfo defines model for GitHubRepoInfo.
type GitHubRepoInfo struct {
	BaseBranch  string `json:"baseBranch"`
	IntentsPath string `json:"intentsPath"`
	Repository  string `json:"repository"`
}

// GitHubSettings defines model for GitHubSettings.
type GitHubSettings struct {
	EnableAutoMerge bool                   `json:"enableAutoMerge"`
	IsActive        bool                   `json:"isActive"`
	RepoFilterPairs []GitHubRepoFilterPair `json:"repoFilterPairs"`
}

// GitHubSettingsInput defines model for GitHubSettingsInput.
type GitHubSettingsInput struct {
	EnableAutoMerge *bool                    `json:"enableAutoMerge,omitempty"`
	IsActive        bool                     `json:"isActive"`
	RepoFilterPairs []map[string]interface{} `json:"repoFilterPairs"`
}

// GitLabRepoFilterPair defines model for GitLabRepoFilterPair.
type GitLabRepoFilterPair struct {
	Filter   IntegrationAccessGraphFilter `json:"filter"`
	RepoInfo GitLabRepoInfo               `json:"repoInfo"`
}

// GitLabRepoInfo defines model for GitLabRepoInfo.
type GitLabRepoInfo struct {
	BaseBranch  string `json:"baseBranch"`
	IntentsPath string `json:"intentsPath"`
	ProjectPath string `json:"projectPath"`
}

// GitLabSettings defines model for GitLabSettings.
type GitLabSettings struct {
	IsActive        bool                   `json:"isActive"`
	RepoFilterPairs []GitLabRepoFilterPair `json:"repoFilterPairs"`
}

// GitLabSettingsInput defines model for GitLabSettingsInput.
type GitLabSettingsInput struct {
	IsActive        bool                     `json:"isActive"`
	RepoFilterPairs []map[string]interface{} `json:"repoFilterPairs"`
}

// IDFilterValue defines model for IDFilterValue.
type IDFilterValue struct {
	Exclude *[]string `json:"exclude,omitempty"`
	Include *[]string `json:"include,omitempty"`
}

// InputAccessGraphFilter defines model for InputAccessGraphFilter.
type InputAccessGraphFilter struct {
	ClusterIds                       *map[string]interface{} `json:"clusterIds,omitempty"`
	EnvironmentIds                   *map[string]interface{} `json:"environmentIds,omitempty"`
	FeatureFlags                     *map[string]interface{} `json:"featureFlags,omitempty"`
	Hits                             *map[string]interface{} `json:"hits,omitempty"`
	IncludeOnlyClientsMatchingFilter *bool                   `json:"includeOnlyClientsMatchingFilter,omitempty"`
	LastSeen                         *map[string]interface{} `json:"lastSeen,omitempty"`
	NamespaceIds                     *map[string]interface{} `json:"namespaceIds,omitempty"`
	ServiceIds                       *map[string]interface{} `json:"serviceIds,omitempty"`
}

// InputAccessLogFilter  Access log filter
type InputAccessLogFilter struct {
	AccessStatusReasons *map[string]interface{} `json:"accessStatusReasons,omitempty"`
	AccessVerdicts      *map[string]interface{} `json:"accessVerdicts,omitempty"`
	ClusterIds          *map[string]interface{} `json:"clusterIds,omitempty"`
	EnvironmentIds      *map[string]interface{} `json:"environmentIds,omitempty"`
	FeatureFlags        *map[string]interface{} `json:"featureFlags,omitempty"`
	NamespaceIds        *map[string]interface{} `json:"namespaceIds,omitempty"`
	Pagination          *map[string]interface{} `json:"pagination,omitempty"`
	ServiceIds          *map[string]interface{} `json:"serviceIds,omitempty"`
	TimeRange           *map[string]interface{} `json:"timeRange,omitempty"`
}

// InputFeatureFlags defines model for InputFeatureFlags.
type InputFeatureFlags struct {
	EnableFindingsV2                 *bool `json:"enableFindingsV2,omitempty"`
	EnableIAMIntentsSuggestions      *bool `json:"enableIAMIntentsSuggestions,omitempty"`
	EnableInternetIntentsSuggestions *bool `json:"enableInternetIntentsSuggestions,omitempty"`
	IsCloudSecurityEnabled           *bool `json:"isCloudSecurityEnabled,omitempty"`
	IsCloudServicesDetectionEnabled  *bool `json:"isCloudServicesDetectionEnabled,omitempty"`
	UseClientIntentsV2               *bool `json:"useClientIntentsV2,omitempty"`
	UseTypedIntentsCTE               *bool `json:"useTypedIntentsCTE,omitempty"`
}

// InputServiceFilter  Service filter
type InputServiceFilter struct {
	ClusterIds     *[]string               `json:"clusterIds,omitempty"`
	EnvironmentIds *[]string               `json:"environmentIds,omitempty"`
	IntegrationIds *[]string               `json:"integrationIds,omitempty"`
	NamespaceIds   *[]string               `json:"namespaceIds,omitempty"`
	Search         *string                 `json:"search,omitempty"`
	ServiceIds     *[]string               `json:"serviceIds,omitempty"`
	ServiceType    *map[string]interface{} `json:"serviceType,omitempty"`
}

// InputTerraformResourceInfo defines model for InputTerraformResourceInfo.
type InputTerraformResourceInfo struct {
	AwsRoles      *[]map[string]interface{} `json:"awsRoles,omitempty"`
	GitCommitHash string                    `json:"gitCommitHash"`
	GitOriginUrl  string                    `json:"gitOriginUrl"`
	ModulePath    string                    `json:"modulePath"`
}

// Integration defines model for Integration.
type Integration struct {
	AwsInfo               *AWSInfo               `json:"awsInfo,omitempty"`
	AwsVisibilitySettings *AWSVisibilitySettings `json:"awsVisibilitySettings,omitempty"`
	AzureInfo             *AzureInfo             `json:"azureInfo,omitempty"`
	Cluster               *struct {
		Id string `json:"id"`
	} `json:"cluster,omitempty"`
	Components         *IntegrationComponents `json:"components,omitempty"`
	Credentials        IntegrationCredentials `json:"credentials"`
	DatabaseInfo       *DatabaseInfo          `json:"databaseInfo,omitempty"`
	DefaultEnvironment *struct {
		Id string `json:"id"`
	} `json:"defaultEnvironment,omitempty"`
	GcpInfo        *GCPInfo           `json:"gcpInfo,omitempty"`
	GitHubSettings *GitHubSettings    `json:"gitHubSettings,omitempty"`
	GitLabSettings *GitLabSettings    `json:"gitLabSettings,omitempty"`
	Id             string             `json:"id"`
	Name           string             `json:"name"`
	OrganizationId string             `json:"organizationId"`
	SiemSettings   *SIEMSettings      `json:"siemSettings,omitempty"`
	SlackSettings  *SlackSettings     `json:"slackSettings,omitempty"`
	Status         *IntegrationStatus `json:"status,omitempty"`
	Type           IntegrationType    `json:"type"`
}

// IntegrationType defines model for Integration.Type.
type IntegrationType string

// IntegrationAccessGraphFilter defines model for IntegrationAccessGraphFilter.
type IntegrationAccessGraphFilter struct {
	ClusterFilterType     *IntegrationAccessGraphFilterClusterFilterType     `json:"clusterFilterType,omitempty"`
	ClusterIds            *[]string                                          `json:"clusterIds,omitempty"`
	EnvironmentFilterType *IntegrationAccessGraphFilterEnvironmentFilterType `json:"environmentFilterType,omitempty"`
	EnvironmentIds        *[]string                                          `json:"environmentIds,omitempty"`
	LastSeenAfter         *time.Time                                         `json:"lastSeenAfter,omitempty"`
	NamespaceFilterType   *IntegrationAccessGraphFilterNamespaceFilterType   `json:"namespaceFilterType,omitempty"`
	NamespaceIds          *[]string                                          `json:"namespaceIds,omitempty"`
	ServiceFilterType     *IntegrationAccessGraphFilterServiceFilterType     `json:"serviceFilterType,omitempty"`
	ServiceIds            *[]string                                          `json:"serviceIds,omitempty"`
	Targets               *[]IntegrationAccessGraphFilterTargets             `json:"targets,omitempty"`
}

// IntegrationAccessGraphFilterClusterFilterType defines model for IntegrationAccessGraphFilter.ClusterFilterType.
type IntegrationAccessGraphFilterClusterFilterType string

// IntegrationAccessGraphFilterEnvironmentFilterType defines model for IntegrationAccessGraphFilter.EnvironmentFilterType.
type IntegrationAccessGraphFilterEnvironmentFilterType string

// IntegrationAccessGraphFilterNamespaceFilterType defines model for IntegrationAccessGraphFilter.NamespaceFilterType.
type IntegrationAccessGraphFilterNamespaceFilterType string

// IntegrationAccessGraphFilterServiceFilterType defines model for IntegrationAccessGraphFilter.ServiceFilterType.
type IntegrationAccessGraphFilterServiceFilterType string

// IntegrationAccessGraphFilterTargets defines model for IntegrationAccessGraphFilter.Targets.
type IntegrationAccessGraphFilterTargets string

// IntegrationComponents defines model for IntegrationComponents.
type IntegrationComponents struct {
	CredentialsOperator CredentialsOperatorComponent `json:"credentialsOperator"`
	IntentsOperator     IntentsOperatorComponent     `json:"intentsOperator"`
	NetworkMapper       NetworkMapperComponent       `json:"networkMapper"`
}

// IntegrationCredentials defines model for IntegrationCredentials.
type IntegrationCredentials struct {
	ClientId     string `json:"clientId"`
	ClientSecret string `json:"clientSecret"`
}

// IntegrationStatus defines model for IntegrationStatus.
type IntegrationStatus struct {
	LastSeen *time.Time                       `json:"lastSeen,omitempty"`
	Message  *string                          `json:"message,omitempty"`
	Metadata *[]IntegrationStatusMetadataItem `json:"metadata,omitempty"`
	State    IntegrationStatusState           `json:"state"`
}

// IntegrationStatusState defines model for IntegrationStatus.State.
type IntegrationStatusState string

// IntegrationStatusMetadataItem defines model for IntegrationStatusMetadataItem.
type IntegrationStatusMetadataItem struct {
	Extra   *[]LabelValueTuple `json:"extra,omitempty"`
	Message string             `json:"message"`
}

// IntentsOperatorComponent defines model for IntentsOperatorComponent.
type IntentsOperatorComponent struct {
	Configuration *IntentsOperatorConfiguration `json:"configuration,omitempty"`
	Status        ComponentStatus               `json:"status"`
	Type          IntentsOperatorComponentType  `json:"type"`
}

// IntentsOperatorComponentType defines model for IntentsOperatorComponent.Type.
type IntentsOperatorComponentType string

// IntentsOperatorConfiguration defines model for IntentsOperatorConfiguration.
type IntentsOperatorConfiguration struct {
	AwsIAMPolicyEnforcementEnabled        bool      `json:"awsIAMPolicyEnforcementEnabled"`
	AzureIAMPolicyEnforcementEnabled      bool      `json:"azureIAMPolicyEnforcementEnabled"`
	DatabaseEnforcementEnabled            bool      `json:"databaseEnforcementEnabled"`
	EgressNetworkPolicyEnforcementEnabled bool      `json:"egressNetworkPolicyEnforcementEnabled"`
	EnforcedNamespaces                    *[]string `json:"enforcedNamespaces,omitempty"`
	GcpIAMPolicyEnforcementEnabled        bool      `json:"gcpIAMPolicyEnforcementEnabled"`
	GlobalEnforcementEnabled              bool      `json:"globalEnforcementEnabled"`
	IstioPolicyEnforcementEnabled         bool      `json:"istioPolicyEnforcementEnabled"`
	KafkaACLEnforcementEnabled            bool      `json:"kafkaACLEnforcementEnabled"`
	LinkerdPolicyEnforcementEnabled       bool      `json:"linkerdPolicyEnforcementEnabled"`
	NetworkPolicyEnforcementEnabled       bool      `json:"networkPolicyEnforcementEnabled"`
	ProtectedServices                     []struct {
		Id string `json:"id"`
	} `json:"protectedServices"`
	ProtectedServicesEnabled bool `json:"protectedServicesEnabled"`
}

// Invite defines model for Invite.
type Invite struct {
	AcceptedAt *time.Time `json:"acceptedAt,omitempty"`
	Created    time.Time  `json:"created"`
	Email      string     `json:"email"`
	Id         string     `json:"id"`
	Inviter    struct {
		Id string `json:"id"`
	} `json:"inviter"`
	Organization struct {
		Id string `json:"id"`
	} `json:"organization"`
	OrganizationMembership OrganizationMembership `json:"organizationMembership"`
	Status                 InviteStatus           `json:"status"`
}

// InviteStatus defines model for Invite.Status.
type InviteStatus string

// KafkaServerConfig defines model for KafkaServerConfig.
type KafkaServerConfig struct {
	Address *string      `json:"address,omitempty"`
	Topics  []KafkaTopic `json:"topics"`
}

// KafkaTopic defines model for KafkaTopic.
type KafkaTopic struct {
	ClientIdentityRequired bool              `json:"clientIdentityRequired"`
	IntentsRequired        bool              `json:"intentsRequired"`
	Pattern                KafkaTopicPattern `json:"pattern"`
	Topic                  string            `json:"topic"`
}

// KafkaTopicPattern defines model for KafkaTopic.Pattern.
type KafkaTopicPattern string

// Label defines model for Label.
type Label struct {
	Key   string  `json:"key"`
	Value *string `json:"value,omitempty"`
}

// LabelInput defines model for LabelInput.
type LabelInput struct {
	Key   string  `json:"key"`
	Value *string `json:"value,omitempty"`
}

// LabelValueTuple defines model for LabelValueTuple.
type LabelValueTuple struct {
	Label string `json:"label"`
	Value string `json:"value"`
}

// Me defines model for Me.
type Me struct {
	Invites           []Invite                      `json:"invites"`
	User              User                          `json:"user"`
	UserOrganizations []UserOrganizationAssociation `json:"userOrganizations"`
}

// MergedYAMLFile defines model for MergedYAMLFile.
type MergedYAMLFile struct {
	Content  string             `json:"content"`
	FileName string             `json:"fileName"`
	Rows     []ClientIntentsRow `json:"rows"`
}

// Namespace defines model for Namespace.
type Namespace struct {
	Cluster     Cluster `json:"cluster"`
	Environment struct {
		Id string `json:"id"`
	} `json:"environment"`
	Id           string `json:"id"`
	Name         string `json:"name"`
	ServiceCount int32  `json:"serviceCount"`
	Services     []struct {
		Id string `json:"id"`
	} `json:"services"`
}

// NamespaceFilterInput defines model for NamespaceFilterInput.
type NamespaceFilterInput struct {
	ClusterIds     *[]string `json:"clusterIds,omitempty"`
	EnvironmentIds *[]string `json:"environmentIds,omitempty"`
	Name           *string   `json:"name,omitempty"`
}

// NetworkMapperComponent defines model for NetworkMapperComponent.
type NetworkMapperComponent struct {
	Status ComponentStatus            `json:"status"`
	Type   NetworkMapperComponentType `json:"type"`
}

// NetworkMapperComponentType defines model for NetworkMapperComponent.Type.
type NetworkMapperComponentType string

// NumericFilterValue defines model for NumericFilterValue.
type NumericFilterValue struct {
	Operator NumericFilterValueOperator `json:"operator"`
	Value    int32                      `json:"value"`
}

// NumericFilterValueOperator defines model for NumericFilterValue.Operator.
type NumericFilterValueOperator string

// Organization defines model for Organization.
type Organization struct {
	Created    time.Time            `json:"created"`
	Id         string               `json:"id"`
	ImageURL   *string              `json:"imageURL,omitempty"`
	Name       string               `json:"name"`
	Settings   OrganizationSettings `json:"settings"`
	UniqueName string               `json:"uniqueName"`
}

// OrganizationMembership defines model for OrganizationMembership.
type OrganizationMembership struct {
	Restrictions *OrganizationMembershipRestrictions `json:"restrictions,omitempty"`
	Role         OrganizationMembershipRole          `json:"role"`
}

// OrganizationMembershipRole defines model for OrganizationMembership.Role.
type OrganizationMembershipRole string

// OrganizationMembershipInput defines model for OrganizationMembershipInput.
type OrganizationMembershipInput struct {
	Restrictions *map[string]interface{}         `json:"restrictions,omitempty"`
	Role         OrganizationMembershipInputRole `json:"role"`
}

// OrganizationMembershipInputRole defines model for OrganizationMembershipInput.Role.
type OrganizationMembershipInputRole string

// OrganizationMembershipRestrictions defines model for OrganizationMembershipRestrictions.
type OrganizationMembershipRestrictions struct {
	ClusterIds     *IDFilterValue `json:"clusterIds,omitempty"`
	EnvironmentIds *IDFilterValue `json:"environmentIds,omitempty"`
	NamespaceIds   *IDFilterValue `json:"namespaceIds,omitempty"`
	ServiceIds     *IDFilterValue `json:"serviceIds,omitempty"`
}

// OrganizationSettings defines model for OrganizationSettings.
type OrganizationSettings struct {
	DefaultIntentsApprovalActionByEnv []DefaultIntentsApprovalActionByEnv    `json:"defaultIntentsApprovalActionByEnv"`
	Domains                           *[]string                              `json:"domains,omitempty"`
	DomainsDefaultRole                OrganizationSettingsDomainsDefaultRole `json:"domainsDefaultRole"`
	EnforcedRegulations               *[]string                              `json:"enforcedRegulations,omitempty"`
	IgnoreInternetIntents             *bool                                  `json:"ignoreInternetIntents,omitempty"`
	IgnoredCloudDomains               *[]string                              `json:"ignoredCloudDomains,omitempty"`
}

// OrganizationSettingsDomainsDefaultRole defines model for OrganizationSettings.DomainsDefaultRole.
type OrganizationSettingsDomainsDefaultRole string

// OrganizationSettingsInput defines model for OrganizationSettingsInput.
type OrganizationSettingsInput struct {
	DefaultIntentsApprovalActionByEnv *[]map[string]interface{} `json:"defaultIntentsApprovalActionByEnv,omitempty"`
	Domains                           *[]string                 `json:"domains,omitempty"`
	EnforcedRegulations               *[]string                 `json:"enforcedRegulations,omitempty"`
	IgnoreInternetIntents             *bool                     `json:"ignoreInternetIntents,omitempty"`
	IgnoredCloudDomains               *[]string                 `json:"ignoredCloudDomains,omitempty"`
}

// PaginationInput defines model for PaginationInput.
type PaginationInput struct {
	Limit  *int32 `json:"limit,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
}

// PaginationMeta  Pagination types
type PaginationMeta struct {
	Total *int32 `json:"total,omitempty"`
}

// SIEMIntegrationTrigger defines model for SIEMIntegrationTrigger.
type SIEMIntegrationTrigger struct {
	IsActive bool `json:"isActive"`
}

// SIEMSettings defines model for SIEMSettings.
type SIEMSettings struct {
	FindingTriggers     []SIEMTrigger          `json:"findingTriggers"`
	IntegrationTriggers SIEMIntegrationTrigger `json:"integrationTriggers"`
	IsActive            bool                   `json:"isActive"`
	ServiceTriggers     []SIEMTrigger          `json:"serviceTriggers"`
	SyslogFacility      int32                  `json:"syslogFacility"`
	SyslogHostname      string                 `json:"syslogHostname"`
	SyslogPort          int32                  `json:"syslogPort"`
	TlsConfiguration    *TLSConfiguration      `json:"tlsConfiguration,omitempty"`
}

// SIEMSettingsInput defines model for SIEMSettingsInput.
type SIEMSettingsInput struct {
	FindingTriggers     []map[string]interface{} `json:"findingTriggers"`
	IntegrationTriggers map[string]interface{}   `json:"integrationTriggers"`
	IsActive            bool                     `json:"isActive"`
	ServiceTriggers     []map[string]interface{} `json:"serviceTriggers"`
	SyslogFacility      int32                    `json:"syslogFacility"`
	SyslogHostname      string                   `json:"syslogHostname"`
	SyslogPort          int32                    `json:"syslogPort"`
	TlsConfiguration    *map[string]interface{}  `json:"tlsConfiguration,omitempty"`
}

// SIEMTrigger defines model for SIEMTrigger.
type SIEMTrigger struct {
	Filter IntegrationAccessGraphFilter `json:"filter"`
}

// ServerAlias defines model for ServerAlias.
type ServerAlias struct {
	Kind *string `json:"kind,omitempty"`
	Name string  `json:"name"`
}

// ServerBlockingStatus defines model for ServerBlockingStatus.
type ServerBlockingStatus struct {
	Reason  ServerBlockingStatusReason  `json:"reason"`
	Verdict ServerBlockingStatusVerdict `json:"verdict"`
}

// ServerBlockingStatusReason defines model for ServerBlockingStatus.Reason.
type ServerBlockingStatusReason string

// ServerBlockingStatusVerdict defines model for ServerBlockingStatus.Verdict.
type ServerBlockingStatusVerdict string

// ServerProtectionStatus defines model for ServerProtectionStatus.
type ServerProtectionStatus struct {
	Reason  ServerProtectionStatusReason  `json:"reason"`
	Verdict ServerProtectionStatusVerdict `json:"verdict"`
}

// ServerProtectionStatusReason defines model for ServerProtectionStatus.Reason.
type ServerProtectionStatusReason string

// ServerProtectionStatusVerdict defines model for ServerProtectionStatus.Verdict.
type ServerProtectionStatusVerdict string

// ServerProtectionStatuses defines model for ServerProtectionStatuses.
type ServerProtectionStatuses struct {
	IstioPolicies   ServerProtectionStatus `json:"istioPolicies"`
	KafkaACLs       ServerProtectionStatus `json:"kafkaACLs"`
	NetworkPolicies ServerProtectionStatus `json:"networkPolicies"`
}

// Service defines model for Service.
type Service struct {
	Aliases                *[]ServerAlias          `json:"aliases,omitempty"`
	AwsResource            *AWSResource            `json:"awsResource,omitempty"`
	AwsVisibility          *AWSVisibility          `json:"awsVisibility,omitempty"`
	AzureResource          *AzureResource          `json:"azureResource,omitempty"`
	CertificateInformation *CertificateInformation `json:"certificateInformation,omitempty"`
	CloudIam               *CloudIam               `json:"cloudIam,omitempty"`
	DatabaseIntegration    *struct {
		Id string `json:"id"`
	} `json:"databaseIntegration,omitempty"`
	DetectedCloudServer     *DetectedCloudServer `json:"detectedCloudServer,omitempty"`
	DiscoveredByIntegration *struct {
		Id string `json:"id"`
	} `json:"discoveredByIntegration,omitempty"`
	Environment struct {
		Id string `json:"id"`
	} `json:"environment"`
	GcpResource       *GCPResource       `json:"gcpResource,omitempty"`
	Id                string             `json:"id"`
	KafkaServerConfig *KafkaServerConfig `json:"kafkaServerConfig,omitempty"`
	Name              string             `json:"name"`
	Namespace         *Namespace         `json:"namespace,omitempty"`
	NetworkPolicies   *[]struct {
		Id string `json:"id"`
	} `json:"networkPolicies,omitempty"`
	ServiceAccount *string   `json:"serviceAccount,omitempty"`
	Tags           *[]string `json:"tags,omitempty"`
	WorkloadKind   *string   `json:"workloadKind,omitempty"`
}

// ServiceAccessGraph defines model for ServiceAccessGraph.
type ServiceAccessGraph struct {
	AccessStatus ServiceAccessStatus `json:"accessStatus"`
	Calls        []AccessGraphEdge   `json:"calls"`
	Serves       []AccessGraphEdge   `json:"serves"`
	Service      struct {
		Id string `json:"id"`
	} `json:"service"`
	Types []ServiceAccessGraphTypes `json:"types"`
}

// ServiceAccessGraphTypes defines model for ServiceAccessGraph.Types.
type ServiceAccessGraphTypes string

// ServiceAccessStatus defines model for ServiceAccessStatus.
type ServiceAccessStatus struct {
	BlockingStatus                        ServerBlockingStatus     `json:"blockingStatus"`
	HasAppliedIntents                     bool                     `json:"hasAppliedIntents"`
	ProtectionStatus                      ServerProtectionStatus   `json:"protectionStatus"`
	ProtectionStatuses                    ServerProtectionStatuses `json:"protectionStatuses"`
	UseIstioPoliciesInAccessGraphStates   bool                     `json:"useIstioPoliciesInAccessGraphStates"`
	UseKafkaACLsInAccessGraphStates       bool                     `json:"useKafkaACLsInAccessGraphStates"`
	UseLinkerdPoliciesInAccessGraphStates bool                     `json:"useLinkerdPoliciesInAccessGraphStates"`
	UseNetworkPoliciesInAccessGraphStates bool                     `json:"useNetworkPoliciesInAccessGraphStates"`
}

// ServiceClientIntents defines model for ServiceClientIntents.
type ServiceClientIntents struct {
	AppliedIntentEvents *[]ClientIntentEvent      `json:"appliedIntentEvents,omitempty"`
	AppliedIntentStatus *ClientIntentStatus       `json:"appliedIntentStatus,omitempty"`
	AsClient            *ClientIntentsFiles       `json:"asClient,omitempty"`
	AsClientStatus      *ClientIntentAccessStatus `json:"asClientStatus,omitempty"`
	AsServer            *ClientIntentsFiles       `json:"asServer,omitempty"`
	AsServerStatus      *ClientIntentAccessStatus `json:"asServerStatus,omitempty"`
}

// ServicesResponse defines model for ServicesResponse.
type ServicesResponse struct {
	Data []struct {
		Id string `json:"id"`
	} `json:"data"`

	// Meta  Pagination types
	Meta *PaginationMeta `json:"meta,omitempty"`
}

// SlackChannelInfo defines model for SlackChannelInfo.
type SlackChannelInfo struct {
	ChannelName string `json:"channelName"`
}

// SlackChannelIntegrationAlerts defines model for SlackChannelIntegrationAlerts.
type SlackChannelIntegrationAlerts struct {
	ChannelInfo SlackChannelInfo `json:"channelInfo"`
}

// SlackFilterPair defines model for SlackFilterPair.
type SlackFilterPair struct {
	ChannelInfo SlackChannelInfo             `json:"channelInfo"`
	Filter      IntegrationAccessGraphFilter `json:"filter"`
}

// SlackSettings defines model for SlackSettings.
type SlackSettings struct {
	ChannelFilterPairs       []SlackFilterPair                `json:"channelFilterPairs"`
	ChannelIntegrationAlerts *[]SlackChannelIntegrationAlerts `json:"channelIntegrationAlerts,omitempty"`
	IsActive                 bool                             `json:"isActive"`
}

// SlackSettingsInput defines model for SlackSettingsInput.
type SlackSettingsInput struct {
	ChannelFilterPairs       []map[string]interface{}  `json:"channelFilterPairs"`
	ChannelIntegrationAlerts *[]map[string]interface{} `json:"channelIntegrationAlerts,omitempty"`
	IsActive                 bool                      `json:"isActive"`
}

// TLSConfiguration defines model for TLSConfiguration.
type TLSConfiguration struct {
	CaCertificate *string `json:"caCertificate,omitempty"`
	Certificate   string  `json:"certificate"`
}

// TerraformAwsPolicyInfo defines model for TerraformAwsPolicyInfo.
type TerraformAwsPolicyInfo struct {
	Address string `json:"address"`
	Arn     string `json:"arn"`
}

// TerraformAwsRoleInfo defines model for TerraformAwsRoleInfo.
type TerraformAwsRoleInfo struct {
	Address          string                    `json:"address"`
	Arn              string                    `json:"arn"`
	AttachedPolicies *[]TerraformAwsPolicyInfo `json:"attachedPolicies,omitempty"`
	InlinePolicy     string                    `json:"inlinePolicy"`
}

// TerraformResourceInfo defines model for TerraformResourceInfo.
type TerraformResourceInfo struct {
	AwsRoles      *[]TerraformAwsRoleInfo `json:"awsRoles,omitempty"`
	GitCommitHash string                  `json:"gitCommitHash"`
	GitOriginUrl  string                  `json:"gitOriginUrl"`
	ModulePath    string                  `json:"modulePath"`
}

// TimeFilterValue defines model for TimeFilterValue.
type TimeFilterValue struct {
	Operator TimeFilterValueOperator `json:"operator"`
	Value    time.Time               `json:"value"`
}

// TimeFilterValueOperator defines model for TimeFilterValue.Operator.
type TimeFilterValueOperator string

// TimeRange defines model for TimeRange.
type TimeRange struct {
	From *time.Time `json:"from,omitempty"`
	To   *time.Time `json:"to,omitempty"`
}

// TrafficLevel defines model for TrafficLevel.
type TrafficLevel struct {
	DataBytesPerSecond  int32     `json:"dataBytesPerSecond"`
	FlowsCountPerSecond int32     `json:"flowsCountPerSecond"`
	LastReportedAt      time.Time `json:"lastReportedAt"`
}

// User defines model for User.
type User struct {
	AuthProviderUserId string `json:"authProviderUserId"`
	Email              string `json:"email"`
	Id                 string `json:"id"`
	ImageURL           string `json:"imageURL"`
	Name               string `json:"name"`
}

// UserOrganizationAssociation defines model for UserOrganizationAssociation.
type UserOrganizationAssociation struct {
	Membership OrganizationMembership `json:"membership"`
	Org        Organization           `json:"org"`
	User       struct {
		Id string `json:"id"`
	} `json:"user"`
}

// APPLIEDINTENTSERROR defines model for APPLIED_INTENTS_ERROR.
type APPLIEDINTENTSERROR = Error

// BADUSERINPUT defines model for BAD_USER_INPUT.
type BADUSERINPUT = Error

// CONFLICT defines model for CONFLICT.
type CONFLICT = Error

// FORBIDDEN defines model for FORBIDDEN.
type FORBIDDEN = Error

// INTERNALSERVERERROR defines model for INTERNAL_SERVER_ERROR.
type INTERNALSERVERERROR = Error

// NOTFOUND defines model for NOT_FOUND.
type NOTFOUND = Error

// TIMEOUT defines model for TIMEOUT.
type TIMEOUT = Error

// UNAUTHENTICATED defines model for UNAUTHENTICATED.
type UNAUTHENTICATED = Error

// UNEXPECTEDERROR defines model for UNEXPECTED_ERROR.
type UNEXPECTEDERROR = Error

// AccessGraphQueryJSONBody defines parameters for AccessGraphQuery.
type AccessGraphQueryJSONBody struct {
	Filter *InputAccessGraphFilter `json:"filter,omitempty"`
}

// ClientIntentsQueryJSONBody defines parameters for ClientIntentsQuery.
type ClientIntentsQueryJSONBody struct {
	ClusterIds   *[]string          `json:"clusterIds,omitempty"`
	FeatureFlags *InputFeatureFlags `json:"featureFlags,omitempty"`

	// Filter  Service filter
	Filter        InputServiceFilter `json:"filter"`
	LastSeenAfter *time.Time         `json:"lastSeenAfter,omitempty"`
}

// ServiceClientIntentsQueryJSONBody defines parameters for ServiceClientIntentsQuery.
type ServiceClientIntentsQueryJSONBody struct {
	AsServiceId           *string            `json:"asServiceId,omitempty"`
	ClusterIds            *[]string          `json:"clusterIds,omitempty"`
	EnableInternetIntents *bool              `json:"enableInternetIntents,omitempty"`
	FeatureFlags          *InputFeatureFlags `json:"featureFlags,omitempty"`
	LastSeenAfter         *time.Time         `json:"lastSeenAfter,omitempty"`
}

// ServiceIncomingInternetConnectionsQueryParams defines parameters for ServiceIncomingInternetConnectionsQuery.
type ServiceIncomingInternetConnectionsQueryParams struct {
	LastSeenAfter time.Time `form:"lastSeenAfter" json:"lastSeenAfter"`
}

// AccessLogQueryJSONBody defines parameters for AccessLogQuery.
type AccessLogQueryJSONBody struct {
	// Filter  Access log filter
	Filter *InputAccessLogFilter `json:"filter,omitempty"`
}

// OneClusterQueryParams defines parameters for OneClusterQuery.
type OneClusterQueryParams struct {
	Name string `form:"name" json:"name"`
}

// ClustersQueryParams defines parameters for ClustersQuery.
type ClustersQueryParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// CreateClusterMutationJSONBody defines parameters for CreateClusterMutation.
type CreateClusterMutationJSONBody struct {
	Name string `json:"name"`
}

// UpdateClusterMutationJSONBody defines parameters for UpdateClusterMutation.
type UpdateClusterMutationJSONBody struct {
	Configuration *ClusterConfigurationInput `json:"configuration,omitempty"`
	Name          *string                    `json:"name,omitempty"`
}

// OneEnvironmentQueryParams defines parameters for OneEnvironmentQuery.
type OneEnvironmentQueryParams struct {
	Name string `form:"name" json:"name"`
}

// EnvironmentsQueryParams defines parameters for EnvironmentsQuery.
type EnvironmentsQueryParams struct {
	Name   *string       `form:"name,omitempty" json:"name,omitempty"`
	Labels *[]LabelInput `form:"labels,omitempty" json:"labels,omitempty"`
}

// CreateEnvironmentMutationJSONBody defines parameters for CreateEnvironmentMutation.
type CreateEnvironmentMutationJSONBody struct {
	Labels *[]LabelInput `json:"labels,omitempty"`
	Name   string        `json:"name"`
}

// UpdateEnvironmentMutationJSONBody defines parameters for UpdateEnvironmentMutation.
type UpdateEnvironmentMutationJSONBody struct {
	Labels *[]LabelInput `json:"labels,omitempty"`
	Name   *string       `json:"name,omitempty"`
}

// AddEnvironmentLabelMutationJSONBody defines parameters for AddEnvironmentLabelMutation.
type AddEnvironmentLabelMutationJSONBody struct {
	Label LabelInput `json:"label"`
}

// OneIntegrationQueryParams defines parameters for OneIntegrationQuery.
type OneIntegrationQueryParams struct {
	IntegrationType *OneIntegrationQueryParamsIntegrationType `form:"integrationType,omitempty" json:"integrationType,omitempty"`
	EnvironmentId   *string                                   `form:"environmentId,omitempty" json:"environmentId,omitempty"`
	ClusterId       *string                                   `form:"clusterId,omitempty" json:"clusterId,omitempty"`
	Name            *string                                   `form:"name,omitempty" json:"name,omitempty"`
}

// OneIntegrationQueryParamsIntegrationType defines parameters for OneIntegrationQuery.
type OneIntegrationQueryParamsIntegrationType string

// IntegrationsQueryParams defines parameters for IntegrationsQuery.
type IntegrationsQueryParams struct {
	Name            *string                                 `form:"name,omitempty" json:"name,omitempty"`
	IntegrationType *IntegrationsQueryParamsIntegrationType `form:"integrationType,omitempty" json:"integrationType,omitempty"`
	EnvironmentId   *string                                 `form:"environmentId,omitempty" json:"environmentId,omitempty"`
	ClusterId       *string                                 `form:"clusterId,omitempty" json:"clusterId,omitempty"`
}

// IntegrationsQueryParamsIntegrationType defines parameters for IntegrationsQuery.
type IntegrationsQueryParamsIntegrationType string

// UpdateAWSIntegrationMutationJSONBody defines parameters for UpdateAWSIntegrationMutation.
type UpdateAWSIntegrationMutationJSONBody struct {
	AwsIntegration *AWSInfoInput `json:"awsIntegration,omitempty"`
	EnvironmentId  *string       `json:"environmentId,omitempty"`
	Id             string        `json:"id"`
	Name           *string       `json:"name,omitempty"`
}

// CreateAWSIntegrationMutationJSONBody defines parameters for CreateAWSIntegrationMutation.
type CreateAWSIntegrationMutationJSONBody struct {
	AwsIntegration AWSInfoInput `json:"awsIntegration"`
	Name           string       `json:"name"`
}

// UpdateAwsVisibilityIntegrationMutationJSONBody defines parameters for UpdateAwsVisibilityIntegrationMutation.
type UpdateAwsVisibilityIntegrationMutationJSONBody struct {
	AwsVisibilitySettings *AWSVisibilitySettingsInput `json:"awsVisibilitySettings,omitempty"`
	Id                    string                      `json:"id"`
	Name                  *string                     `json:"name,omitempty"`
}

// CreateAwsVisibilityIntegrationMutationJSONBody defines parameters for CreateAwsVisibilityIntegrationMutation.
type CreateAwsVisibilityIntegrationMutationJSONBody struct {
	AwsVisibilitySettings AWSVisibilitySettingsInput `json:"awsVisibilitySettings"`
	Name                  string                     `json:"name"`
}

// UpdateAzureIntegrationMutationJSONBody defines parameters for UpdateAzureIntegrationMutation.
type UpdateAzureIntegrationMutationJSONBody struct {
	AzureIntegration *AzureInfoInput `json:"azureIntegration,omitempty"`
	Id               string          `json:"id"`
	Name             *string         `json:"name,omitempty"`
}

// CreateAzureIntegrationMutationJSONBody defines parameters for CreateAzureIntegrationMutation.
type CreateAzureIntegrationMutationJSONBody struct {
	AzureIntegration AzureInfoInput `json:"azureIntegration"`
	Name             string         `json:"name"`
}

// CreateDatabaseIntegrationMutationJSONBody defines parameters for CreateDatabaseIntegrationMutation.
type CreateDatabaseIntegrationMutationJSONBody struct {
	DatabaseInfo DatabaseInfoInput `json:"databaseInfo"`
	Name         string            `json:"name"`
}

// UpdateDatabaseIntegrationMutationJSONBody defines parameters for UpdateDatabaseIntegrationMutation.
type UpdateDatabaseIntegrationMutationJSONBody struct {
	DatabaseInfo *DatabaseInfoInput `json:"databaseInfo,omitempty"`
	Name         *string            `json:"name,omitempty"`
}

// UpdateGCPIntegrationMutationJSONBody defines parameters for UpdateGCPIntegrationMutation.
type UpdateGCPIntegrationMutationJSONBody struct {
	GcpIntegration *GCPInfoInput `json:"gcpIntegration,omitempty"`
	Id             string        `json:"id"`
	Name           *string       `json:"name,omitempty"`
}

// CreateGCPIntegrationMutationJSONBody defines parameters for CreateGCPIntegrationMutation.
type CreateGCPIntegrationMutationJSONBody struct {
	GcpIntegration GCPInfoInput `json:"gcpIntegration"`
	Name           string       `json:"name"`
}

// CreateGenericIntegrationMutationJSONBody defines parameters for CreateGenericIntegrationMutation.
type CreateGenericIntegrationMutationJSONBody struct {
	Name string `json:"name"`
}

// UpdateGenericIntegrationMutationJSONBody defines parameters for UpdateGenericIntegrationMutation.
type UpdateGenericIntegrationMutationJSONBody struct {
	Name *string `json:"name,omitempty"`
}

// UpdateGitHubIntegrationMutationJSONBody defines parameters for UpdateGitHubIntegrationMutation.
type UpdateGitHubIntegrationMutationJSONBody struct {
	GitHubSettings GitHubSettingsInput `json:"gitHubSettings"`
	Id             string              `json:"id"`
	Name           string              `json:"name"`
}

// CreateGitHubIntegrationMutationJSONBody defines parameters for CreateGitHubIntegrationMutation.
type CreateGitHubIntegrationMutationJSONBody struct {
	GitHubSettings GitHubSettingsInput `json:"gitHubSettings"`
	Name           string              `json:"name"`
}

// UpdateGitLabIntegrationMutationJSONBody defines parameters for UpdateGitLabIntegrationMutation.
type UpdateGitLabIntegrationMutationJSONBody struct {
	GitLabSettings GitLabSettingsInput `json:"gitLabSettings"`
	Id             string              `json:"id"`
	Name           string              `json:"name"`
}

// CreateGitLabIntegrationMutationJSONBody defines parameters for CreateGitLabIntegrationMutation.
type CreateGitLabIntegrationMutationJSONBody struct {
	GitLabSettings GitLabSettingsInput `json:"gitLabSettings"`
	Name           string              `json:"name"`
}

// CreateKubernetesIntegrationMutationJSONBody defines parameters for CreateKubernetesIntegrationMutation.
type CreateKubernetesIntegrationMutationJSONBody struct {
	EnvironmentId string `json:"environmentId"`
	Name          string `json:"name"`
}

// UpdateKubernetesIntegrationMutationJSONBody defines parameters for UpdateKubernetesIntegrationMutation.
type UpdateKubernetesIntegrationMutationJSONBody struct {
	EnvironmentId *string `json:"environmentId,omitempty"`
	Name          *string `json:"name,omitempty"`
}

// CreateSIEMIntegrationMutationJSONBody defines parameters for CreateSIEMIntegrationMutation.
type CreateSIEMIntegrationMutationJSONBody struct {
	Name         string            `json:"name"`
	SiemSettings SIEMSettingsInput `json:"siemSettings"`
}

// UpdateSIEMIntegrationMutationJSONBody defines parameters for UpdateSIEMIntegrationMutation.
type UpdateSIEMIntegrationMutationJSONBody struct {
	Name         string            `json:"name"`
	SiemSettings SIEMSettingsInput `json:"siemSettings"`
}

// UpdateSlackIntegrationMutationJSONBody defines parameters for UpdateSlackIntegrationMutation.
type UpdateSlackIntegrationMutationJSONBody struct {
	Id            string             `json:"id"`
	Name          string             `json:"name"`
	SlackSettings SlackSettingsInput `json:"slackSettings"`
}

// CreateSlackIntegrationMutationJSONBody defines parameters for CreateSlackIntegrationMutation.
type CreateSlackIntegrationMutationJSONBody struct {
	Name          string             `json:"name"`
	SlackSettings SlackSettingsInput `json:"slackSettings"`
}

// OneInviteQueryParams defines parameters for OneInviteQuery.
type OneInviteQueryParams struct {
	Email  *openapi_types.Email        `form:"email,omitempty" json:"email,omitempty"`
	Status *OneInviteQueryParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// OneInviteQueryParamsStatus defines parameters for OneInviteQuery.
type OneInviteQueryParamsStatus string

// InvitesQueryParams defines parameters for InvitesQuery.
type InvitesQueryParams struct {
	Email  *openapi_types.Email      `form:"email,omitempty" json:"email,omitempty"`
	Status *InvitesQueryParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// InvitesQueryParamsStatus defines parameters for InvitesQuery.
type InvitesQueryParamsStatus string

// CreateInviteMutationJSONBody defines parameters for CreateInviteMutation.
type CreateInviteMutationJSONBody struct {
	Email                  openapi_types.Email          `json:"email"`
	OrganizationMembership *OrganizationMembershipInput `json:"organizationMembership,omitempty"`
}

// AcceptInviteMutationJSONBody defines parameters for AcceptInviteMutation.
type AcceptInviteMutationJSONBody = map[string]interface{}

// OneNamespaceQueryParams defines parameters for OneNamespaceQuery.
type OneNamespaceQueryParams struct {
	EnvironmentId *string `form:"environmentId,omitempty" json:"environmentId,omitempty"`
	ClusterId     *string `form:"clusterId,omitempty" json:"clusterId,omitempty"`
	Name          *string `form:"name,omitempty" json:"name,omitempty"`
}

// NamespacesQueryParams defines parameters for NamespacesQuery.
type NamespacesQueryParams struct {
	EnvironmentId *string               `form:"environmentId,omitempty" json:"environmentId,omitempty"`
	ClusterId     *string               `form:"clusterId,omitempty" json:"clusterId,omitempty"`
	Name          *string               `form:"name,omitempty" json:"name,omitempty"`
	Filter        *NamespaceFilterInput `form:"filter,omitempty" json:"filter,omitempty"`
}

// AssociateNamespaceToEnvMutationJSONBody defines parameters for AssociateNamespaceToEnvMutation.
type AssociateNamespaceToEnvMutationJSONBody struct {
	EnvironmentId *string `json:"environmentId,omitempty"`
}

// CreateOrganizationMutationJSONBody defines parameters for CreateOrganizationMutation.
type CreateOrganizationMutationJSONBody struct {
	Name *string `json:"name,omitempty"`
}

// UpdateOrganizationMutationJSONBody defines parameters for UpdateOrganizationMutation.
type UpdateOrganizationMutationJSONBody struct {
	ImageURL *string                    `json:"imageURL,omitempty"`
	Name     *string                    `json:"name,omitempty"`
	Settings *OrganizationSettingsInput `json:"settings,omitempty"`
}

// PaginateServicesQueryParams defines parameters for PaginateServicesQuery.
type PaginateServicesQueryParams struct {
	Filter       *InputServiceFilter `form:"filter,omitempty" json:"filter,omitempty"`
	Pagination   *PaginationInput    `form:"pagination,omitempty" json:"pagination,omitempty"`
	FeatureFlags *InputFeatureFlags  `form:"featureFlags,omitempty" json:"featureFlags,omitempty"`
}

// OneServiceQueryParams defines parameters for OneServiceQuery.
type OneServiceQueryParams struct {
	EnvironmentId *string `form:"environmentId,omitempty" json:"environmentId,omitempty"`
	NamespaceId   *string `form:"namespaceId,omitempty" json:"namespaceId,omitempty"`
	Name          *string `form:"name,omitempty" json:"name,omitempty"`
}

// ServicesQueryParams defines parameters for ServicesQuery.
type ServicesQueryParams struct {
	EnvironmentId *string             `form:"environmentId,omitempty" json:"environmentId,omitempty"`
	NamespaceId   *string             `form:"namespaceId,omitempty" json:"namespaceId,omitempty"`
	Name          *string             `form:"name,omitempty" json:"name,omitempty"`
	Filter        *InputServiceFilter `form:"filter,omitempty" json:"filter,omitempty"`
	FeatureFlags  *InputFeatureFlags  `form:"featureFlags,omitempty" json:"featureFlags,omitempty"`
}

// UpdateServiceMutationJSONBody defines parameters for UpdateServiceMutation.
type UpdateServiceMutationJSONBody struct {
	Tags *[]string `json:"tags,omitempty"`
}

// TerraformResourceByIdentityQueryParams defines parameters for TerraformResourceByIdentityQuery.
type TerraformResourceByIdentityQueryParams struct {
	ModulePath    string `form:"modulePath" json:"modulePath"`
	GitOriginUrl  string `form:"gitOriginUrl" json:"gitOriginUrl"`
	GitCommitHash string `form:"gitCommitHash" json:"gitCommitHash"`
}

// ReportTerraformResourcesMutationJSONBody defines parameters for ReportTerraformResourcesMutation.
type ReportTerraformResourcesMutationJSONBody struct {
	ResourceInfo InputTerraformResourceInfo `json:"resourceInfo"`
}

// AccessGraphQueryJSONRequestBody defines body for AccessGraphQuery for application/json ContentType.
type AccessGraphQueryJSONRequestBody AccessGraphQueryJSONBody

// ClientIntentsQueryJSONRequestBody defines body for ClientIntentsQuery for application/json ContentType.
type ClientIntentsQueryJSONRequestBody ClientIntentsQueryJSONBody

// ServiceClientIntentsQueryJSONRequestBody defines body for ServiceClientIntentsQuery for application/json ContentType.
type ServiceClientIntentsQueryJSONRequestBody ServiceClientIntentsQueryJSONBody

// AccessLogQueryJSONRequestBody defines body for AccessLogQuery for application/json ContentType.
type AccessLogQueryJSONRequestBody AccessLogQueryJSONBody

// CreateClusterMutationJSONRequestBody defines body for CreateClusterMutation for application/json ContentType.
type CreateClusterMutationJSONRequestBody CreateClusterMutationJSONBody

// UpdateClusterMutationJSONRequestBody defines body for UpdateClusterMutation for application/json ContentType.
type UpdateClusterMutationJSONRequestBody UpdateClusterMutationJSONBody

// CreateEnvironmentMutationJSONRequestBody defines body for CreateEnvironmentMutation for application/json ContentType.
type CreateEnvironmentMutationJSONRequestBody CreateEnvironmentMutationJSONBody

// UpdateEnvironmentMutationJSONRequestBody defines body for UpdateEnvironmentMutation for application/json ContentType.
type UpdateEnvironmentMutationJSONRequestBody UpdateEnvironmentMutationJSONBody

// AddEnvironmentLabelMutationJSONRequestBody defines body for AddEnvironmentLabelMutation for application/json ContentType.
type AddEnvironmentLabelMutationJSONRequestBody AddEnvironmentLabelMutationJSONBody

// UpdateAWSIntegrationMutationJSONRequestBody defines body for UpdateAWSIntegrationMutation for application/json ContentType.
type UpdateAWSIntegrationMutationJSONRequestBody UpdateAWSIntegrationMutationJSONBody

// CreateAWSIntegrationMutationJSONRequestBody defines body for CreateAWSIntegrationMutation for application/json ContentType.
type CreateAWSIntegrationMutationJSONRequestBody CreateAWSIntegrationMutationJSONBody

// UpdateAwsVisibilityIntegrationMutationJSONRequestBody defines body for UpdateAwsVisibilityIntegrationMutation for application/json ContentType.
type UpdateAwsVisibilityIntegrationMutationJSONRequestBody UpdateAwsVisibilityIntegrationMutationJSONBody

// CreateAwsVisibilityIntegrationMutationJSONRequestBody defines body for CreateAwsVisibilityIntegrationMutation for application/json ContentType.
type CreateAwsVisibilityIntegrationMutationJSONRequestBody CreateAwsVisibilityIntegrationMutationJSONBody

// UpdateAzureIntegrationMutationJSONRequestBody defines body for UpdateAzureIntegrationMutation for application/json ContentType.
type UpdateAzureIntegrationMutationJSONRequestBody UpdateAzureIntegrationMutationJSONBody

// CreateAzureIntegrationMutationJSONRequestBody defines body for CreateAzureIntegrationMutation for application/json ContentType.
type CreateAzureIntegrationMutationJSONRequestBody CreateAzureIntegrationMutationJSONBody

// CreateDatabaseIntegrationMutationJSONRequestBody defines body for CreateDatabaseIntegrationMutation for application/json ContentType.
type CreateDatabaseIntegrationMutationJSONRequestBody CreateDatabaseIntegrationMutationJSONBody

// UpdateDatabaseIntegrationMutationJSONRequestBody defines body for UpdateDatabaseIntegrationMutation for application/json ContentType.
type UpdateDatabaseIntegrationMutationJSONRequestBody UpdateDatabaseIntegrationMutationJSONBody

// UpdateGCPIntegrationMutationJSONRequestBody defines body for UpdateGCPIntegrationMutation for application/json ContentType.
type UpdateGCPIntegrationMutationJSONRequestBody UpdateGCPIntegrationMutationJSONBody

// CreateGCPIntegrationMutationJSONRequestBody defines body for CreateGCPIntegrationMutation for application/json ContentType.
type CreateGCPIntegrationMutationJSONRequestBody CreateGCPIntegrationMutationJSONBody

// CreateGenericIntegrationMutationJSONRequestBody defines body for CreateGenericIntegrationMutation for application/json ContentType.
type CreateGenericIntegrationMutationJSONRequestBody CreateGenericIntegrationMutationJSONBody

// UpdateGenericIntegrationMutationJSONRequestBody defines body for UpdateGenericIntegrationMutation for application/json ContentType.
type UpdateGenericIntegrationMutationJSONRequestBody UpdateGenericIntegrationMutationJSONBody

// UpdateGitHubIntegrationMutationJSONRequestBody defines body for UpdateGitHubIntegrationMutation for application/json ContentType.
type UpdateGitHubIntegrationMutationJSONRequestBody UpdateGitHubIntegrationMutationJSONBody

// CreateGitHubIntegrationMutationJSONRequestBody defines body for CreateGitHubIntegrationMutation for application/json ContentType.
type CreateGitHubIntegrationMutationJSONRequestBody CreateGitHubIntegrationMutationJSONBody

// UpdateGitLabIntegrationMutationJSONRequestBody defines body for UpdateGitLabIntegrationMutation for application/json ContentType.
type UpdateGitLabIntegrationMutationJSONRequestBody UpdateGitLabIntegrationMutationJSONBody

// CreateGitLabIntegrationMutationJSONRequestBody defines body for CreateGitLabIntegrationMutation for application/json ContentType.
type CreateGitLabIntegrationMutationJSONRequestBody CreateGitLabIntegrationMutationJSONBody

// CreateKubernetesIntegrationMutationJSONRequestBody defines body for CreateKubernetesIntegrationMutation for application/json ContentType.
type CreateKubernetesIntegrationMutationJSONRequestBody CreateKubernetesIntegrationMutationJSONBody

// UpdateKubernetesIntegrationMutationJSONRequestBody defines body for UpdateKubernetesIntegrationMutation for application/json ContentType.
type UpdateKubernetesIntegrationMutationJSONRequestBody UpdateKubernetesIntegrationMutationJSONBody

// CreateSIEMIntegrationMutationJSONRequestBody defines body for CreateSIEMIntegrationMutation for application/json ContentType.
type CreateSIEMIntegrationMutationJSONRequestBody CreateSIEMIntegrationMutationJSONBody

// UpdateSIEMIntegrationMutationJSONRequestBody defines body for UpdateSIEMIntegrationMutation for application/json ContentType.
type UpdateSIEMIntegrationMutationJSONRequestBody UpdateSIEMIntegrationMutationJSONBody

// UpdateSlackIntegrationMutationJSONRequestBody defines body for UpdateSlackIntegrationMutation for application/json ContentType.
type UpdateSlackIntegrationMutationJSONRequestBody UpdateSlackIntegrationMutationJSONBody

// CreateSlackIntegrationMutationJSONRequestBody defines body for CreateSlackIntegrationMutation for application/json ContentType.
type CreateSlackIntegrationMutationJSONRequestBody CreateSlackIntegrationMutationJSONBody

// CreateInviteMutationJSONRequestBody defines body for CreateInviteMutation for application/json ContentType.
type CreateInviteMutationJSONRequestBody CreateInviteMutationJSONBody

// AcceptInviteMutationJSONRequestBody defines body for AcceptInviteMutation for application/json ContentType.
type AcceptInviteMutationJSONRequestBody = AcceptInviteMutationJSONBody

// AssociateNamespaceToEnvMutationJSONRequestBody defines body for AssociateNamespaceToEnvMutation for application/json ContentType.
type AssociateNamespaceToEnvMutationJSONRequestBody AssociateNamespaceToEnvMutationJSONBody

// CreateOrganizationMutationJSONRequestBody defines body for CreateOrganizationMutation for application/json ContentType.
type CreateOrganizationMutationJSONRequestBody CreateOrganizationMutationJSONBody

// UpdateOrganizationMutationJSONRequestBody defines body for UpdateOrganizationMutation for application/json ContentType.
type UpdateOrganizationMutationJSONRequestBody UpdateOrganizationMutationJSONBody

// UpdateServiceMutationJSONRequestBody defines body for UpdateServiceMutation for application/json ContentType.
type UpdateServiceMutationJSONRequestBody UpdateServiceMutationJSONBody

// ReportTerraformResourcesMutationJSONRequestBody defines body for ReportTerraformResourcesMutation for application/json ContentType.
type ReportTerraformResourcesMutationJSONRequestBody ReportTerraformResourcesMutationJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AccessGraphQuery request with any body
	AccessGraphQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessGraphQuery(ctx context.Context, body AccessGraphQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClientIntentsQuery request with any body
	ClientIntentsQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClientIntentsQuery(ctx context.Context, body ClientIntentsQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceClientIntentsQuery request with any body
	ServiceClientIntentsQueryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ServiceClientIntentsQuery(ctx context.Context, id string, body ServiceClientIntentsQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceIncomingInternetConnectionsQuery request
	ServiceIncomingInternetConnectionsQuery(ctx context.Context, targetServiceId string, params *ServiceIncomingInternetConnectionsQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessLogQuery request with any body
	AccessLogQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessLogQuery(ctx context.Context, body AccessLogQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneClusterQuery request
	OneClusterQuery(ctx context.Context, params *OneClusterQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClustersQuery request
	ClustersQuery(ctx context.Context, params *ClustersQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateClusterMutation request with any body
	CreateClusterMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateClusterMutation(ctx context.Context, body CreateClusterMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClusterMutation request
	DeleteClusterMutation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterQuery request
	ClusterQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateClusterMutation request with any body
	UpdateClusterMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateClusterMutation(ctx context.Context, id string, body UpdateClusterMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneEnvironmentQuery request
	OneEnvironmentQuery(ctx context.Context, params *OneEnvironmentQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentsQuery request
	EnvironmentsQuery(ctx context.Context, params *EnvironmentsQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironmentMutation request with any body
	CreateEnvironmentMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironmentMutation(ctx context.Context, body CreateEnvironmentMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironmentMutation request
	DeleteEnvironmentMutation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentQuery request
	EnvironmentQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironmentMutation request with any body
	UpdateEnvironmentMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEnvironmentMutation(ctx context.Context, id string, body UpdateEnvironmentMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddEnvironmentLabelMutation request with any body
	AddEnvironmentLabelMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddEnvironmentLabelMutation(ctx context.Context, id string, body AddEnvironmentLabelMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironmentLabelMutation request
	DeleteEnvironmentLabelMutation(ctx context.Context, id string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneIntegrationQuery request
	OneIntegrationQuery(ctx context.Context, params *OneIntegrationQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationsQuery request
	IntegrationsQuery(ctx context.Context, params *IntegrationsQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAWSIntegrationMutation request with any body
	UpdateAWSIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAWSIntegrationMutation(ctx context.Context, body UpdateAWSIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAWSIntegrationMutation request with any body
	CreateAWSIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAWSIntegrationMutation(ctx context.Context, body CreateAWSIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAwsVisibilityIntegrationMutation request with any body
	UpdateAwsVisibilityIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAwsVisibilityIntegrationMutation(ctx context.Context, body UpdateAwsVisibilityIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAwsVisibilityIntegrationMutation request with any body
	CreateAwsVisibilityIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAwsVisibilityIntegrationMutation(ctx context.Context, body CreateAwsVisibilityIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAzureIntegrationMutation request with any body
	UpdateAzureIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAzureIntegrationMutation(ctx context.Context, body UpdateAzureIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAzureIntegrationMutation request with any body
	CreateAzureIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAzureIntegrationMutation(ctx context.Context, body CreateAzureIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDatabaseIntegrationMutation request with any body
	CreateDatabaseIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDatabaseIntegrationMutation(ctx context.Context, body CreateDatabaseIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDatabaseIntegrationMutation request with any body
	UpdateDatabaseIntegrationMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDatabaseIntegrationMutation(ctx context.Context, id string, body UpdateDatabaseIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGCPIntegrationMutation request with any body
	UpdateGCPIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGCPIntegrationMutation(ctx context.Context, body UpdateGCPIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGCPIntegrationMutation request with any body
	CreateGCPIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGCPIntegrationMutation(ctx context.Context, body CreateGCPIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGenericIntegrationMutation request with any body
	CreateGenericIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGenericIntegrationMutation(ctx context.Context, body CreateGenericIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGenericIntegrationMutation request with any body
	UpdateGenericIntegrationMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGenericIntegrationMutation(ctx context.Context, id string, body UpdateGenericIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGitHubIntegrationMutation request with any body
	UpdateGitHubIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGitHubIntegrationMutation(ctx context.Context, body UpdateGitHubIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGitHubIntegrationMutation request with any body
	CreateGitHubIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGitHubIntegrationMutation(ctx context.Context, body CreateGitHubIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGitLabIntegrationMutation request with any body
	UpdateGitLabIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGitLabIntegrationMutation(ctx context.Context, body UpdateGitLabIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGitLabIntegrationMutation request with any body
	CreateGitLabIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGitLabIntegrationMutation(ctx context.Context, body CreateGitLabIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateKubernetesIntegrationMutation request with any body
	CreateKubernetesIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateKubernetesIntegrationMutation(ctx context.Context, body CreateKubernetesIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateKubernetesIntegrationMutation request with any body
	UpdateKubernetesIntegrationMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateKubernetesIntegrationMutation(ctx context.Context, id string, body UpdateKubernetesIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSIEMIntegrationMutation request with any body
	CreateSIEMIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSIEMIntegrationMutation(ctx context.Context, body CreateSIEMIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSIEMIntegrationMutation request with any body
	UpdateSIEMIntegrationMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSIEMIntegrationMutation(ctx context.Context, id string, body UpdateSIEMIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSlackIntegrationMutation request with any body
	UpdateSlackIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSlackIntegrationMutation(ctx context.Context, body UpdateSlackIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSlackIntegrationMutation request with any body
	CreateSlackIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSlackIntegrationMutation(ctx context.Context, body CreateSlackIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIntegrationMutation request
	DeleteIntegrationMutation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationQuery request
	IntegrationQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneInviteQuery request
	OneInviteQuery(ctx context.Context, params *OneInviteQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvitesQuery request
	InvitesQuery(ctx context.Context, params *InvitesQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInviteMutation request with any body
	CreateInviteMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInviteMutation(ctx context.Context, body CreateInviteMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInviteMutation request
	DeleteInviteMutation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InviteQuery request
	InviteQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcceptInviteMutation request with any body
	AcceptInviteMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AcceptInviteMutation(ctx context.Context, id string, body AcceptInviteMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MeQuery request
	MeQuery(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneNamespaceQuery request
	OneNamespaceQuery(ctx context.Context, params *OneNamespaceQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NamespacesQuery request
	NamespacesQuery(ctx context.Context, params *NamespacesQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NamespaceQuery request
	NamespaceQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssociateNamespaceToEnvMutation request with any body
	AssociateNamespaceToEnvMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssociateNamespaceToEnvMutation(ctx context.Context, id string, body AssociateNamespaceToEnvMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrgUsersQuery request
	OrgUsersQuery(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationsQuery request
	OrganizationsQuery(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationMutation request with any body
	CreateOrganizationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationMutation(ctx context.Context, body CreateOrganizationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationQuery request
	OrganizationQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationMutation request with any body
	UpdateOrganizationMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganizationMutation(ctx context.Context, id string, body UpdateOrganizationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserFromOrganizationMutation request
	RemoveUserFromOrganizationMutation(ctx context.Context, id string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PaginateServicesQuery request
	PaginateServicesQuery(ctx context.Context, params *PaginateServicesQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PingQuery request
	PingQuery(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OneServiceQuery request
	OneServiceQuery(ctx context.Context, params *OneServiceQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServicesQuery request
	ServicesQuery(ctx context.Context, params *ServicesQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServiceQuery request
	ServiceQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateServiceMutation request with any body
	UpdateServiceMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateServiceMutation(ctx context.Context, id string, body UpdateServiceMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TerraformResourceByIdentityQuery request
	TerraformResourceByIdentityQuery(ctx context.Context, params *TerraformResourceByIdentityQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportTerraformResourcesMutation request with any body
	ReportTerraformResourcesMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReportTerraformResourcesMutation(ctx context.Context, body ReportTerraformResourcesMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersQuery request
	UsersQuery(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserQuery request
	UserQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AccessGraphQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessGraphQueryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessGraphQuery(ctx context.Context, body AccessGraphQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessGraphQueryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClientIntentsQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClientIntentsQueryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClientIntentsQuery(ctx context.Context, body ClientIntentsQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClientIntentsQueryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceClientIntentsQueryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceClientIntentsQueryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceClientIntentsQuery(ctx context.Context, id string, body ServiceClientIntentsQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceClientIntentsQueryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceIncomingInternetConnectionsQuery(ctx context.Context, targetServiceId string, params *ServiceIncomingInternetConnectionsQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceIncomingInternetConnectionsQueryRequest(c.Server, targetServiceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessLogQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessLogQueryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessLogQuery(ctx context.Context, body AccessLogQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessLogQueryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneClusterQuery(ctx context.Context, params *OneClusterQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneClusterQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClustersQuery(ctx context.Context, params *ClustersQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClustersQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClusterMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClusterMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClusterMutation(ctx context.Context, body CreateClusterMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClusterMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClusterMutation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterMutationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterQueryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateClusterMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClusterMutationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateClusterMutation(ctx context.Context, id string, body UpdateClusterMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClusterMutationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneEnvironmentQuery(ctx context.Context, params *OneEnvironmentQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneEnvironmentQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentsQuery(ctx context.Context, params *EnvironmentsQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentsQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentMutation(ctx context.Context, body CreateEnvironmentMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironmentMutation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentMutationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentQueryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentMutationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentMutation(ctx context.Context, id string, body UpdateEnvironmentMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentMutationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddEnvironmentLabelMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddEnvironmentLabelMutationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddEnvironmentLabelMutation(ctx context.Context, id string, body AddEnvironmentLabelMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddEnvironmentLabelMutationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironmentLabelMutation(ctx context.Context, id string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentLabelMutationRequest(c.Server, id, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneIntegrationQuery(ctx context.Context, params *OneIntegrationQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneIntegrationQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationsQuery(ctx context.Context, params *IntegrationsQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationsQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAWSIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAWSIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAWSIntegrationMutation(ctx context.Context, body UpdateAWSIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAWSIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAWSIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAWSIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAWSIntegrationMutation(ctx context.Context, body CreateAWSIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAWSIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAwsVisibilityIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAwsVisibilityIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAwsVisibilityIntegrationMutation(ctx context.Context, body UpdateAwsVisibilityIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAwsVisibilityIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAwsVisibilityIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAwsVisibilityIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAwsVisibilityIntegrationMutation(ctx context.Context, body CreateAwsVisibilityIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAwsVisibilityIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAzureIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAzureIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAzureIntegrationMutation(ctx context.Context, body UpdateAzureIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAzureIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAzureIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAzureIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAzureIntegrationMutation(ctx context.Context, body CreateAzureIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAzureIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatabaseIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatabaseIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatabaseIntegrationMutation(ctx context.Context, body CreateDatabaseIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatabaseIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDatabaseIntegrationMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDatabaseIntegrationMutationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDatabaseIntegrationMutation(ctx context.Context, id string, body UpdateDatabaseIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDatabaseIntegrationMutationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGCPIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGCPIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGCPIntegrationMutation(ctx context.Context, body UpdateGCPIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGCPIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGCPIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGCPIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGCPIntegrationMutation(ctx context.Context, body CreateGCPIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGCPIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGenericIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGenericIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGenericIntegrationMutation(ctx context.Context, body CreateGenericIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGenericIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGenericIntegrationMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGenericIntegrationMutationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGenericIntegrationMutation(ctx context.Context, id string, body UpdateGenericIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGenericIntegrationMutationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGitHubIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGitHubIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGitHubIntegrationMutation(ctx context.Context, body UpdateGitHubIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGitHubIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGitHubIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGitHubIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGitHubIntegrationMutation(ctx context.Context, body CreateGitHubIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGitHubIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGitLabIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGitLabIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGitLabIntegrationMutation(ctx context.Context, body UpdateGitLabIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGitLabIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGitLabIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGitLabIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGitLabIntegrationMutation(ctx context.Context, body CreateGitLabIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGitLabIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateKubernetesIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateKubernetesIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateKubernetesIntegrationMutation(ctx context.Context, body CreateKubernetesIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateKubernetesIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateKubernetesIntegrationMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateKubernetesIntegrationMutationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateKubernetesIntegrationMutation(ctx context.Context, id string, body UpdateKubernetesIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateKubernetesIntegrationMutationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSIEMIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSIEMIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSIEMIntegrationMutation(ctx context.Context, body CreateSIEMIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSIEMIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSIEMIntegrationMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSIEMIntegrationMutationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSIEMIntegrationMutation(ctx context.Context, id string, body UpdateSIEMIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSIEMIntegrationMutationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSlackIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSlackIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSlackIntegrationMutation(ctx context.Context, body UpdateSlackIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSlackIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSlackIntegrationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSlackIntegrationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSlackIntegrationMutation(ctx context.Context, body CreateSlackIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSlackIntegrationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIntegrationMutation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIntegrationMutationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationQueryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneInviteQuery(ctx context.Context, params *OneInviteQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneInviteQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvitesQuery(ctx context.Context, params *InvitesQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvitesQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInviteMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInviteMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInviteMutation(ctx context.Context, body CreateInviteMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInviteMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInviteMutation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInviteMutationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteQueryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptInviteMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptInviteMutationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptInviteMutation(ctx context.Context, id string, body AcceptInviteMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptInviteMutationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MeQuery(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMeQueryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneNamespaceQuery(ctx context.Context, params *OneNamespaceQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneNamespaceQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NamespacesQuery(ctx context.Context, params *NamespacesQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNamespacesQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NamespaceQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNamespaceQueryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssociateNamespaceToEnvMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssociateNamespaceToEnvMutationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssociateNamespaceToEnvMutation(ctx context.Context, id string, body AssociateNamespaceToEnvMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssociateNamespaceToEnvMutationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrgUsersQuery(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrgUsersQueryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationsQuery(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationsQueryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationMutation(ctx context.Context, body CreateOrganizationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationQueryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationMutationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationMutation(ctx context.Context, id string, body UpdateOrganizationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationMutationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserFromOrganizationMutation(ctx context.Context, id string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserFromOrganizationMutationRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PaginateServicesQuery(ctx context.Context, params *PaginateServicesQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPaginateServicesQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PingQuery(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingQueryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OneServiceQuery(ctx context.Context, params *OneServiceQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOneServiceQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServicesQuery(ctx context.Context, params *ServicesQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServicesQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServiceQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServiceQueryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceMutationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceMutationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceMutation(ctx context.Context, id string, body UpdateServiceMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceMutationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TerraformResourceByIdentityQuery(ctx context.Context, params *TerraformResourceByIdentityQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTerraformResourceByIdentityQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportTerraformResourcesMutationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportTerraformResourcesMutationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportTerraformResourcesMutation(ctx context.Context, body ReportTerraformResourcesMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportTerraformResourcesMutationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersQuery(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersQueryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserQuery(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserQueryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAccessGraphQueryRequest calls the generic AccessGraphQuery builder with application/json body
func NewAccessGraphQueryRequest(server string, body AccessGraphQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessGraphQueryRequestWithBody(server, "application/json", bodyReader)
}

// NewAccessGraphQueryRequestWithBody generates requests for AccessGraphQuery with any type of body
func NewAccessGraphQueryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/access-graph")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClientIntentsQueryRequest calls the generic ClientIntentsQuery builder with application/json body
func NewClientIntentsQueryRequest(server string, body ClientIntentsQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClientIntentsQueryRequestWithBody(server, "application/json", bodyReader)
}

// NewClientIntentsQueryRequestWithBody generates requests for ClientIntentsQuery with any type of body
func NewClientIntentsQueryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/access-graph/client-intents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewServiceClientIntentsQueryRequest calls the generic ServiceClientIntentsQuery builder with application/json body
func NewServiceClientIntentsQueryRequest(server string, id string, body ServiceClientIntentsQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewServiceClientIntentsQueryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewServiceClientIntentsQueryRequestWithBody generates requests for ServiceClientIntentsQuery with any type of body
func NewServiceClientIntentsQueryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/access-graph/service-client-intents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewServiceIncomingInternetConnectionsQueryRequest generates requests for ServiceIncomingInternetConnectionsQuery
func NewServiceIncomingInternetConnectionsQueryRequest(server string, targetServiceId string, params *ServiceIncomingInternetConnectionsQueryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetServiceId", runtime.ParamLocationPath, targetServiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/access-graph/service-incoming-internet-connections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastSeenAfter", runtime.ParamLocationQuery, params.LastSeenAfter); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessLogQueryRequest calls the generic AccessLogQuery builder with application/json body
func NewAccessLogQueryRequest(server string, body AccessLogQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessLogQueryRequestWithBody(server, "application/json", bodyReader)
}

// NewAccessLogQueryRequestWithBody generates requests for AccessLogQuery with any type of body
func NewAccessLogQueryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/access-log")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOneClusterQueryRequest generates requests for OneClusterQuery
func NewOneClusterQueryRequest(server string, params *OneClusterQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cluster")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClustersQueryRequest generates requests for ClustersQuery
func NewClustersQueryRequest(server string, params *ClustersQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateClusterMutationRequest calls the generic CreateClusterMutation builder with application/json body
func NewCreateClusterMutationRequest(server string, body CreateClusterMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClusterMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateClusterMutationRequestWithBody generates requests for CreateClusterMutation with any type of body
func NewCreateClusterMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClusterMutationRequest generates requests for DeleteClusterMutation
func NewDeleteClusterMutationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterQueryRequest generates requests for ClusterQuery
func NewClusterQueryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateClusterMutationRequest calls the generic UpdateClusterMutation builder with application/json body
func NewUpdateClusterMutationRequest(server string, id string, body UpdateClusterMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateClusterMutationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateClusterMutationRequestWithBody generates requests for UpdateClusterMutation with any type of body
func NewUpdateClusterMutationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOneEnvironmentQueryRequest generates requests for OneEnvironmentQuery
func NewOneEnvironmentQueryRequest(server string, params *OneEnvironmentQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentsQueryRequest generates requests for EnvironmentsQuery
func NewEnvironmentsQueryRequest(server string, params *EnvironmentsQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Labels != nil {

		if queryParamBuf, err := json.Marshal(*params.Labels); err != nil {
			return nil, err
		} else {
			queryValues.Add("labels", string(queryParamBuf))
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentMutationRequest calls the generic CreateEnvironmentMutation builder with application/json body
func NewCreateEnvironmentMutationRequest(server string, body CreateEnvironmentMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateEnvironmentMutationRequestWithBody generates requests for CreateEnvironmentMutation with any type of body
func NewCreateEnvironmentMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentMutationRequest generates requests for DeleteEnvironmentMutation
func NewDeleteEnvironmentMutationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentQueryRequest generates requests for EnvironmentQuery
func NewEnvironmentQueryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentMutationRequest calls the generic UpdateEnvironmentMutation builder with application/json body
func NewUpdateEnvironmentMutationRequest(server string, id string, body UpdateEnvironmentMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEnvironmentMutationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateEnvironmentMutationRequestWithBody generates requests for UpdateEnvironmentMutation with any type of body
func NewUpdateEnvironmentMutationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddEnvironmentLabelMutationRequest calls the generic AddEnvironmentLabelMutation builder with application/json body
func NewAddEnvironmentLabelMutationRequest(server string, id string, body AddEnvironmentLabelMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddEnvironmentLabelMutationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddEnvironmentLabelMutationRequestWithBody generates requests for AddEnvironmentLabelMutation with any type of body
func NewAddEnvironmentLabelMutationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s/labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentLabelMutationRequest generates requests for DeleteEnvironmentLabelMutation
func NewDeleteEnvironmentLabelMutationRequest(server string, id string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments/%s/labels/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOneIntegrationQueryRequest generates requests for OneIntegrationQuery
func NewOneIntegrationQueryRequest(server string, params *OneIntegrationQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IntegrationType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "integrationType", runtime.ParamLocationQuery, *params.IntegrationType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EnvironmentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIntegrationsQueryRequest generates requests for IntegrationsQuery
func NewIntegrationsQueryRequest(server string, params *IntegrationsQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IntegrationType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "integrationType", runtime.ParamLocationQuery, *params.IntegrationType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EnvironmentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAWSIntegrationMutationRequest calls the generic UpdateAWSIntegrationMutation builder with application/json body
func NewUpdateAWSIntegrationMutationRequest(server string, body UpdateAWSIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAWSIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateAWSIntegrationMutationRequestWithBody generates requests for UpdateAWSIntegrationMutation with any type of body
func NewUpdateAWSIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/aws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAWSIntegrationMutationRequest calls the generic CreateAWSIntegrationMutation builder with application/json body
func NewCreateAWSIntegrationMutationRequest(server string, body CreateAWSIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAWSIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAWSIntegrationMutationRequestWithBody generates requests for CreateAWSIntegrationMutation with any type of body
func NewCreateAWSIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/aws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAwsVisibilityIntegrationMutationRequest calls the generic UpdateAwsVisibilityIntegrationMutation builder with application/json body
func NewUpdateAwsVisibilityIntegrationMutationRequest(server string, body UpdateAwsVisibilityIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAwsVisibilityIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateAwsVisibilityIntegrationMutationRequestWithBody generates requests for UpdateAwsVisibilityIntegrationMutation with any type of body
func NewUpdateAwsVisibilityIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/aws-metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAwsVisibilityIntegrationMutationRequest calls the generic CreateAwsVisibilityIntegrationMutation builder with application/json body
func NewCreateAwsVisibilityIntegrationMutationRequest(server string, body CreateAwsVisibilityIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAwsVisibilityIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAwsVisibilityIntegrationMutationRequestWithBody generates requests for CreateAwsVisibilityIntegrationMutation with any type of body
func NewCreateAwsVisibilityIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/aws-metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAzureIntegrationMutationRequest calls the generic UpdateAzureIntegrationMutation builder with application/json body
func NewUpdateAzureIntegrationMutationRequest(server string, body UpdateAzureIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAzureIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateAzureIntegrationMutationRequestWithBody generates requests for UpdateAzureIntegrationMutation with any type of body
func NewUpdateAzureIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/azure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAzureIntegrationMutationRequest calls the generic CreateAzureIntegrationMutation builder with application/json body
func NewCreateAzureIntegrationMutationRequest(server string, body CreateAzureIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAzureIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAzureIntegrationMutationRequestWithBody generates requests for CreateAzureIntegrationMutation with any type of body
func NewCreateAzureIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/azure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDatabaseIntegrationMutationRequest calls the generic CreateDatabaseIntegrationMutation builder with application/json body
func NewCreateDatabaseIntegrationMutationRequest(server string, body CreateDatabaseIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDatabaseIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDatabaseIntegrationMutationRequestWithBody generates requests for CreateDatabaseIntegrationMutation with any type of body
func NewCreateDatabaseIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/database")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateDatabaseIntegrationMutationRequest calls the generic UpdateDatabaseIntegrationMutation builder with application/json body
func NewUpdateDatabaseIntegrationMutationRequest(server string, id string, body UpdateDatabaseIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDatabaseIntegrationMutationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateDatabaseIntegrationMutationRequestWithBody generates requests for UpdateDatabaseIntegrationMutation with any type of body
func NewUpdateDatabaseIntegrationMutationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/database/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateGCPIntegrationMutationRequest calls the generic UpdateGCPIntegrationMutation builder with application/json body
func NewUpdateGCPIntegrationMutationRequest(server string, body UpdateGCPIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGCPIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateGCPIntegrationMutationRequestWithBody generates requests for UpdateGCPIntegrationMutation with any type of body
func NewUpdateGCPIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/gcp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateGCPIntegrationMutationRequest calls the generic CreateGCPIntegrationMutation builder with application/json body
func NewCreateGCPIntegrationMutationRequest(server string, body CreateGCPIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGCPIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateGCPIntegrationMutationRequestWithBody generates requests for CreateGCPIntegrationMutation with any type of body
func NewCreateGCPIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/gcp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateGenericIntegrationMutationRequest calls the generic CreateGenericIntegrationMutation builder with application/json body
func NewCreateGenericIntegrationMutationRequest(server string, body CreateGenericIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGenericIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateGenericIntegrationMutationRequestWithBody generates requests for CreateGenericIntegrationMutation with any type of body
func NewCreateGenericIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/generic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateGenericIntegrationMutationRequest calls the generic UpdateGenericIntegrationMutation builder with application/json body
func NewUpdateGenericIntegrationMutationRequest(server string, id string, body UpdateGenericIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGenericIntegrationMutationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateGenericIntegrationMutationRequestWithBody generates requests for UpdateGenericIntegrationMutation with any type of body
func NewUpdateGenericIntegrationMutationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/generic/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateGitHubIntegrationMutationRequest calls the generic UpdateGitHubIntegrationMutation builder with application/json body
func NewUpdateGitHubIntegrationMutationRequest(server string, body UpdateGitHubIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGitHubIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateGitHubIntegrationMutationRequestWithBody generates requests for UpdateGitHubIntegrationMutation with any type of body
func NewUpdateGitHubIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/github")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateGitHubIntegrationMutationRequest calls the generic CreateGitHubIntegrationMutation builder with application/json body
func NewCreateGitHubIntegrationMutationRequest(server string, body CreateGitHubIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGitHubIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateGitHubIntegrationMutationRequestWithBody generates requests for CreateGitHubIntegrationMutation with any type of body
func NewCreateGitHubIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/github")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateGitLabIntegrationMutationRequest calls the generic UpdateGitLabIntegrationMutation builder with application/json body
func NewUpdateGitLabIntegrationMutationRequest(server string, body UpdateGitLabIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGitLabIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateGitLabIntegrationMutationRequestWithBody generates requests for UpdateGitLabIntegrationMutation with any type of body
func NewUpdateGitLabIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/gitlab")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateGitLabIntegrationMutationRequest calls the generic CreateGitLabIntegrationMutation builder with application/json body
func NewCreateGitLabIntegrationMutationRequest(server string, body CreateGitLabIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGitLabIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateGitLabIntegrationMutationRequestWithBody generates requests for CreateGitLabIntegrationMutation with any type of body
func NewCreateGitLabIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/gitlab")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateKubernetesIntegrationMutationRequest calls the generic CreateKubernetesIntegrationMutation builder with application/json body
func NewCreateKubernetesIntegrationMutationRequest(server string, body CreateKubernetesIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateKubernetesIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateKubernetesIntegrationMutationRequestWithBody generates requests for CreateKubernetesIntegrationMutation with any type of body
func NewCreateKubernetesIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/kubernetes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateKubernetesIntegrationMutationRequest calls the generic UpdateKubernetesIntegrationMutation builder with application/json body
func NewUpdateKubernetesIntegrationMutationRequest(server string, id string, body UpdateKubernetesIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateKubernetesIntegrationMutationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateKubernetesIntegrationMutationRequestWithBody generates requests for UpdateKubernetesIntegrationMutation with any type of body
func NewUpdateKubernetesIntegrationMutationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/kubernetes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSIEMIntegrationMutationRequest calls the generic CreateSIEMIntegrationMutation builder with application/json body
func NewCreateSIEMIntegrationMutationRequest(server string, body CreateSIEMIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSIEMIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSIEMIntegrationMutationRequestWithBody generates requests for CreateSIEMIntegrationMutation with any type of body
func NewCreateSIEMIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/siem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSIEMIntegrationMutationRequest calls the generic UpdateSIEMIntegrationMutation builder with application/json body
func NewUpdateSIEMIntegrationMutationRequest(server string, id string, body UpdateSIEMIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSIEMIntegrationMutationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateSIEMIntegrationMutationRequestWithBody generates requests for UpdateSIEMIntegrationMutation with any type of body
func NewUpdateSIEMIntegrationMutationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/siem/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSlackIntegrationMutationRequest calls the generic UpdateSlackIntegrationMutation builder with application/json body
func NewUpdateSlackIntegrationMutationRequest(server string, body UpdateSlackIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSlackIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateSlackIntegrationMutationRequestWithBody generates requests for UpdateSlackIntegrationMutation with any type of body
func NewUpdateSlackIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/slack")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSlackIntegrationMutationRequest calls the generic CreateSlackIntegrationMutation builder with application/json body
func NewCreateSlackIntegrationMutationRequest(server string, body CreateSlackIntegrationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSlackIntegrationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSlackIntegrationMutationRequestWithBody generates requests for CreateSlackIntegrationMutation with any type of body
func NewCreateSlackIntegrationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/slack")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIntegrationMutationRequest generates requests for DeleteIntegrationMutation
func NewDeleteIntegrationMutationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIntegrationQueryRequest generates requests for IntegrationQuery
func NewIntegrationQueryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/integrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOneInviteQueryRequest generates requests for OneInviteQuery
func NewOneInviteQueryRequest(server string, params *OneInviteQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInvitesQueryRequest generates requests for InvitesQuery
func NewInvitesQueryRequest(server string, params *InvitesQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInviteMutationRequest calls the generic CreateInviteMutation builder with application/json body
func NewCreateInviteMutationRequest(server string, body CreateInviteMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInviteMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateInviteMutationRequestWithBody generates requests for CreateInviteMutation with any type of body
func NewCreateInviteMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInviteMutationRequest generates requests for DeleteInviteMutation
func NewDeleteInviteMutationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInviteQueryRequest generates requests for InviteQuery
func NewInviteQueryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcceptInviteMutationRequest calls the generic AcceptInviteMutation builder with application/json body
func NewAcceptInviteMutationRequest(server string, id string, body AcceptInviteMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAcceptInviteMutationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAcceptInviteMutationRequestWithBody generates requests for AcceptInviteMutation with any type of body
func NewAcceptInviteMutationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMeQueryRequest generates requests for MeQuery
func NewMeQueryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOneNamespaceQueryRequest generates requests for OneNamespaceQuery
func NewOneNamespaceQueryRequest(server string, params *OneNamespaceQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespace")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.EnvironmentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNamespacesQueryRequest generates requests for NamespacesQuery
func NewNamespacesQueryRequest(server string, params *NamespacesQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.EnvironmentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNamespaceQueryRequest generates requests for NamespaceQuery
func NewNamespaceQueryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssociateNamespaceToEnvMutationRequest calls the generic AssociateNamespaceToEnvMutation builder with application/json body
func NewAssociateNamespaceToEnvMutationRequest(server string, id string, body AssociateNamespaceToEnvMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssociateNamespaceToEnvMutationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAssociateNamespaceToEnvMutationRequestWithBody generates requests for AssociateNamespaceToEnvMutation with any type of body
func NewAssociateNamespaceToEnvMutationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/namespaces/%s/environment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrgUsersQueryRequest generates requests for OrgUsersQuery
func NewOrgUsersQueryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/org-users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationsQueryRequest generates requests for OrganizationsQuery
func NewOrganizationsQueryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationMutationRequest calls the generic CreateOrganizationMutation builder with application/json body
func NewCreateOrganizationMutationRequest(server string, body CreateOrganizationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationMutationRequestWithBody generates requests for CreateOrganizationMutation with any type of body
func NewCreateOrganizationMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationQueryRequest generates requests for OrganizationQuery
func NewOrganizationQueryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationMutationRequest calls the generic UpdateOrganizationMutation builder with application/json body
func NewUpdateOrganizationMutationRequest(server string, id string, body UpdateOrganizationMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationMutationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateOrganizationMutationRequestWithBody generates requests for UpdateOrganizationMutation with any type of body
func NewUpdateOrganizationMutationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveUserFromOrganizationMutationRequest generates requests for RemoveUserFromOrganizationMutation
func NewRemoveUserFromOrganizationMutationRequest(server string, id string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPaginateServicesQueryRequest generates requests for PaginateServicesQuery
func NewPaginateServicesQueryRequest(server string, params *PaginateServicesQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/paginate-services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagination != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagination", runtime.ParamLocationQuery, *params.Pagination); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FeatureFlags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "featureFlags", runtime.ParamLocationQuery, *params.FeatureFlags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPingQueryRequest generates requests for PingQuery
func NewPingQueryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOneServiceQueryRequest generates requests for OneServiceQuery
func NewOneServiceQueryRequest(server string, params *OneServiceQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/service")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.EnvironmentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NamespaceId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespaceId", runtime.ParamLocationQuery, *params.NamespaceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServicesQueryRequest generates requests for ServicesQuery
func NewServicesQueryRequest(server string, params *ServicesQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.EnvironmentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environmentId", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NamespaceId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespaceId", runtime.ParamLocationQuery, *params.NamespaceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FeatureFlags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "featureFlags", runtime.ParamLocationQuery, *params.FeatureFlags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServiceQueryRequest generates requests for ServiceQuery
func NewServiceQueryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceMutationRequest calls the generic UpdateServiceMutation builder with application/json body
func NewUpdateServiceMutationRequest(server string, id string, body UpdateServiceMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateServiceMutationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateServiceMutationRequestWithBody generates requests for UpdateServiceMutation with any type of body
func NewUpdateServiceMutationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTerraformResourceByIdentityQueryRequest generates requests for TerraformResourceByIdentityQuery
func NewTerraformResourceByIdentityQueryRequest(server string, params *TerraformResourceByIdentityQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/terraform-resources/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modulePath", runtime.ParamLocationQuery, params.ModulePath); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gitOriginUrl", runtime.ParamLocationQuery, params.GitOriginUrl); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gitCommitHash", runtime.ParamLocationQuery, params.GitCommitHash); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportTerraformResourcesMutationRequest calls the generic ReportTerraformResourcesMutation builder with application/json body
func NewReportTerraformResourcesMutationRequest(server string, body ReportTerraformResourcesMutationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReportTerraformResourcesMutationRequestWithBody(server, "application/json", bodyReader)
}

// NewReportTerraformResourcesMutationRequestWithBody generates requests for ReportTerraformResourcesMutation with any type of body
func NewReportTerraformResourcesMutationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/terraform-resources/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersQueryRequest generates requests for UsersQuery
func NewUsersQueryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserQueryRequest generates requests for UserQuery
func NewUserQueryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AccessGraphQuery request with any body
	AccessGraphQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessGraphQueryResponse, error)

	AccessGraphQueryWithResponse(ctx context.Context, body AccessGraphQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessGraphQueryResponse, error)

	// ClientIntentsQuery request with any body
	ClientIntentsQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClientIntentsQueryResponse, error)

	ClientIntentsQueryWithResponse(ctx context.Context, body ClientIntentsQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*ClientIntentsQueryResponse, error)

	// ServiceClientIntentsQuery request with any body
	ServiceClientIntentsQueryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ServiceClientIntentsQueryResponse, error)

	ServiceClientIntentsQueryWithResponse(ctx context.Context, id string, body ServiceClientIntentsQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*ServiceClientIntentsQueryResponse, error)

	// ServiceIncomingInternetConnectionsQuery request
	ServiceIncomingInternetConnectionsQueryWithResponse(ctx context.Context, targetServiceId string, params *ServiceIncomingInternetConnectionsQueryParams, reqEditors ...RequestEditorFn) (*ServiceIncomingInternetConnectionsQueryResponse, error)

	// AccessLogQuery request with any body
	AccessLogQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessLogQueryResponse, error)

	AccessLogQueryWithResponse(ctx context.Context, body AccessLogQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessLogQueryResponse, error)

	// OneClusterQuery request
	OneClusterQueryWithResponse(ctx context.Context, params *OneClusterQueryParams, reqEditors ...RequestEditorFn) (*OneClusterQueryResponse, error)

	// ClustersQuery request
	ClustersQueryWithResponse(ctx context.Context, params *ClustersQueryParams, reqEditors ...RequestEditorFn) (*ClustersQueryResponse, error)

	// CreateClusterMutation request with any body
	CreateClusterMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClusterMutationResponse, error)

	CreateClusterMutationWithResponse(ctx context.Context, body CreateClusterMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClusterMutationResponse, error)

	// DeleteClusterMutation request
	DeleteClusterMutationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteClusterMutationResponse, error)

	// ClusterQuery request
	ClusterQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ClusterQueryResponse, error)

	// UpdateClusterMutation request with any body
	UpdateClusterMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClusterMutationResponse, error)

	UpdateClusterMutationWithResponse(ctx context.Context, id string, body UpdateClusterMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClusterMutationResponse, error)

	// OneEnvironmentQuery request
	OneEnvironmentQueryWithResponse(ctx context.Context, params *OneEnvironmentQueryParams, reqEditors ...RequestEditorFn) (*OneEnvironmentQueryResponse, error)

	// EnvironmentsQuery request
	EnvironmentsQueryWithResponse(ctx context.Context, params *EnvironmentsQueryParams, reqEditors ...RequestEditorFn) (*EnvironmentsQueryResponse, error)

	// CreateEnvironmentMutation request with any body
	CreateEnvironmentMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentMutationResponse, error)

	CreateEnvironmentMutationWithResponse(ctx context.Context, body CreateEnvironmentMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentMutationResponse, error)

	// DeleteEnvironmentMutation request
	DeleteEnvironmentMutationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentMutationResponse, error)

	// EnvironmentQuery request
	EnvironmentQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*EnvironmentQueryResponse, error)

	// UpdateEnvironmentMutation request with any body
	UpdateEnvironmentMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentMutationResponse, error)

	UpdateEnvironmentMutationWithResponse(ctx context.Context, id string, body UpdateEnvironmentMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvironmentMutationResponse, error)

	// AddEnvironmentLabelMutation request with any body
	AddEnvironmentLabelMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddEnvironmentLabelMutationResponse, error)

	AddEnvironmentLabelMutationWithResponse(ctx context.Context, id string, body AddEnvironmentLabelMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*AddEnvironmentLabelMutationResponse, error)

	// DeleteEnvironmentLabelMutation request
	DeleteEnvironmentLabelMutationWithResponse(ctx context.Context, id string, key string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentLabelMutationResponse, error)

	// OneIntegrationQuery request
	OneIntegrationQueryWithResponse(ctx context.Context, params *OneIntegrationQueryParams, reqEditors ...RequestEditorFn) (*OneIntegrationQueryResponse, error)

	// IntegrationsQuery request
	IntegrationsQueryWithResponse(ctx context.Context, params *IntegrationsQueryParams, reqEditors ...RequestEditorFn) (*IntegrationsQueryResponse, error)

	// UpdateAWSIntegrationMutation request with any body
	UpdateAWSIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAWSIntegrationMutationResponse, error)

	UpdateAWSIntegrationMutationWithResponse(ctx context.Context, body UpdateAWSIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAWSIntegrationMutationResponse, error)

	// CreateAWSIntegrationMutation request with any body
	CreateAWSIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAWSIntegrationMutationResponse, error)

	CreateAWSIntegrationMutationWithResponse(ctx context.Context, body CreateAWSIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAWSIntegrationMutationResponse, error)

	// UpdateAwsVisibilityIntegrationMutation request with any body
	UpdateAwsVisibilityIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAwsVisibilityIntegrationMutationResponse, error)

	UpdateAwsVisibilityIntegrationMutationWithResponse(ctx context.Context, body UpdateAwsVisibilityIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAwsVisibilityIntegrationMutationResponse, error)

	// CreateAwsVisibilityIntegrationMutation request with any body
	CreateAwsVisibilityIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAwsVisibilityIntegrationMutationResponse, error)

	CreateAwsVisibilityIntegrationMutationWithResponse(ctx context.Context, body CreateAwsVisibilityIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAwsVisibilityIntegrationMutationResponse, error)

	// UpdateAzureIntegrationMutation request with any body
	UpdateAzureIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAzureIntegrationMutationResponse, error)

	UpdateAzureIntegrationMutationWithResponse(ctx context.Context, body UpdateAzureIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAzureIntegrationMutationResponse, error)

	// CreateAzureIntegrationMutation request with any body
	CreateAzureIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAzureIntegrationMutationResponse, error)

	CreateAzureIntegrationMutationWithResponse(ctx context.Context, body CreateAzureIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAzureIntegrationMutationResponse, error)

	// CreateDatabaseIntegrationMutation request with any body
	CreateDatabaseIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatabaseIntegrationMutationResponse, error)

	CreateDatabaseIntegrationMutationWithResponse(ctx context.Context, body CreateDatabaseIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatabaseIntegrationMutationResponse, error)

	// UpdateDatabaseIntegrationMutation request with any body
	UpdateDatabaseIntegrationMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDatabaseIntegrationMutationResponse, error)

	UpdateDatabaseIntegrationMutationWithResponse(ctx context.Context, id string, body UpdateDatabaseIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDatabaseIntegrationMutationResponse, error)

	// UpdateGCPIntegrationMutation request with any body
	UpdateGCPIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGCPIntegrationMutationResponse, error)

	UpdateGCPIntegrationMutationWithResponse(ctx context.Context, body UpdateGCPIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGCPIntegrationMutationResponse, error)

	// CreateGCPIntegrationMutation request with any body
	CreateGCPIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGCPIntegrationMutationResponse, error)

	CreateGCPIntegrationMutationWithResponse(ctx context.Context, body CreateGCPIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGCPIntegrationMutationResponse, error)

	// CreateGenericIntegrationMutation request with any body
	CreateGenericIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGenericIntegrationMutationResponse, error)

	CreateGenericIntegrationMutationWithResponse(ctx context.Context, body CreateGenericIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGenericIntegrationMutationResponse, error)

	// UpdateGenericIntegrationMutation request with any body
	UpdateGenericIntegrationMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGenericIntegrationMutationResponse, error)

	UpdateGenericIntegrationMutationWithResponse(ctx context.Context, id string, body UpdateGenericIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGenericIntegrationMutationResponse, error)

	// UpdateGitHubIntegrationMutation request with any body
	UpdateGitHubIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGitHubIntegrationMutationResponse, error)

	UpdateGitHubIntegrationMutationWithResponse(ctx context.Context, body UpdateGitHubIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGitHubIntegrationMutationResponse, error)

	// CreateGitHubIntegrationMutation request with any body
	CreateGitHubIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGitHubIntegrationMutationResponse, error)

	CreateGitHubIntegrationMutationWithResponse(ctx context.Context, body CreateGitHubIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGitHubIntegrationMutationResponse, error)

	// UpdateGitLabIntegrationMutation request with any body
	UpdateGitLabIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGitLabIntegrationMutationResponse, error)

	UpdateGitLabIntegrationMutationWithResponse(ctx context.Context, body UpdateGitLabIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGitLabIntegrationMutationResponse, error)

	// CreateGitLabIntegrationMutation request with any body
	CreateGitLabIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGitLabIntegrationMutationResponse, error)

	CreateGitLabIntegrationMutationWithResponse(ctx context.Context, body CreateGitLabIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGitLabIntegrationMutationResponse, error)

	// CreateKubernetesIntegrationMutation request with any body
	CreateKubernetesIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateKubernetesIntegrationMutationResponse, error)

	CreateKubernetesIntegrationMutationWithResponse(ctx context.Context, body CreateKubernetesIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateKubernetesIntegrationMutationResponse, error)

	// UpdateKubernetesIntegrationMutation request with any body
	UpdateKubernetesIntegrationMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateKubernetesIntegrationMutationResponse, error)

	UpdateKubernetesIntegrationMutationWithResponse(ctx context.Context, id string, body UpdateKubernetesIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateKubernetesIntegrationMutationResponse, error)

	// CreateSIEMIntegrationMutation request with any body
	CreateSIEMIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSIEMIntegrationMutationResponse, error)

	CreateSIEMIntegrationMutationWithResponse(ctx context.Context, body CreateSIEMIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSIEMIntegrationMutationResponse, error)

	// UpdateSIEMIntegrationMutation request with any body
	UpdateSIEMIntegrationMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSIEMIntegrationMutationResponse, error)

	UpdateSIEMIntegrationMutationWithResponse(ctx context.Context, id string, body UpdateSIEMIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSIEMIntegrationMutationResponse, error)

	// UpdateSlackIntegrationMutation request with any body
	UpdateSlackIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSlackIntegrationMutationResponse, error)

	UpdateSlackIntegrationMutationWithResponse(ctx context.Context, body UpdateSlackIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSlackIntegrationMutationResponse, error)

	// CreateSlackIntegrationMutation request with any body
	CreateSlackIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSlackIntegrationMutationResponse, error)

	CreateSlackIntegrationMutationWithResponse(ctx context.Context, body CreateSlackIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSlackIntegrationMutationResponse, error)

	// DeleteIntegrationMutation request
	DeleteIntegrationMutationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIntegrationMutationResponse, error)

	// IntegrationQuery request
	IntegrationQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IntegrationQueryResponse, error)

	// OneInviteQuery request
	OneInviteQueryWithResponse(ctx context.Context, params *OneInviteQueryParams, reqEditors ...RequestEditorFn) (*OneInviteQueryResponse, error)

	// InvitesQuery request
	InvitesQueryWithResponse(ctx context.Context, params *InvitesQueryParams, reqEditors ...RequestEditorFn) (*InvitesQueryResponse, error)

	// CreateInviteMutation request with any body
	CreateInviteMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInviteMutationResponse, error)

	CreateInviteMutationWithResponse(ctx context.Context, body CreateInviteMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInviteMutationResponse, error)

	// DeleteInviteMutation request
	DeleteInviteMutationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteInviteMutationResponse, error)

	// InviteQuery request
	InviteQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*InviteQueryResponse, error)

	// AcceptInviteMutation request with any body
	AcceptInviteMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcceptInviteMutationResponse, error)

	AcceptInviteMutationWithResponse(ctx context.Context, id string, body AcceptInviteMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*AcceptInviteMutationResponse, error)

	// MeQuery request
	MeQueryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MeQueryResponse, error)

	// OneNamespaceQuery request
	OneNamespaceQueryWithResponse(ctx context.Context, params *OneNamespaceQueryParams, reqEditors ...RequestEditorFn) (*OneNamespaceQueryResponse, error)

	// NamespacesQuery request
	NamespacesQueryWithResponse(ctx context.Context, params *NamespacesQueryParams, reqEditors ...RequestEditorFn) (*NamespacesQueryResponse, error)

	// NamespaceQuery request
	NamespaceQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*NamespaceQueryResponse, error)

	// AssociateNamespaceToEnvMutation request with any body
	AssociateNamespaceToEnvMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssociateNamespaceToEnvMutationResponse, error)

	AssociateNamespaceToEnvMutationWithResponse(ctx context.Context, id string, body AssociateNamespaceToEnvMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*AssociateNamespaceToEnvMutationResponse, error)

	// OrgUsersQuery request
	OrgUsersQueryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OrgUsersQueryResponse, error)

	// OrganizationsQuery request
	OrganizationsQueryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OrganizationsQueryResponse, error)

	// CreateOrganizationMutation request with any body
	CreateOrganizationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationMutationResponse, error)

	CreateOrganizationMutationWithResponse(ctx context.Context, body CreateOrganizationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationMutationResponse, error)

	// OrganizationQuery request
	OrganizationQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*OrganizationQueryResponse, error)

	// UpdateOrganizationMutation request with any body
	UpdateOrganizationMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationMutationResponse, error)

	UpdateOrganizationMutationWithResponse(ctx context.Context, id string, body UpdateOrganizationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationMutationResponse, error)

	// RemoveUserFromOrganizationMutation request
	RemoveUserFromOrganizationMutationWithResponse(ctx context.Context, id string, userId string, reqEditors ...RequestEditorFn) (*RemoveUserFromOrganizationMutationResponse, error)

	// PaginateServicesQuery request
	PaginateServicesQueryWithResponse(ctx context.Context, params *PaginateServicesQueryParams, reqEditors ...RequestEditorFn) (*PaginateServicesQueryResponse, error)

	// PingQuery request
	PingQueryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingQueryResponse, error)

	// OneServiceQuery request
	OneServiceQueryWithResponse(ctx context.Context, params *OneServiceQueryParams, reqEditors ...RequestEditorFn) (*OneServiceQueryResponse, error)

	// ServicesQuery request
	ServicesQueryWithResponse(ctx context.Context, params *ServicesQueryParams, reqEditors ...RequestEditorFn) (*ServicesQueryResponse, error)

	// ServiceQuery request
	ServiceQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ServiceQueryResponse, error)

	// UpdateServiceMutation request with any body
	UpdateServiceMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceMutationResponse, error)

	UpdateServiceMutationWithResponse(ctx context.Context, id string, body UpdateServiceMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceMutationResponse, error)

	// TerraformResourceByIdentityQuery request
	TerraformResourceByIdentityQueryWithResponse(ctx context.Context, params *TerraformResourceByIdentityQueryParams, reqEditors ...RequestEditorFn) (*TerraformResourceByIdentityQueryResponse, error)

	// ReportTerraformResourcesMutation request with any body
	ReportTerraformResourcesMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportTerraformResourcesMutationResponse, error)

	ReportTerraformResourcesMutationWithResponse(ctx context.Context, body ReportTerraformResourcesMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportTerraformResourcesMutationResponse, error)

	// UsersQuery request
	UsersQueryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UsersQueryResponse, error)

	// UserQuery request
	UserQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UserQueryResponse, error)
}

type AccessGraphQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessGraph
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r AccessGraphQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessGraphQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClientIntentsQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClientIntentsFileRepresentation
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ClientIntentsQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClientIntentsQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceClientIntentsQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceClientIntents
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ServiceClientIntentsQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceClientIntentsQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceIncomingInternetConnectionsQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ServiceIncomingInternetConnectionsQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceIncomingInternetConnectionsQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessLogQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessLog
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r AccessLogQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessLogQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneClusterQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r OneClusterQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneClusterQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClustersQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ClustersQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClustersQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClusterMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateClusterMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClusterMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClusterMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteClusterMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClusterQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ClusterQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateClusterMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateClusterMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateClusterMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneEnvironmentQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r OneEnvironmentQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneEnvironmentQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentsQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Environment
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r EnvironmentsQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentsQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r EnvironmentQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddEnvironmentLabelMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r AddEnvironmentLabelMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddEnvironmentLabelMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentLabelMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentLabelMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentLabelMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneIntegrationQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r OneIntegrationQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneIntegrationQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationsQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r IntegrationsQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationsQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAWSIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateAWSIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAWSIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAWSIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateAWSIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAWSIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAwsVisibilityIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateAwsVisibilityIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAwsVisibilityIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAwsVisibilityIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateAwsVisibilityIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAwsVisibilityIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAzureIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateAzureIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAzureIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAzureIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateAzureIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAzureIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDatabaseIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDatabaseIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGCPIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateGCPIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGCPIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGCPIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateGCPIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGCPIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGenericIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateGenericIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGenericIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGenericIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateGenericIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGenericIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGitHubIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateGitHubIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGitHubIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGitHubIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateGitHubIntegrationResponse
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateGitHubIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGitHubIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGitLabIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateGitLabIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGitLabIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGitLabIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateGitLabIntegrationResponse
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateGitLabIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGitLabIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateKubernetesIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateKubernetesIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateKubernetesIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateKubernetesIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateKubernetesIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateKubernetesIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSIEMIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateSIEMIntegrationResponse
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateSIEMIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSIEMIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSIEMIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateSIEMIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSIEMIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSlackIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateSlackIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSlackIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSlackIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateSlackIntegrationResponse
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateSlackIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSlackIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIntegrationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteIntegrationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIntegrationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r IntegrationQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneInviteQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invite
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r OneInviteQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneInviteQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvitesQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Invite
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r InvitesQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvitesQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInviteMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invite
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateInviteMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInviteMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInviteMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteInviteMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInviteMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InviteQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invite
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r InviteQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InviteQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptInviteMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invite
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r AcceptInviteMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptInviteMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MeQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Me
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r MeQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MeQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneNamespaceQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Namespace
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r OneNamespaceQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneNamespaceQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NamespacesQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Namespace
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r NamespacesQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NamespacesQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NamespaceQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Namespace
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r NamespaceQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NamespaceQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssociateNamespaceToEnvMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Namespace
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r AssociateNamespaceToEnvMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssociateNamespaceToEnvMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrgUsersQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserOrganizationAssociation
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r OrgUsersQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrgUsersQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationsQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Organization
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r OrganizationsQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationsQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r OrganizationQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserFromOrganizationMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r RemoveUserFromOrganizationMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserFromOrganizationMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PaginateServicesQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesResponse
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PaginateServicesQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PaginateServicesQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PingQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PingQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OneServiceQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Service
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r OneServiceQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OneServiceQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServicesQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Service
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ServicesQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServicesQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServiceQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Service
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ServiceQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServiceQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Service
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UpdateServiceMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TerraformResourceByIdentityQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TerraformResourceInfo
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r TerraformResourceByIdentityQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TerraformResourceByIdentityQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportTerraformResourcesMutationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TerraformResourceInfo
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ReportTerraformResourcesMutationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportTerraformResourcesMutationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON408      *Error
	JSON409      *Error
	JSON422      *Error
	JSON500      *Error
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UserQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AccessGraphQueryWithBodyWithResponse request with arbitrary body returning *AccessGraphQueryResponse
func (c *ClientWithResponses) AccessGraphQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessGraphQueryResponse, error) {
	rsp, err := c.AccessGraphQueryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessGraphQueryResponse(rsp)
}

func (c *ClientWithResponses) AccessGraphQueryWithResponse(ctx context.Context, body AccessGraphQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessGraphQueryResponse, error) {
	rsp, err := c.AccessGraphQuery(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessGraphQueryResponse(rsp)
}

// ClientIntentsQueryWithBodyWithResponse request with arbitrary body returning *ClientIntentsQueryResponse
func (c *ClientWithResponses) ClientIntentsQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClientIntentsQueryResponse, error) {
	rsp, err := c.ClientIntentsQueryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClientIntentsQueryResponse(rsp)
}

func (c *ClientWithResponses) ClientIntentsQueryWithResponse(ctx context.Context, body ClientIntentsQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*ClientIntentsQueryResponse, error) {
	rsp, err := c.ClientIntentsQuery(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClientIntentsQueryResponse(rsp)
}

// ServiceClientIntentsQueryWithBodyWithResponse request with arbitrary body returning *ServiceClientIntentsQueryResponse
func (c *ClientWithResponses) ServiceClientIntentsQueryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ServiceClientIntentsQueryResponse, error) {
	rsp, err := c.ServiceClientIntentsQueryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceClientIntentsQueryResponse(rsp)
}

func (c *ClientWithResponses) ServiceClientIntentsQueryWithResponse(ctx context.Context, id string, body ServiceClientIntentsQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*ServiceClientIntentsQueryResponse, error) {
	rsp, err := c.ServiceClientIntentsQuery(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceClientIntentsQueryResponse(rsp)
}

// ServiceIncomingInternetConnectionsQueryWithResponse request returning *ServiceIncomingInternetConnectionsQueryResponse
func (c *ClientWithResponses) ServiceIncomingInternetConnectionsQueryWithResponse(ctx context.Context, targetServiceId string, params *ServiceIncomingInternetConnectionsQueryParams, reqEditors ...RequestEditorFn) (*ServiceIncomingInternetConnectionsQueryResponse, error) {
	rsp, err := c.ServiceIncomingInternetConnectionsQuery(ctx, targetServiceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceIncomingInternetConnectionsQueryResponse(rsp)
}

// AccessLogQueryWithBodyWithResponse request with arbitrary body returning *AccessLogQueryResponse
func (c *ClientWithResponses) AccessLogQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessLogQueryResponse, error) {
	rsp, err := c.AccessLogQueryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessLogQueryResponse(rsp)
}

func (c *ClientWithResponses) AccessLogQueryWithResponse(ctx context.Context, body AccessLogQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessLogQueryResponse, error) {
	rsp, err := c.AccessLogQuery(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessLogQueryResponse(rsp)
}

// OneClusterQueryWithResponse request returning *OneClusterQueryResponse
func (c *ClientWithResponses) OneClusterQueryWithResponse(ctx context.Context, params *OneClusterQueryParams, reqEditors ...RequestEditorFn) (*OneClusterQueryResponse, error) {
	rsp, err := c.OneClusterQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneClusterQueryResponse(rsp)
}

// ClustersQueryWithResponse request returning *ClustersQueryResponse
func (c *ClientWithResponses) ClustersQueryWithResponse(ctx context.Context, params *ClustersQueryParams, reqEditors ...RequestEditorFn) (*ClustersQueryResponse, error) {
	rsp, err := c.ClustersQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClustersQueryResponse(rsp)
}

// CreateClusterMutationWithBodyWithResponse request with arbitrary body returning *CreateClusterMutationResponse
func (c *ClientWithResponses) CreateClusterMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClusterMutationResponse, error) {
	rsp, err := c.CreateClusterMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClusterMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateClusterMutationWithResponse(ctx context.Context, body CreateClusterMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClusterMutationResponse, error) {
	rsp, err := c.CreateClusterMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClusterMutationResponse(rsp)
}

// DeleteClusterMutationWithResponse request returning *DeleteClusterMutationResponse
func (c *ClientWithResponses) DeleteClusterMutationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteClusterMutationResponse, error) {
	rsp, err := c.DeleteClusterMutation(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterMutationResponse(rsp)
}

// ClusterQueryWithResponse request returning *ClusterQueryResponse
func (c *ClientWithResponses) ClusterQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ClusterQueryResponse, error) {
	rsp, err := c.ClusterQuery(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClusterQueryResponse(rsp)
}

// UpdateClusterMutationWithBodyWithResponse request with arbitrary body returning *UpdateClusterMutationResponse
func (c *ClientWithResponses) UpdateClusterMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateClusterMutationResponse, error) {
	rsp, err := c.UpdateClusterMutationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClusterMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateClusterMutationWithResponse(ctx context.Context, id string, body UpdateClusterMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateClusterMutationResponse, error) {
	rsp, err := c.UpdateClusterMutation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClusterMutationResponse(rsp)
}

// OneEnvironmentQueryWithResponse request returning *OneEnvironmentQueryResponse
func (c *ClientWithResponses) OneEnvironmentQueryWithResponse(ctx context.Context, params *OneEnvironmentQueryParams, reqEditors ...RequestEditorFn) (*OneEnvironmentQueryResponse, error) {
	rsp, err := c.OneEnvironmentQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneEnvironmentQueryResponse(rsp)
}

// EnvironmentsQueryWithResponse request returning *EnvironmentsQueryResponse
func (c *ClientWithResponses) EnvironmentsQueryWithResponse(ctx context.Context, params *EnvironmentsQueryParams, reqEditors ...RequestEditorFn) (*EnvironmentsQueryResponse, error) {
	rsp, err := c.EnvironmentsQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentsQueryResponse(rsp)
}

// CreateEnvironmentMutationWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentMutationResponse
func (c *ClientWithResponses) CreateEnvironmentMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentMutationResponse, error) {
	rsp, err := c.CreateEnvironmentMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentMutationWithResponse(ctx context.Context, body CreateEnvironmentMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentMutationResponse, error) {
	rsp, err := c.CreateEnvironmentMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentMutationResponse(rsp)
}

// DeleteEnvironmentMutationWithResponse request returning *DeleteEnvironmentMutationResponse
func (c *ClientWithResponses) DeleteEnvironmentMutationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentMutationResponse, error) {
	rsp, err := c.DeleteEnvironmentMutation(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentMutationResponse(rsp)
}

// EnvironmentQueryWithResponse request returning *EnvironmentQueryResponse
func (c *ClientWithResponses) EnvironmentQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*EnvironmentQueryResponse, error) {
	rsp, err := c.EnvironmentQuery(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentQueryResponse(rsp)
}

// UpdateEnvironmentMutationWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentMutationResponse
func (c *ClientWithResponses) UpdateEnvironmentMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentMutationResponse, error) {
	rsp, err := c.UpdateEnvironmentMutationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateEnvironmentMutationWithResponse(ctx context.Context, id string, body UpdateEnvironmentMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvironmentMutationResponse, error) {
	rsp, err := c.UpdateEnvironmentMutation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentMutationResponse(rsp)
}

// AddEnvironmentLabelMutationWithBodyWithResponse request with arbitrary body returning *AddEnvironmentLabelMutationResponse
func (c *ClientWithResponses) AddEnvironmentLabelMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddEnvironmentLabelMutationResponse, error) {
	rsp, err := c.AddEnvironmentLabelMutationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddEnvironmentLabelMutationResponse(rsp)
}

func (c *ClientWithResponses) AddEnvironmentLabelMutationWithResponse(ctx context.Context, id string, body AddEnvironmentLabelMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*AddEnvironmentLabelMutationResponse, error) {
	rsp, err := c.AddEnvironmentLabelMutation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddEnvironmentLabelMutationResponse(rsp)
}

// DeleteEnvironmentLabelMutationWithResponse request returning *DeleteEnvironmentLabelMutationResponse
func (c *ClientWithResponses) DeleteEnvironmentLabelMutationWithResponse(ctx context.Context, id string, key string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentLabelMutationResponse, error) {
	rsp, err := c.DeleteEnvironmentLabelMutation(ctx, id, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentLabelMutationResponse(rsp)
}

// OneIntegrationQueryWithResponse request returning *OneIntegrationQueryResponse
func (c *ClientWithResponses) OneIntegrationQueryWithResponse(ctx context.Context, params *OneIntegrationQueryParams, reqEditors ...RequestEditorFn) (*OneIntegrationQueryResponse, error) {
	rsp, err := c.OneIntegrationQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneIntegrationQueryResponse(rsp)
}

// IntegrationsQueryWithResponse request returning *IntegrationsQueryResponse
func (c *ClientWithResponses) IntegrationsQueryWithResponse(ctx context.Context, params *IntegrationsQueryParams, reqEditors ...RequestEditorFn) (*IntegrationsQueryResponse, error) {
	rsp, err := c.IntegrationsQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationsQueryResponse(rsp)
}

// UpdateAWSIntegrationMutationWithBodyWithResponse request with arbitrary body returning *UpdateAWSIntegrationMutationResponse
func (c *ClientWithResponses) UpdateAWSIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAWSIntegrationMutationResponse, error) {
	rsp, err := c.UpdateAWSIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAWSIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateAWSIntegrationMutationWithResponse(ctx context.Context, body UpdateAWSIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAWSIntegrationMutationResponse, error) {
	rsp, err := c.UpdateAWSIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAWSIntegrationMutationResponse(rsp)
}

// CreateAWSIntegrationMutationWithBodyWithResponse request with arbitrary body returning *CreateAWSIntegrationMutationResponse
func (c *ClientWithResponses) CreateAWSIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAWSIntegrationMutationResponse, error) {
	rsp, err := c.CreateAWSIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAWSIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateAWSIntegrationMutationWithResponse(ctx context.Context, body CreateAWSIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAWSIntegrationMutationResponse, error) {
	rsp, err := c.CreateAWSIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAWSIntegrationMutationResponse(rsp)
}

// UpdateAwsVisibilityIntegrationMutationWithBodyWithResponse request with arbitrary body returning *UpdateAwsVisibilityIntegrationMutationResponse
func (c *ClientWithResponses) UpdateAwsVisibilityIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAwsVisibilityIntegrationMutationResponse, error) {
	rsp, err := c.UpdateAwsVisibilityIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAwsVisibilityIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateAwsVisibilityIntegrationMutationWithResponse(ctx context.Context, body UpdateAwsVisibilityIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAwsVisibilityIntegrationMutationResponse, error) {
	rsp, err := c.UpdateAwsVisibilityIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAwsVisibilityIntegrationMutationResponse(rsp)
}

// CreateAwsVisibilityIntegrationMutationWithBodyWithResponse request with arbitrary body returning *CreateAwsVisibilityIntegrationMutationResponse
func (c *ClientWithResponses) CreateAwsVisibilityIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAwsVisibilityIntegrationMutationResponse, error) {
	rsp, err := c.CreateAwsVisibilityIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAwsVisibilityIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateAwsVisibilityIntegrationMutationWithResponse(ctx context.Context, body CreateAwsVisibilityIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAwsVisibilityIntegrationMutationResponse, error) {
	rsp, err := c.CreateAwsVisibilityIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAwsVisibilityIntegrationMutationResponse(rsp)
}

// UpdateAzureIntegrationMutationWithBodyWithResponse request with arbitrary body returning *UpdateAzureIntegrationMutationResponse
func (c *ClientWithResponses) UpdateAzureIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAzureIntegrationMutationResponse, error) {
	rsp, err := c.UpdateAzureIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAzureIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateAzureIntegrationMutationWithResponse(ctx context.Context, body UpdateAzureIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAzureIntegrationMutationResponse, error) {
	rsp, err := c.UpdateAzureIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAzureIntegrationMutationResponse(rsp)
}

// CreateAzureIntegrationMutationWithBodyWithResponse request with arbitrary body returning *CreateAzureIntegrationMutationResponse
func (c *ClientWithResponses) CreateAzureIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAzureIntegrationMutationResponse, error) {
	rsp, err := c.CreateAzureIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAzureIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateAzureIntegrationMutationWithResponse(ctx context.Context, body CreateAzureIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAzureIntegrationMutationResponse, error) {
	rsp, err := c.CreateAzureIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAzureIntegrationMutationResponse(rsp)
}

// CreateDatabaseIntegrationMutationWithBodyWithResponse request with arbitrary body returning *CreateDatabaseIntegrationMutationResponse
func (c *ClientWithResponses) CreateDatabaseIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatabaseIntegrationMutationResponse, error) {
	rsp, err := c.CreateDatabaseIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatabaseIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateDatabaseIntegrationMutationWithResponse(ctx context.Context, body CreateDatabaseIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatabaseIntegrationMutationResponse, error) {
	rsp, err := c.CreateDatabaseIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatabaseIntegrationMutationResponse(rsp)
}

// UpdateDatabaseIntegrationMutationWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseIntegrationMutationResponse
func (c *ClientWithResponses) UpdateDatabaseIntegrationMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDatabaseIntegrationMutationResponse, error) {
	rsp, err := c.UpdateDatabaseIntegrationMutationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDatabaseIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateDatabaseIntegrationMutationWithResponse(ctx context.Context, id string, body UpdateDatabaseIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDatabaseIntegrationMutationResponse, error) {
	rsp, err := c.UpdateDatabaseIntegrationMutation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDatabaseIntegrationMutationResponse(rsp)
}

// UpdateGCPIntegrationMutationWithBodyWithResponse request with arbitrary body returning *UpdateGCPIntegrationMutationResponse
func (c *ClientWithResponses) UpdateGCPIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGCPIntegrationMutationResponse, error) {
	rsp, err := c.UpdateGCPIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGCPIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateGCPIntegrationMutationWithResponse(ctx context.Context, body UpdateGCPIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGCPIntegrationMutationResponse, error) {
	rsp, err := c.UpdateGCPIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGCPIntegrationMutationResponse(rsp)
}

// CreateGCPIntegrationMutationWithBodyWithResponse request with arbitrary body returning *CreateGCPIntegrationMutationResponse
func (c *ClientWithResponses) CreateGCPIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGCPIntegrationMutationResponse, error) {
	rsp, err := c.CreateGCPIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGCPIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateGCPIntegrationMutationWithResponse(ctx context.Context, body CreateGCPIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGCPIntegrationMutationResponse, error) {
	rsp, err := c.CreateGCPIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGCPIntegrationMutationResponse(rsp)
}

// CreateGenericIntegrationMutationWithBodyWithResponse request with arbitrary body returning *CreateGenericIntegrationMutationResponse
func (c *ClientWithResponses) CreateGenericIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGenericIntegrationMutationResponse, error) {
	rsp, err := c.CreateGenericIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGenericIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateGenericIntegrationMutationWithResponse(ctx context.Context, body CreateGenericIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGenericIntegrationMutationResponse, error) {
	rsp, err := c.CreateGenericIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGenericIntegrationMutationResponse(rsp)
}

// UpdateGenericIntegrationMutationWithBodyWithResponse request with arbitrary body returning *UpdateGenericIntegrationMutationResponse
func (c *ClientWithResponses) UpdateGenericIntegrationMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGenericIntegrationMutationResponse, error) {
	rsp, err := c.UpdateGenericIntegrationMutationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGenericIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateGenericIntegrationMutationWithResponse(ctx context.Context, id string, body UpdateGenericIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGenericIntegrationMutationResponse, error) {
	rsp, err := c.UpdateGenericIntegrationMutation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGenericIntegrationMutationResponse(rsp)
}

// UpdateGitHubIntegrationMutationWithBodyWithResponse request with arbitrary body returning *UpdateGitHubIntegrationMutationResponse
func (c *ClientWithResponses) UpdateGitHubIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGitHubIntegrationMutationResponse, error) {
	rsp, err := c.UpdateGitHubIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGitHubIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateGitHubIntegrationMutationWithResponse(ctx context.Context, body UpdateGitHubIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGitHubIntegrationMutationResponse, error) {
	rsp, err := c.UpdateGitHubIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGitHubIntegrationMutationResponse(rsp)
}

// CreateGitHubIntegrationMutationWithBodyWithResponse request with arbitrary body returning *CreateGitHubIntegrationMutationResponse
func (c *ClientWithResponses) CreateGitHubIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGitHubIntegrationMutationResponse, error) {
	rsp, err := c.CreateGitHubIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGitHubIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateGitHubIntegrationMutationWithResponse(ctx context.Context, body CreateGitHubIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGitHubIntegrationMutationResponse, error) {
	rsp, err := c.CreateGitHubIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGitHubIntegrationMutationResponse(rsp)
}

// UpdateGitLabIntegrationMutationWithBodyWithResponse request with arbitrary body returning *UpdateGitLabIntegrationMutationResponse
func (c *ClientWithResponses) UpdateGitLabIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGitLabIntegrationMutationResponse, error) {
	rsp, err := c.UpdateGitLabIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGitLabIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateGitLabIntegrationMutationWithResponse(ctx context.Context, body UpdateGitLabIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGitLabIntegrationMutationResponse, error) {
	rsp, err := c.UpdateGitLabIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGitLabIntegrationMutationResponse(rsp)
}

// CreateGitLabIntegrationMutationWithBodyWithResponse request with arbitrary body returning *CreateGitLabIntegrationMutationResponse
func (c *ClientWithResponses) CreateGitLabIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGitLabIntegrationMutationResponse, error) {
	rsp, err := c.CreateGitLabIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGitLabIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateGitLabIntegrationMutationWithResponse(ctx context.Context, body CreateGitLabIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGitLabIntegrationMutationResponse, error) {
	rsp, err := c.CreateGitLabIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGitLabIntegrationMutationResponse(rsp)
}

// CreateKubernetesIntegrationMutationWithBodyWithResponse request with arbitrary body returning *CreateKubernetesIntegrationMutationResponse
func (c *ClientWithResponses) CreateKubernetesIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateKubernetesIntegrationMutationResponse, error) {
	rsp, err := c.CreateKubernetesIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateKubernetesIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateKubernetesIntegrationMutationWithResponse(ctx context.Context, body CreateKubernetesIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateKubernetesIntegrationMutationResponse, error) {
	rsp, err := c.CreateKubernetesIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateKubernetesIntegrationMutationResponse(rsp)
}

// UpdateKubernetesIntegrationMutationWithBodyWithResponse request with arbitrary body returning *UpdateKubernetesIntegrationMutationResponse
func (c *ClientWithResponses) UpdateKubernetesIntegrationMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateKubernetesIntegrationMutationResponse, error) {
	rsp, err := c.UpdateKubernetesIntegrationMutationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateKubernetesIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateKubernetesIntegrationMutationWithResponse(ctx context.Context, id string, body UpdateKubernetesIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateKubernetesIntegrationMutationResponse, error) {
	rsp, err := c.UpdateKubernetesIntegrationMutation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateKubernetesIntegrationMutationResponse(rsp)
}

// CreateSIEMIntegrationMutationWithBodyWithResponse request with arbitrary body returning *CreateSIEMIntegrationMutationResponse
func (c *ClientWithResponses) CreateSIEMIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSIEMIntegrationMutationResponse, error) {
	rsp, err := c.CreateSIEMIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSIEMIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateSIEMIntegrationMutationWithResponse(ctx context.Context, body CreateSIEMIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSIEMIntegrationMutationResponse, error) {
	rsp, err := c.CreateSIEMIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSIEMIntegrationMutationResponse(rsp)
}

// UpdateSIEMIntegrationMutationWithBodyWithResponse request with arbitrary body returning *UpdateSIEMIntegrationMutationResponse
func (c *ClientWithResponses) UpdateSIEMIntegrationMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSIEMIntegrationMutationResponse, error) {
	rsp, err := c.UpdateSIEMIntegrationMutationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSIEMIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateSIEMIntegrationMutationWithResponse(ctx context.Context, id string, body UpdateSIEMIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSIEMIntegrationMutationResponse, error) {
	rsp, err := c.UpdateSIEMIntegrationMutation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSIEMIntegrationMutationResponse(rsp)
}

// UpdateSlackIntegrationMutationWithBodyWithResponse request with arbitrary body returning *UpdateSlackIntegrationMutationResponse
func (c *ClientWithResponses) UpdateSlackIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSlackIntegrationMutationResponse, error) {
	rsp, err := c.UpdateSlackIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSlackIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateSlackIntegrationMutationWithResponse(ctx context.Context, body UpdateSlackIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSlackIntegrationMutationResponse, error) {
	rsp, err := c.UpdateSlackIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSlackIntegrationMutationResponse(rsp)
}

// CreateSlackIntegrationMutationWithBodyWithResponse request with arbitrary body returning *CreateSlackIntegrationMutationResponse
func (c *ClientWithResponses) CreateSlackIntegrationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSlackIntegrationMutationResponse, error) {
	rsp, err := c.CreateSlackIntegrationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSlackIntegrationMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateSlackIntegrationMutationWithResponse(ctx context.Context, body CreateSlackIntegrationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSlackIntegrationMutationResponse, error) {
	rsp, err := c.CreateSlackIntegrationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSlackIntegrationMutationResponse(rsp)
}

// DeleteIntegrationMutationWithResponse request returning *DeleteIntegrationMutationResponse
func (c *ClientWithResponses) DeleteIntegrationMutationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteIntegrationMutationResponse, error) {
	rsp, err := c.DeleteIntegrationMutation(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIntegrationMutationResponse(rsp)
}

// IntegrationQueryWithResponse request returning *IntegrationQueryResponse
func (c *ClientWithResponses) IntegrationQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IntegrationQueryResponse, error) {
	rsp, err := c.IntegrationQuery(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationQueryResponse(rsp)
}

// OneInviteQueryWithResponse request returning *OneInviteQueryResponse
func (c *ClientWithResponses) OneInviteQueryWithResponse(ctx context.Context, params *OneInviteQueryParams, reqEditors ...RequestEditorFn) (*OneInviteQueryResponse, error) {
	rsp, err := c.OneInviteQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneInviteQueryResponse(rsp)
}

// InvitesQueryWithResponse request returning *InvitesQueryResponse
func (c *ClientWithResponses) InvitesQueryWithResponse(ctx context.Context, params *InvitesQueryParams, reqEditors ...RequestEditorFn) (*InvitesQueryResponse, error) {
	rsp, err := c.InvitesQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvitesQueryResponse(rsp)
}

// CreateInviteMutationWithBodyWithResponse request with arbitrary body returning *CreateInviteMutationResponse
func (c *ClientWithResponses) CreateInviteMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInviteMutationResponse, error) {
	rsp, err := c.CreateInviteMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInviteMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateInviteMutationWithResponse(ctx context.Context, body CreateInviteMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInviteMutationResponse, error) {
	rsp, err := c.CreateInviteMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInviteMutationResponse(rsp)
}

// DeleteInviteMutationWithResponse request returning *DeleteInviteMutationResponse
func (c *ClientWithResponses) DeleteInviteMutationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteInviteMutationResponse, error) {
	rsp, err := c.DeleteInviteMutation(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInviteMutationResponse(rsp)
}

// InviteQueryWithResponse request returning *InviteQueryResponse
func (c *ClientWithResponses) InviteQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*InviteQueryResponse, error) {
	rsp, err := c.InviteQuery(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteQueryResponse(rsp)
}

// AcceptInviteMutationWithBodyWithResponse request with arbitrary body returning *AcceptInviteMutationResponse
func (c *ClientWithResponses) AcceptInviteMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcceptInviteMutationResponse, error) {
	rsp, err := c.AcceptInviteMutationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptInviteMutationResponse(rsp)
}

func (c *ClientWithResponses) AcceptInviteMutationWithResponse(ctx context.Context, id string, body AcceptInviteMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*AcceptInviteMutationResponse, error) {
	rsp, err := c.AcceptInviteMutation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptInviteMutationResponse(rsp)
}

// MeQueryWithResponse request returning *MeQueryResponse
func (c *ClientWithResponses) MeQueryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MeQueryResponse, error) {
	rsp, err := c.MeQuery(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMeQueryResponse(rsp)
}

// OneNamespaceQueryWithResponse request returning *OneNamespaceQueryResponse
func (c *ClientWithResponses) OneNamespaceQueryWithResponse(ctx context.Context, params *OneNamespaceQueryParams, reqEditors ...RequestEditorFn) (*OneNamespaceQueryResponse, error) {
	rsp, err := c.OneNamespaceQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneNamespaceQueryResponse(rsp)
}

// NamespacesQueryWithResponse request returning *NamespacesQueryResponse
func (c *ClientWithResponses) NamespacesQueryWithResponse(ctx context.Context, params *NamespacesQueryParams, reqEditors ...RequestEditorFn) (*NamespacesQueryResponse, error) {
	rsp, err := c.NamespacesQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNamespacesQueryResponse(rsp)
}

// NamespaceQueryWithResponse request returning *NamespaceQueryResponse
func (c *ClientWithResponses) NamespaceQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*NamespaceQueryResponse, error) {
	rsp, err := c.NamespaceQuery(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNamespaceQueryResponse(rsp)
}

// AssociateNamespaceToEnvMutationWithBodyWithResponse request with arbitrary body returning *AssociateNamespaceToEnvMutationResponse
func (c *ClientWithResponses) AssociateNamespaceToEnvMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssociateNamespaceToEnvMutationResponse, error) {
	rsp, err := c.AssociateNamespaceToEnvMutationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssociateNamespaceToEnvMutationResponse(rsp)
}

func (c *ClientWithResponses) AssociateNamespaceToEnvMutationWithResponse(ctx context.Context, id string, body AssociateNamespaceToEnvMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*AssociateNamespaceToEnvMutationResponse, error) {
	rsp, err := c.AssociateNamespaceToEnvMutation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssociateNamespaceToEnvMutationResponse(rsp)
}

// OrgUsersQueryWithResponse request returning *OrgUsersQueryResponse
func (c *ClientWithResponses) OrgUsersQueryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OrgUsersQueryResponse, error) {
	rsp, err := c.OrgUsersQuery(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrgUsersQueryResponse(rsp)
}

// OrganizationsQueryWithResponse request returning *OrganizationsQueryResponse
func (c *ClientWithResponses) OrganizationsQueryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OrganizationsQueryResponse, error) {
	rsp, err := c.OrganizationsQuery(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationsQueryResponse(rsp)
}

// CreateOrganizationMutationWithBodyWithResponse request with arbitrary body returning *CreateOrganizationMutationResponse
func (c *ClientWithResponses) CreateOrganizationMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationMutationResponse, error) {
	rsp, err := c.CreateOrganizationMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationMutationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationMutationWithResponse(ctx context.Context, body CreateOrganizationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationMutationResponse, error) {
	rsp, err := c.CreateOrganizationMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationMutationResponse(rsp)
}

// OrganizationQueryWithResponse request returning *OrganizationQueryResponse
func (c *ClientWithResponses) OrganizationQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*OrganizationQueryResponse, error) {
	rsp, err := c.OrganizationQuery(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationQueryResponse(rsp)
}

// UpdateOrganizationMutationWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationMutationResponse
func (c *ClientWithResponses) UpdateOrganizationMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationMutationResponse, error) {
	rsp, err := c.UpdateOrganizationMutationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationMutationWithResponse(ctx context.Context, id string, body UpdateOrganizationMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationMutationResponse, error) {
	rsp, err := c.UpdateOrganizationMutation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationMutationResponse(rsp)
}

// RemoveUserFromOrganizationMutationWithResponse request returning *RemoveUserFromOrganizationMutationResponse
func (c *ClientWithResponses) RemoveUserFromOrganizationMutationWithResponse(ctx context.Context, id string, userId string, reqEditors ...RequestEditorFn) (*RemoveUserFromOrganizationMutationResponse, error) {
	rsp, err := c.RemoveUserFromOrganizationMutation(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserFromOrganizationMutationResponse(rsp)
}

// PaginateServicesQueryWithResponse request returning *PaginateServicesQueryResponse
func (c *ClientWithResponses) PaginateServicesQueryWithResponse(ctx context.Context, params *PaginateServicesQueryParams, reqEditors ...RequestEditorFn) (*PaginateServicesQueryResponse, error) {
	rsp, err := c.PaginateServicesQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePaginateServicesQueryResponse(rsp)
}

// PingQueryWithResponse request returning *PingQueryResponse
func (c *ClientWithResponses) PingQueryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingQueryResponse, error) {
	rsp, err := c.PingQuery(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingQueryResponse(rsp)
}

// OneServiceQueryWithResponse request returning *OneServiceQueryResponse
func (c *ClientWithResponses) OneServiceQueryWithResponse(ctx context.Context, params *OneServiceQueryParams, reqEditors ...RequestEditorFn) (*OneServiceQueryResponse, error) {
	rsp, err := c.OneServiceQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOneServiceQueryResponse(rsp)
}

// ServicesQueryWithResponse request returning *ServicesQueryResponse
func (c *ClientWithResponses) ServicesQueryWithResponse(ctx context.Context, params *ServicesQueryParams, reqEditors ...RequestEditorFn) (*ServicesQueryResponse, error) {
	rsp, err := c.ServicesQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServicesQueryResponse(rsp)
}

// ServiceQueryWithResponse request returning *ServiceQueryResponse
func (c *ClientWithResponses) ServiceQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ServiceQueryResponse, error) {
	rsp, err := c.ServiceQuery(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServiceQueryResponse(rsp)
}

// UpdateServiceMutationWithBodyWithResponse request with arbitrary body returning *UpdateServiceMutationResponse
func (c *ClientWithResponses) UpdateServiceMutationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceMutationResponse, error) {
	rsp, err := c.UpdateServiceMutationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceMutationResponse(rsp)
}

func (c *ClientWithResponses) UpdateServiceMutationWithResponse(ctx context.Context, id string, body UpdateServiceMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceMutationResponse, error) {
	rsp, err := c.UpdateServiceMutation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceMutationResponse(rsp)
}

// TerraformResourceByIdentityQueryWithResponse request returning *TerraformResourceByIdentityQueryResponse
func (c *ClientWithResponses) TerraformResourceByIdentityQueryWithResponse(ctx context.Context, params *TerraformResourceByIdentityQueryParams, reqEditors ...RequestEditorFn) (*TerraformResourceByIdentityQueryResponse, error) {
	rsp, err := c.TerraformResourceByIdentityQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTerraformResourceByIdentityQueryResponse(rsp)
}

// ReportTerraformResourcesMutationWithBodyWithResponse request with arbitrary body returning *ReportTerraformResourcesMutationResponse
func (c *ClientWithResponses) ReportTerraformResourcesMutationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportTerraformResourcesMutationResponse, error) {
	rsp, err := c.ReportTerraformResourcesMutationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportTerraformResourcesMutationResponse(rsp)
}

func (c *ClientWithResponses) ReportTerraformResourcesMutationWithResponse(ctx context.Context, body ReportTerraformResourcesMutationJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportTerraformResourcesMutationResponse, error) {
	rsp, err := c.ReportTerraformResourcesMutation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportTerraformResourcesMutationResponse(rsp)
}

// UsersQueryWithResponse request returning *UsersQueryResponse
func (c *ClientWithResponses) UsersQueryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UsersQueryResponse, error) {
	rsp, err := c.UsersQuery(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersQueryResponse(rsp)
}

// UserQueryWithResponse request returning *UserQueryResponse
func (c *ClientWithResponses) UserQueryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UserQueryResponse, error) {
	rsp, err := c.UserQuery(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserQueryResponse(rsp)
}

// ParseAccessGraphQueryResponse parses an HTTP response from a AccessGraphQueryWithResponse call
func ParseAccessGraphQueryResponse(rsp *http.Response) (*AccessGraphQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessGraphQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessGraph
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClientIntentsQueryResponse parses an HTTP response from a ClientIntentsQueryWithResponse call
func ParseClientIntentsQueryResponse(rsp *http.Response) (*ClientIntentsQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClientIntentsQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClientIntentsFileRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseServiceClientIntentsQueryResponse parses an HTTP response from a ServiceClientIntentsQueryWithResponse call
func ParseServiceClientIntentsQueryResponse(rsp *http.Response) (*ServiceClientIntentsQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceClientIntentsQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceClientIntents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseServiceIncomingInternetConnectionsQueryResponse parses an HTTP response from a ServiceIncomingInternetConnectionsQueryWithResponse call
func ParseServiceIncomingInternetConnectionsQueryResponse(rsp *http.Response) (*ServiceIncomingInternetConnectionsQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceIncomingInternetConnectionsQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAccessLogQueryResponse parses an HTTP response from a AccessLogQueryWithResponse call
func ParseAccessLogQueryResponse(rsp *http.Response) (*AccessLogQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessLogQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOneClusterQueryResponse parses an HTTP response from a OneClusterQueryWithResponse call
func ParseOneClusterQueryResponse(rsp *http.Response) (*OneClusterQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneClusterQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClustersQueryResponse parses an HTTP response from a ClustersQueryWithResponse call
func ParseClustersQueryResponse(rsp *http.Response) (*ClustersQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClustersQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateClusterMutationResponse parses an HTTP response from a CreateClusterMutationWithResponse call
func ParseCreateClusterMutationResponse(rsp *http.Response) (*CreateClusterMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateClusterMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteClusterMutationResponse parses an HTTP response from a DeleteClusterMutationWithResponse call
func ParseDeleteClusterMutationResponse(rsp *http.Response) (*DeleteClusterMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClusterQueryResponse parses an HTTP response from a ClusterQueryWithResponse call
func ParseClusterQueryResponse(rsp *http.Response) (*ClusterQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClusterQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateClusterMutationResponse parses an HTTP response from a UpdateClusterMutationWithResponse call
func ParseUpdateClusterMutationResponse(rsp *http.Response) (*UpdateClusterMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateClusterMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOneEnvironmentQueryResponse parses an HTTP response from a OneEnvironmentQueryWithResponse call
func ParseOneEnvironmentQueryResponse(rsp *http.Response) (*OneEnvironmentQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneEnvironmentQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEnvironmentsQueryResponse parses an HTTP response from a EnvironmentsQueryWithResponse call
func ParseEnvironmentsQueryResponse(rsp *http.Response) (*EnvironmentsQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentsQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateEnvironmentMutationResponse parses an HTTP response from a CreateEnvironmentMutationWithResponse call
func ParseCreateEnvironmentMutationResponse(rsp *http.Response) (*CreateEnvironmentMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentMutationResponse parses an HTTP response from a DeleteEnvironmentMutationWithResponse call
func ParseDeleteEnvironmentMutationResponse(rsp *http.Response) (*DeleteEnvironmentMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEnvironmentQueryResponse parses an HTTP response from a EnvironmentQueryWithResponse call
func ParseEnvironmentQueryResponse(rsp *http.Response) (*EnvironmentQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateEnvironmentMutationResponse parses an HTTP response from a UpdateEnvironmentMutationWithResponse call
func ParseUpdateEnvironmentMutationResponse(rsp *http.Response) (*UpdateEnvironmentMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAddEnvironmentLabelMutationResponse parses an HTTP response from a AddEnvironmentLabelMutationWithResponse call
func ParseAddEnvironmentLabelMutationResponse(rsp *http.Response) (*AddEnvironmentLabelMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddEnvironmentLabelMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentLabelMutationResponse parses an HTTP response from a DeleteEnvironmentLabelMutationWithResponse call
func ParseDeleteEnvironmentLabelMutationResponse(rsp *http.Response) (*DeleteEnvironmentLabelMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentLabelMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOneIntegrationQueryResponse parses an HTTP response from a OneIntegrationQueryWithResponse call
func ParseOneIntegrationQueryResponse(rsp *http.Response) (*OneIntegrationQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneIntegrationQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationsQueryResponse parses an HTTP response from a IntegrationsQueryWithResponse call
func ParseIntegrationsQueryResponse(rsp *http.Response) (*IntegrationsQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationsQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateAWSIntegrationMutationResponse parses an HTTP response from a UpdateAWSIntegrationMutationWithResponse call
func ParseUpdateAWSIntegrationMutationResponse(rsp *http.Response) (*UpdateAWSIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAWSIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAWSIntegrationMutationResponse parses an HTTP response from a CreateAWSIntegrationMutationWithResponse call
func ParseCreateAWSIntegrationMutationResponse(rsp *http.Response) (*CreateAWSIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAWSIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateAwsVisibilityIntegrationMutationResponse parses an HTTP response from a UpdateAwsVisibilityIntegrationMutationWithResponse call
func ParseUpdateAwsVisibilityIntegrationMutationResponse(rsp *http.Response) (*UpdateAwsVisibilityIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAwsVisibilityIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAwsVisibilityIntegrationMutationResponse parses an HTTP response from a CreateAwsVisibilityIntegrationMutationWithResponse call
func ParseCreateAwsVisibilityIntegrationMutationResponse(rsp *http.Response) (*CreateAwsVisibilityIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAwsVisibilityIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateAzureIntegrationMutationResponse parses an HTTP response from a UpdateAzureIntegrationMutationWithResponse call
func ParseUpdateAzureIntegrationMutationResponse(rsp *http.Response) (*UpdateAzureIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAzureIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAzureIntegrationMutationResponse parses an HTTP response from a CreateAzureIntegrationMutationWithResponse call
func ParseCreateAzureIntegrationMutationResponse(rsp *http.Response) (*CreateAzureIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAzureIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateDatabaseIntegrationMutationResponse parses an HTTP response from a CreateDatabaseIntegrationMutationWithResponse call
func ParseCreateDatabaseIntegrationMutationResponse(rsp *http.Response) (*CreateDatabaseIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDatabaseIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateDatabaseIntegrationMutationResponse parses an HTTP response from a UpdateDatabaseIntegrationMutationWithResponse call
func ParseUpdateDatabaseIntegrationMutationResponse(rsp *http.Response) (*UpdateDatabaseIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDatabaseIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateGCPIntegrationMutationResponse parses an HTTP response from a UpdateGCPIntegrationMutationWithResponse call
func ParseUpdateGCPIntegrationMutationResponse(rsp *http.Response) (*UpdateGCPIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateGCPIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateGCPIntegrationMutationResponse parses an HTTP response from a CreateGCPIntegrationMutationWithResponse call
func ParseCreateGCPIntegrationMutationResponse(rsp *http.Response) (*CreateGCPIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGCPIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateGenericIntegrationMutationResponse parses an HTTP response from a CreateGenericIntegrationMutationWithResponse call
func ParseCreateGenericIntegrationMutationResponse(rsp *http.Response) (*CreateGenericIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGenericIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateGenericIntegrationMutationResponse parses an HTTP response from a UpdateGenericIntegrationMutationWithResponse call
func ParseUpdateGenericIntegrationMutationResponse(rsp *http.Response) (*UpdateGenericIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateGenericIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateGitHubIntegrationMutationResponse parses an HTTP response from a UpdateGitHubIntegrationMutationWithResponse call
func ParseUpdateGitHubIntegrationMutationResponse(rsp *http.Response) (*UpdateGitHubIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateGitHubIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateGitHubIntegrationMutationResponse parses an HTTP response from a CreateGitHubIntegrationMutationWithResponse call
func ParseCreateGitHubIntegrationMutationResponse(rsp *http.Response) (*CreateGitHubIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGitHubIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateGitHubIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateGitLabIntegrationMutationResponse parses an HTTP response from a UpdateGitLabIntegrationMutationWithResponse call
func ParseUpdateGitLabIntegrationMutationResponse(rsp *http.Response) (*UpdateGitLabIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateGitLabIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateGitLabIntegrationMutationResponse parses an HTTP response from a CreateGitLabIntegrationMutationWithResponse call
func ParseCreateGitLabIntegrationMutationResponse(rsp *http.Response) (*CreateGitLabIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGitLabIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateGitLabIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateKubernetesIntegrationMutationResponse parses an HTTP response from a CreateKubernetesIntegrationMutationWithResponse call
func ParseCreateKubernetesIntegrationMutationResponse(rsp *http.Response) (*CreateKubernetesIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateKubernetesIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateKubernetesIntegrationMutationResponse parses an HTTP response from a UpdateKubernetesIntegrationMutationWithResponse call
func ParseUpdateKubernetesIntegrationMutationResponse(rsp *http.Response) (*UpdateKubernetesIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateKubernetesIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSIEMIntegrationMutationResponse parses an HTTP response from a CreateSIEMIntegrationMutationWithResponse call
func ParseCreateSIEMIntegrationMutationResponse(rsp *http.Response) (*CreateSIEMIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSIEMIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateSIEMIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateSIEMIntegrationMutationResponse parses an HTTP response from a UpdateSIEMIntegrationMutationWithResponse call
func ParseUpdateSIEMIntegrationMutationResponse(rsp *http.Response) (*UpdateSIEMIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSIEMIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateSlackIntegrationMutationResponse parses an HTTP response from a UpdateSlackIntegrationMutationWithResponse call
func ParseUpdateSlackIntegrationMutationResponse(rsp *http.Response) (*UpdateSlackIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSlackIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSlackIntegrationMutationResponse parses an HTTP response from a CreateSlackIntegrationMutationWithResponse call
func ParseCreateSlackIntegrationMutationResponse(rsp *http.Response) (*CreateSlackIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSlackIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateSlackIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIntegrationMutationResponse parses an HTTP response from a DeleteIntegrationMutationWithResponse call
func ParseDeleteIntegrationMutationResponse(rsp *http.Response) (*DeleteIntegrationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIntegrationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseIntegrationQueryResponse parses an HTTP response from a IntegrationQueryWithResponse call
func ParseIntegrationQueryResponse(rsp *http.Response) (*IntegrationQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOneInviteQueryResponse parses an HTTP response from a OneInviteQueryWithResponse call
func ParseOneInviteQueryResponse(rsp *http.Response) (*OneInviteQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneInviteQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInvitesQueryResponse parses an HTTP response from a InvitesQueryWithResponse call
func ParseInvitesQueryResponse(rsp *http.Response) (*InvitesQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvitesQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Invite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateInviteMutationResponse parses an HTTP response from a CreateInviteMutationWithResponse call
func ParseCreateInviteMutationResponse(rsp *http.Response) (*CreateInviteMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInviteMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteInviteMutationResponse parses an HTTP response from a DeleteInviteMutationWithResponse call
func ParseDeleteInviteMutationResponse(rsp *http.Response) (*DeleteInviteMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInviteMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseInviteQueryResponse parses an HTTP response from a InviteQueryWithResponse call
func ParseInviteQueryResponse(rsp *http.Response) (*InviteQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InviteQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAcceptInviteMutationResponse parses an HTTP response from a AcceptInviteMutationWithResponse call
func ParseAcceptInviteMutationResponse(rsp *http.Response) (*AcceptInviteMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcceptInviteMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseMeQueryResponse parses an HTTP response from a MeQueryWithResponse call
func ParseMeQueryResponse(rsp *http.Response) (*MeQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MeQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Me
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOneNamespaceQueryResponse parses an HTTP response from a OneNamespaceQueryWithResponse call
func ParseOneNamespaceQueryResponse(rsp *http.Response) (*OneNamespaceQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneNamespaceQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Namespace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNamespacesQueryResponse parses an HTTP response from a NamespacesQueryWithResponse call
func ParseNamespacesQueryResponse(rsp *http.Response) (*NamespacesQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NamespacesQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Namespace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseNamespaceQueryResponse parses an HTTP response from a NamespaceQueryWithResponse call
func ParseNamespaceQueryResponse(rsp *http.Response) (*NamespaceQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NamespaceQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Namespace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAssociateNamespaceToEnvMutationResponse parses an HTTP response from a AssociateNamespaceToEnvMutationWithResponse call
func ParseAssociateNamespaceToEnvMutationResponse(rsp *http.Response) (*AssociateNamespaceToEnvMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssociateNamespaceToEnvMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Namespace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOrgUsersQueryResponse parses an HTTP response from a OrgUsersQueryWithResponse call
func ParseOrgUsersQueryResponse(rsp *http.Response) (*OrgUsersQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrgUsersQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserOrganizationAssociation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOrganizationsQueryResponse parses an HTTP response from a OrganizationsQueryWithResponse call
func ParseOrganizationsQueryResponse(rsp *http.Response) (*OrganizationsQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationsQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrganizationMutationResponse parses an HTTP response from a CreateOrganizationMutationWithResponse call
func ParseCreateOrganizationMutationResponse(rsp *http.Response) (*CreateOrganizationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOrganizationQueryResponse parses an HTTP response from a OrganizationQueryWithResponse call
func ParseOrganizationQueryResponse(rsp *http.Response) (*OrganizationQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationMutationResponse parses an HTTP response from a UpdateOrganizationMutationWithResponse call
func ParseUpdateOrganizationMutationResponse(rsp *http.Response) (*UpdateOrganizationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveUserFromOrganizationMutationResponse parses an HTTP response from a RemoveUserFromOrganizationMutationWithResponse call
func ParseRemoveUserFromOrganizationMutationResponse(rsp *http.Response) (*RemoveUserFromOrganizationMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserFromOrganizationMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePaginateServicesQueryResponse parses an HTTP response from a PaginateServicesQueryWithResponse call
func ParsePaginateServicesQueryResponse(rsp *http.Response) (*PaginateServicesQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PaginateServicesQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePingQueryResponse parses an HTTP response from a PingQueryWithResponse call
func ParsePingQueryResponse(rsp *http.Response) (*PingQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PingQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOneServiceQueryResponse parses an HTTP response from a OneServiceQueryWithResponse call
func ParseOneServiceQueryResponse(rsp *http.Response) (*OneServiceQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OneServiceQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Service
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseServicesQueryResponse parses an HTTP response from a ServicesQueryWithResponse call
func ParseServicesQueryResponse(rsp *http.Response) (*ServicesQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServicesQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Service
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseServiceQueryResponse parses an HTTP response from a ServiceQueryWithResponse call
func ParseServiceQueryResponse(rsp *http.Response) (*ServiceQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServiceQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Service
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateServiceMutationResponse parses an HTTP response from a UpdateServiceMutationWithResponse call
func ParseUpdateServiceMutationResponse(rsp *http.Response) (*UpdateServiceMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Service
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTerraformResourceByIdentityQueryResponse parses an HTTP response from a TerraformResourceByIdentityQueryWithResponse call
func ParseTerraformResourceByIdentityQueryResponse(rsp *http.Response) (*TerraformResourceByIdentityQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TerraformResourceByIdentityQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TerraformResourceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReportTerraformResourcesMutationResponse parses an HTTP response from a ReportTerraformResourcesMutationWithResponse call
func ParseReportTerraformResourcesMutationResponse(rsp *http.Response) (*ReportTerraformResourcesMutationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportTerraformResourcesMutationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TerraformResourceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersQueryResponse parses an HTTP response from a UsersQueryWithResponse call
func ParseUsersQueryResponse(rsp *http.Response) (*UsersQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUserQueryResponse parses an HTTP response from a UserQueryWithResponse call
func ParseUserQueryResponse(rsp *http.Response) (*UserQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
